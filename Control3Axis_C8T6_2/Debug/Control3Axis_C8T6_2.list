
Control3Axis_C8T6_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058c4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  080059d0  080059d0  000159d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b50  08005b50  0002013c  2**0
                  CONTENTS
  4 .ARM          00000000  08005b50  08005b50  0002013c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b50  08005b50  0002013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b50  08005b50  00015b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b54  08005b54  00015b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000013c  20000000  08005b58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dcc  2000013c  08005c94  0002013c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f08  08005c94  00020f08  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020165  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cd48  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ee2  00000000  00000000  0002cef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d30  00000000  00000000  0002edd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a57  00000000  00000000  0002fb08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001878f  00000000  00000000  0003055f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eb42  00000000  00000000  00048cee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c6af  00000000  00000000  00057830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d28  00000000  00000000  000e3ee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000e7c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000013c 	.word	0x2000013c
 8000128:	00000000 	.word	0x00000000
 800012c:	080059b8 	.word	0x080059b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000140 	.word	0x20000140
 8000148:	080059b8 	.word	0x080059b8

0800014c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#if defined(__GNUC__)
int _write(int fd, char *ptr, int len) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	b29a      	uxth	r2, r3
 800015c:	f04f 33ff 	mov.w	r3, #4294967295
 8000160:	68b9      	ldr	r1, [r7, #8]
 8000162:	4804      	ldr	r0, [pc, #16]	; (8000174 <_write+0x28>)
 8000164:	f004 f94a 	bl	80043fc <HAL_UART_Transmit>
	return len;
 8000168:	687b      	ldr	r3, [r7, #4]
}
 800016a:	4618      	mov	r0, r3
 800016c:	3710      	adds	r7, #16
 800016e:	46bd      	mov	sp, r7
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	200001e8 	.word	0x200001e8

08000178 <HAL_TIM_PeriodElapsedCallback>:
  HAL_UART_Transmit( &huart1, (uint8_t * ) &ch, 1, UART_Delay);
  return ch;
}
#endif

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2 && startRobot == 1) {
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000188:	f040 8083 	bne.w	8000292 <HAL_TIM_PeriodElapsedCallback+0x11a>
 800018c:	4b7a      	ldr	r3, [pc, #488]	; (8000378 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	2b01      	cmp	r3, #1
 8000192:	d17e      	bne.n	8000292 <HAL_TIM_PeriodElapsedCallback+0x11a>
		if (startXYZ) {
 8000194:	4b79      	ldr	r3, [pc, #484]	; (800037c <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	2b00      	cmp	r3, #0
 800019a:	d052      	beq.n	8000242 <HAL_TIM_PeriodElapsedCallback+0xca>
			pulX = doneX == 0 ? pulX + 1 : pulX;
 800019c:	4b78      	ldr	r3, [pc, #480]	; (8000380 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d103      	bne.n	80001ac <HAL_TIM_PeriodElapsedCallback+0x34>
 80001a4:	4b77      	ldr	r3, [pc, #476]	; (8000384 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	3301      	adds	r3, #1
 80001aa:	e001      	b.n	80001b0 <HAL_TIM_PeriodElapsedCallback+0x38>
 80001ac:	4b75      	ldr	r3, [pc, #468]	; (8000384 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4a74      	ldr	r2, [pc, #464]	; (8000384 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80001b2:	6013      	str	r3, [r2, #0]
			pulZ = doneZ == 0 ? pulZ + 1 : pulZ;
 80001b4:	4b74      	ldr	r3, [pc, #464]	; (8000388 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d103      	bne.n	80001c4 <HAL_TIM_PeriodElapsedCallback+0x4c>
 80001bc:	4b73      	ldr	r3, [pc, #460]	; (800038c <HAL_TIM_PeriodElapsedCallback+0x214>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	3301      	adds	r3, #1
 80001c2:	e001      	b.n	80001c8 <HAL_TIM_PeriodElapsedCallback+0x50>
 80001c4:	4b71      	ldr	r3, [pc, #452]	; (800038c <HAL_TIM_PeriodElapsedCallback+0x214>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	4a70      	ldr	r2, [pc, #448]	; (800038c <HAL_TIM_PeriodElapsedCallback+0x214>)
 80001ca:	6013      	str	r3, [r2, #0]
			if (pulX >= MyRobot[element].axisX.step && doneX == 0) {
 80001cc:	4b70      	ldr	r3, [pc, #448]	; (8000390 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80001ce:	681a      	ldr	r2, [r3, #0]
 80001d0:	4970      	ldr	r1, [pc, #448]	; (8000394 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80001d2:	4613      	mov	r3, r2
 80001d4:	00db      	lsls	r3, r3, #3
 80001d6:	1a9b      	subs	r3, r3, r2
 80001d8:	009b      	lsls	r3, r3, #2
 80001da:	440b      	add	r3, r1
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	4a69      	ldr	r2, [pc, #420]	; (8000384 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80001e0:	6812      	ldr	r2, [r2, #0]
 80001e2:	4293      	cmp	r3, r2
 80001e4:	d80f      	bhi.n	8000206 <HAL_TIM_PeriodElapsedCallback+0x8e>
 80001e6:	4b66      	ldr	r3, [pc, #408]	; (8000380 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d10b      	bne.n	8000206 <HAL_TIM_PeriodElapsedCallback+0x8e>
				HAL_TIM_PWM_Stop_IT(&htim2, X_CHANNEL);
 80001ee:	2100      	movs	r1, #0
 80001f0:	4869      	ldr	r0, [pc, #420]	; (8000398 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80001f2:	f003 fa37 	bl	8003664 <HAL_TIM_PWM_Stop_IT>
				count_timer++;
 80001f6:	4b69      	ldr	r3, [pc, #420]	; (800039c <HAL_TIM_PeriodElapsedCallback+0x224>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	3301      	adds	r3, #1
 80001fc:	4a67      	ldr	r2, [pc, #412]	; (800039c <HAL_TIM_PeriodElapsedCallback+0x224>)
 80001fe:	6013      	str	r3, [r2, #0]
				doneX = 1;
 8000200:	4b5f      	ldr	r3, [pc, #380]	; (8000380 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000202:	2201      	movs	r2, #1
 8000204:	601a      	str	r2, [r3, #0]
			}
			if (pulZ >= MyRobot[element].axisZ.step && doneZ == 0) {
 8000206:	4b62      	ldr	r3, [pc, #392]	; (8000390 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000208:	681a      	ldr	r2, [r3, #0]
 800020a:	4962      	ldr	r1, [pc, #392]	; (8000394 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800020c:	4613      	mov	r3, r2
 800020e:	00db      	lsls	r3, r3, #3
 8000210:	1a9b      	subs	r3, r3, r2
 8000212:	009b      	lsls	r3, r3, #2
 8000214:	440b      	add	r3, r1
 8000216:	3310      	adds	r3, #16
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	4a5c      	ldr	r2, [pc, #368]	; (800038c <HAL_TIM_PeriodElapsedCallback+0x214>)
 800021c:	6812      	ldr	r2, [r2, #0]
 800021e:	4293      	cmp	r3, r2
 8000220:	d80f      	bhi.n	8000242 <HAL_TIM_PeriodElapsedCallback+0xca>
 8000222:	4b59      	ldr	r3, [pc, #356]	; (8000388 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b00      	cmp	r3, #0
 8000228:	d10b      	bne.n	8000242 <HAL_TIM_PeriodElapsedCallback+0xca>
				HAL_TIM_PWM_Stop_IT(&htim2, Z_CHANNEL);
 800022a:	2108      	movs	r1, #8
 800022c:	485a      	ldr	r0, [pc, #360]	; (8000398 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800022e:	f003 fa19 	bl	8003664 <HAL_TIM_PWM_Stop_IT>
				doneZ = 1;
 8000232:	4b55      	ldr	r3, [pc, #340]	; (8000388 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000234:	2201      	movs	r2, #1
 8000236:	601a      	str	r2, [r3, #0]
				count_timer++;
 8000238:	4b58      	ldr	r3, [pc, #352]	; (800039c <HAL_TIM_PeriodElapsedCallback+0x224>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	3301      	adds	r3, #1
 800023e:	4a57      	ldr	r2, [pc, #348]	; (800039c <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000240:	6013      	str	r3, [r2, #0]
			}
		}
		if (startCmd) {
 8000242:	4b57      	ldr	r3, [pc, #348]	; (80003a0 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	2b00      	cmp	r3, #0
 8000248:	d023      	beq.n	8000292 <HAL_TIM_PeriodElapsedCallback+0x11a>
			pulT = doneT == 0 ? pulT + 1 : pulT;
 800024a:	4b56      	ldr	r3, [pc, #344]	; (80003a4 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	2b00      	cmp	r3, #0
 8000250:	d103      	bne.n	800025a <HAL_TIM_PeriodElapsedCallback+0xe2>
 8000252:	4b55      	ldr	r3, [pc, #340]	; (80003a8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	3301      	adds	r3, #1
 8000258:	e001      	b.n	800025e <HAL_TIM_PeriodElapsedCallback+0xe6>
 800025a:	4b53      	ldr	r3, [pc, #332]	; (80003a8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	4a52      	ldr	r2, [pc, #328]	; (80003a8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000260:	6013      	str	r3, [r2, #0]
			if (pulT >= PULSE_ONE_ROUND && doneT == 0) {
 8000262:	4b51      	ldr	r3, [pc, #324]	; (80003a8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 800026a:	db12      	blt.n	8000292 <HAL_TIM_PeriodElapsedCallback+0x11a>
 800026c:	4b4d      	ldr	r3, [pc, #308]	; (80003a4 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d10e      	bne.n	8000292 <HAL_TIM_PeriodElapsedCallback+0x11a>
				HAL_TIM_PWM_Stop_IT(&htim2, TURN_CHANNEL);
 8000274:	2104      	movs	r1, #4
 8000276:	4848      	ldr	r0, [pc, #288]	; (8000398 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000278:	f003 f9f4 	bl	8003664 <HAL_TIM_PWM_Stop_IT>
				doneT = 1;
 800027c:	4b49      	ldr	r3, [pc, #292]	; (80003a4 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800027e:	2201      	movs	r2, #1
 8000280:	601a      	str	r2, [r3, #0]
				count_timer++;
 8000282:	4b46      	ldr	r3, [pc, #280]	; (800039c <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	3301      	adds	r3, #1
 8000288:	4a44      	ldr	r2, [pc, #272]	; (800039c <HAL_TIM_PeriodElapsedCallback+0x224>)
 800028a:	6013      	str	r3, [r2, #0]
				printf("Done turn around\r\n");
 800028c:	4847      	ldr	r0, [pc, #284]	; (80003ac <HAL_TIM_PeriodElapsedCallback+0x234>)
 800028e:	f004 fff3 	bl	8005278 <puts>
			}
		}

	}
	if (htim->Instance == TIM3 && startRobot == 1) {
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	4a46      	ldr	r2, [pc, #280]	; (80003b0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000298:	4293      	cmp	r3, r2
 800029a:	d131      	bne.n	8000300 <HAL_TIM_PeriodElapsedCallback+0x188>
 800029c:	4b36      	ldr	r3, [pc, #216]	; (8000378 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	2b01      	cmp	r3, #1
 80002a2:	d12d      	bne.n	8000300 <HAL_TIM_PeriodElapsedCallback+0x188>
		if (startXYZ) {
 80002a4:	4b35      	ldr	r3, [pc, #212]	; (800037c <HAL_TIM_PeriodElapsedCallback+0x204>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d029      	beq.n	8000300 <HAL_TIM_PeriodElapsedCallback+0x188>
			pulY = doneY == 0 ? pulY + 1 : pulY;
 80002ac:	4b41      	ldr	r3, [pc, #260]	; (80003b4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d103      	bne.n	80002bc <HAL_TIM_PeriodElapsedCallback+0x144>
 80002b4:	4b40      	ldr	r3, [pc, #256]	; (80003b8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	3301      	adds	r3, #1
 80002ba:	e001      	b.n	80002c0 <HAL_TIM_PeriodElapsedCallback+0x148>
 80002bc:	4b3e      	ldr	r3, [pc, #248]	; (80003b8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a3d      	ldr	r2, [pc, #244]	; (80003b8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80002c2:	6013      	str	r3, [r2, #0]
			if (pulY >= MyRobot[element].axisY.step && doneY == 0) {
 80002c4:	4b32      	ldr	r3, [pc, #200]	; (8000390 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80002c6:	681a      	ldr	r2, [r3, #0]
 80002c8:	4932      	ldr	r1, [pc, #200]	; (8000394 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80002ca:	4613      	mov	r3, r2
 80002cc:	00db      	lsls	r3, r3, #3
 80002ce:	1a9b      	subs	r3, r3, r2
 80002d0:	009b      	lsls	r3, r3, #2
 80002d2:	440b      	add	r3, r1
 80002d4:	3308      	adds	r3, #8
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a37      	ldr	r2, [pc, #220]	; (80003b8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80002da:	6812      	ldr	r2, [r2, #0]
 80002dc:	4293      	cmp	r3, r2
 80002de:	d80f      	bhi.n	8000300 <HAL_TIM_PeriodElapsedCallback+0x188>
 80002e0:	4b34      	ldr	r3, [pc, #208]	; (80003b4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d10b      	bne.n	8000300 <HAL_TIM_PeriodElapsedCallback+0x188>
				HAL_TIM_PWM_Stop_IT(&htim3, Y_CHANNEL);
 80002e8:	2100      	movs	r1, #0
 80002ea:	4834      	ldr	r0, [pc, #208]	; (80003bc <HAL_TIM_PeriodElapsedCallback+0x244>)
 80002ec:	f003 f9ba 	bl	8003664 <HAL_TIM_PWM_Stop_IT>
				doneY = 1;
 80002f0:	4b30      	ldr	r3, [pc, #192]	; (80003b4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80002f2:	2201      	movs	r2, #1
 80002f4:	601a      	str	r2, [r3, #0]
				count_timer++;
 80002f6:	4b29      	ldr	r3, [pc, #164]	; (800039c <HAL_TIM_PeriodElapsedCallback+0x224>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	3301      	adds	r3, #1
 80002fc:	4a27      	ldr	r2, [pc, #156]	; (800039c <HAL_TIM_PeriodElapsedCallback+0x224>)
 80002fe:	6013      	str	r3, [r2, #0]

			}
		}
	}
	if ((count_timer == 3 && startRobot == 1)
 8000300:	4b26      	ldr	r3, [pc, #152]	; (800039c <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2b03      	cmp	r3, #3
 8000306:	d103      	bne.n	8000310 <HAL_TIM_PeriodElapsedCallback+0x198>
 8000308:	4b1b      	ldr	r3, [pc, #108]	; (8000378 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	2b01      	cmp	r3, #1
 800030e:	d007      	beq.n	8000320 <HAL_TIM_PeriodElapsedCallback+0x1a8>
			|| (count_timer == 1 && startCmd == 1)) {
 8000310:	4b22      	ldr	r3, [pc, #136]	; (800039c <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	2b01      	cmp	r3, #1
 8000316:	d12a      	bne.n	800036e <HAL_TIM_PeriodElapsedCallback+0x1f6>
 8000318:	4b21      	ldr	r3, [pc, #132]	; (80003a0 <HAL_TIM_PeriodElapsedCallback+0x228>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	2b01      	cmp	r3, #1
 800031e:	d126      	bne.n	800036e <HAL_TIM_PeriodElapsedCallback+0x1f6>
		if (startXYZ) {
 8000320:	4b16      	ldr	r3, [pc, #88]	; (800037c <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d005      	beq.n	8000334 <HAL_TIM_PeriodElapsedCallback+0x1bc>
			startXYZ = 0;
 8000328:	4b14      	ldr	r3, [pc, #80]	; (800037c <HAL_TIM_PeriodElapsedCallback+0x204>)
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
			printf("Done XYZ\r\n");
 800032e:	4824      	ldr	r0, [pc, #144]	; (80003c0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000330:	f004 ffa2 	bl	8005278 <puts>
		}
		pulX = 0;
 8000334:	4b13      	ldr	r3, [pc, #76]	; (8000384 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
		pulY = 0;
 800033a:	4b1f      	ldr	r3, [pc, #124]	; (80003b8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800033c:	2200      	movs	r2, #0
 800033e:	601a      	str	r2, [r3, #0]
		pulZ = 0;
 8000340:	4b12      	ldr	r3, [pc, #72]	; (800038c <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
		pulT = 0;
 8000346:	4b18      	ldr	r3, [pc, #96]	; (80003a8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000348:	2200      	movs	r2, #0
 800034a:	601a      	str	r2, [r3, #0]
		count_timer = 0;
 800034c:	4b13      	ldr	r3, [pc, #76]	; (800039c <HAL_TIM_PeriodElapsedCallback+0x224>)
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
		startCmd = 0;
 8000352:	4b13      	ldr	r3, [pc, #76]	; (80003a0 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000354:	2200      	movs	r2, #0
 8000356:	601a      	str	r2, [r3, #0]
		element++;
 8000358:	4b0d      	ldr	r3, [pc, #52]	; (8000390 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	3301      	adds	r3, #1
 800035e:	4a0c      	ldr	r2, [pc, #48]	; (8000390 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000360:	6013      	str	r3, [r2, #0]
		startRobot = 0;
 8000362:	4b05      	ldr	r3, [pc, #20]	; (8000378 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000364:	2200      	movs	r2, #0
 8000366:	601a      	str	r2, [r3, #0]
		isTaskDone = 1;
 8000368:	4b16      	ldr	r3, [pc, #88]	; (80003c4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800036a:	2201      	movs	r2, #1
 800036c:	701a      	strb	r2, [r3, #0]
	}
}
 800036e:	bf00      	nop
 8000370:	3708      	adds	r7, #8
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	2000023c 	.word	0x2000023c
 800037c:	20000264 	.word	0x20000264
 8000380:	20000250 	.word	0x20000250
 8000384:	20000240 	.word	0x20000240
 8000388:	20000258 	.word	0x20000258
 800038c:	20000248 	.word	0x20000248
 8000390:	2000026c 	.word	0x2000026c
 8000394:	200002a4 	.word	0x200002a4
 8000398:	20000158 	.word	0x20000158
 800039c:	20000284 	.word	0x20000284
 80003a0:	20000268 	.word	0x20000268
 80003a4:	20000260 	.word	0x20000260
 80003a8:	2000025c 	.word	0x2000025c
 80003ac:	080059d0 	.word	0x080059d0
 80003b0:	40000400 	.word	0x40000400
 80003b4:	20000254 	.word	0x20000254
 80003b8:	20000244 	.word	0x20000244
 80003bc:	200001a0 	.word	0x200001a0
 80003c0:	080059e4 	.word	0x080059e4
 80003c4:	20000db2 	.word	0x20000db2

080003c8 <Uart_Receive_Start>:

void Uart_Receive_Start() {
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, (uint8_t*) rxByte, length);
 80003cc:	221a      	movs	r2, #26
 80003ce:	4919      	ldr	r1, [pc, #100]	; (8000434 <Uart_Receive_Start+0x6c>)
 80003d0:	4819      	ldr	r0, [pc, #100]	; (8000438 <Uart_Receive_Start+0x70>)
 80003d2:	f004 f896 	bl	8004502 <HAL_UART_Receive_IT>
	stepX = 0;
 80003d6:	4b19      	ldr	r3, [pc, #100]	; (800043c <Uart_Receive_Start+0x74>)
 80003d8:	2200      	movs	r2, #0
 80003da:	601a      	str	r2, [r3, #0]
	stepY = 0;
 80003dc:	4b18      	ldr	r3, [pc, #96]	; (8000440 <Uart_Receive_Start+0x78>)
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
	stepZ = 0;
 80003e2:	4b18      	ldr	r3, [pc, #96]	; (8000444 <Uart_Receive_Start+0x7c>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
	valueX = MAX_UART_VALUE;
 80003e8:	4b17      	ldr	r3, [pc, #92]	; (8000448 <Uart_Receive_Start+0x80>)
 80003ea:	4a18      	ldr	r2, [pc, #96]	; (800044c <Uart_Receive_Start+0x84>)
 80003ec:	601a      	str	r2, [r3, #0]
	valueY = MAX_UART_VALUE;
 80003ee:	4b18      	ldr	r3, [pc, #96]	; (8000450 <Uart_Receive_Start+0x88>)
 80003f0:	4a16      	ldr	r2, [pc, #88]	; (800044c <Uart_Receive_Start+0x84>)
 80003f2:	601a      	str	r2, [r3, #0]
	valueZ = MAX_UART_VALUE;
 80003f4:	4b17      	ldr	r3, [pc, #92]	; (8000454 <Uart_Receive_Start+0x8c>)
 80003f6:	4a15      	ldr	r2, [pc, #84]	; (800044c <Uart_Receive_Start+0x84>)
 80003f8:	601a      	str	r2, [r3, #0]
	count_dot = 0;
 80003fa:	4b17      	ldr	r3, [pc, #92]	; (8000458 <Uart_Receive_Start+0x90>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	601a      	str	r2, [r3, #0]
	dir_changeZ = 0;
 8000400:	4b16      	ldr	r3, [pc, #88]	; (800045c <Uart_Receive_Start+0x94>)
 8000402:	2200      	movs	r2, #0
 8000404:	601a      	str	r2, [r3, #0]
	dir_changeX = 0;
 8000406:	4b16      	ldr	r3, [pc, #88]	; (8000460 <Uart_Receive_Start+0x98>)
 8000408:	2200      	movs	r2, #0
 800040a:	601a      	str	r2, [r3, #0]
	dir_changeY = 0;
 800040c:	4b15      	ldr	r3, [pc, #84]	; (8000464 <Uart_Receive_Start+0x9c>)
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
	if (backFromSave) {
 8000412:	4b15      	ldr	r3, [pc, #84]	; (8000468 <Uart_Receive_Start+0xa0>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	2b00      	cmp	r3, #0
 8000418:	d009      	beq.n	800042e <Uart_Receive_Start+0x66>
		element_uart = ++element;
 800041a:	4b14      	ldr	r3, [pc, #80]	; (800046c <Uart_Receive_Start+0xa4>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	3301      	adds	r3, #1
 8000420:	4a12      	ldr	r2, [pc, #72]	; (800046c <Uart_Receive_Start+0xa4>)
 8000422:	6013      	str	r3, [r2, #0]
 8000424:	4b11      	ldr	r3, [pc, #68]	; (800046c <Uart_Receive_Start+0xa4>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	461a      	mov	r2, r3
 800042a:	4b11      	ldr	r3, [pc, #68]	; (8000470 <Uart_Receive_Start+0xa8>)
 800042c:	601a      	str	r2, [r3, #0]
	}

}
 800042e:	bf00      	nop
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	20000d98 	.word	0x20000d98
 8000438:	200001e8 	.word	0x200001e8
 800043c:	2000028c 	.word	0x2000028c
 8000440:	20000290 	.word	0x20000290
 8000444:	20000294 	.word	0x20000294
 8000448:	20000004 	.word	0x20000004
 800044c:	000186a0 	.word	0x000186a0
 8000450:	20000008 	.word	0x20000008
 8000454:	2000000c 	.word	0x2000000c
 8000458:	2000024c 	.word	0x2000024c
 800045c:	20000280 	.word	0x20000280
 8000460:	20000278 	.word	0x20000278
 8000464:	2000027c 	.word	0x2000027c
 8000468:	20000274 	.word	0x20000274
 800046c:	2000026c 	.word	0x2000026c
 8000470:	20000288 	.word	0x20000288

08000474 <HandleCheckCommand>:
int HandleCheckCommand() {
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
	if (!strncmp((char*) rxByte, Home, length)) {
 8000478:	221a      	movs	r2, #26
 800047a:	49b2      	ldr	r1, [pc, #712]	; (8000744 <HandleCheckCommand+0x2d0>)
 800047c:	48b2      	ldr	r0, [pc, #712]	; (8000748 <HandleCheckCommand+0x2d4>)
 800047e:	f004 ffe3 	bl	8005448 <strncmp>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d12b      	bne.n	80004e0 <HandleCheckCommand+0x6c>
		MyRobot[element_uart].CommandState = Home_State;
 8000488:	4bb0      	ldr	r3, [pc, #704]	; (800074c <HandleCheckCommand+0x2d8>)
 800048a:	681a      	ldr	r2, [r3, #0]
 800048c:	49b0      	ldr	r1, [pc, #704]	; (8000750 <HandleCheckCommand+0x2dc>)
 800048e:	4613      	mov	r3, r2
 8000490:	00db      	lsls	r3, r3, #3
 8000492:	1a9b      	subs	r3, r3, r2
 8000494:	009b      	lsls	r3, r3, #2
 8000496:	440b      	add	r3, r1
 8000498:	f103 0218 	add.w	r2, r3, #24
 800049c:	7813      	ldrb	r3, [r2, #0]
 800049e:	2101      	movs	r1, #1
 80004a0:	f361 0385 	bfi	r3, r1, #2, #4
 80004a4:	7013      	strb	r3, [r2, #0]
		MyRobot[element_uart].state = Command;
 80004a6:	4ba9      	ldr	r3, [pc, #676]	; (800074c <HandleCheckCommand+0x2d8>)
 80004a8:	681a      	ldr	r2, [r3, #0]
 80004aa:	49a9      	ldr	r1, [pc, #676]	; (8000750 <HandleCheckCommand+0x2dc>)
 80004ac:	4613      	mov	r3, r2
 80004ae:	00db      	lsls	r3, r3, #3
 80004b0:	1a9b      	subs	r3, r3, r2
 80004b2:	009b      	lsls	r3, r3, #2
 80004b4:	440b      	add	r3, r1
 80004b6:	f103 0218 	add.w	r2, r3, #24
 80004ba:	7813      	ldrb	r3, [r2, #0]
 80004bc:	2102      	movs	r1, #2
 80004be:	f361 0301 	bfi	r3, r1, #0, #2
 80004c2:	7013      	strb	r3, [r2, #0]
		return MyRobot[element_uart].state;
 80004c4:	4ba1      	ldr	r3, [pc, #644]	; (800074c <HandleCheckCommand+0x2d8>)
 80004c6:	681a      	ldr	r2, [r3, #0]
 80004c8:	49a1      	ldr	r1, [pc, #644]	; (8000750 <HandleCheckCommand+0x2dc>)
 80004ca:	4613      	mov	r3, r2
 80004cc:	00db      	lsls	r3, r3, #3
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	009b      	lsls	r3, r3, #2
 80004d2:	440b      	add	r3, r1
 80004d4:	3318      	adds	r3, #24
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	e12e      	b.n	800073e <HandleCheckCommand+0x2ca>
	} else if (!strncmp(rxByte, Stop, length)) {
 80004e0:	221a      	movs	r2, #26
 80004e2:	499c      	ldr	r1, [pc, #624]	; (8000754 <HandleCheckCommand+0x2e0>)
 80004e4:	4898      	ldr	r0, [pc, #608]	; (8000748 <HandleCheckCommand+0x2d4>)
 80004e6:	f004 ffaf 	bl	8005448 <strncmp>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d154      	bne.n	800059a <HandleCheckCommand+0x126>
		HAL_TIM_PWM_Stop_IT(&htim2, X_CHANNEL);
 80004f0:	2100      	movs	r1, #0
 80004f2:	4899      	ldr	r0, [pc, #612]	; (8000758 <HandleCheckCommand+0x2e4>)
 80004f4:	f003 f8b6 	bl	8003664 <HAL_TIM_PWM_Stop_IT>
		HAL_TIM_PWM_Stop_IT(&htim3, Y_CHANNEL);
 80004f8:	2100      	movs	r1, #0
 80004fa:	4898      	ldr	r0, [pc, #608]	; (800075c <HandleCheckCommand+0x2e8>)
 80004fc:	f003 f8b2 	bl	8003664 <HAL_TIM_PWM_Stop_IT>
		HAL_TIM_PWM_Stop_IT(&htim2, Z_CHANNEL);
 8000500:	2108      	movs	r1, #8
 8000502:	4895      	ldr	r0, [pc, #596]	; (8000758 <HandleCheckCommand+0x2e4>)
 8000504:	f003 f8ae 	bl	8003664 <HAL_TIM_PWM_Stop_IT>
		startXYZ = 0;
 8000508:	4b95      	ldr	r3, [pc, #596]	; (8000760 <HandleCheckCommand+0x2ec>)
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
		pulX = 0;
 800050e:	4b95      	ldr	r3, [pc, #596]	; (8000764 <HandleCheckCommand+0x2f0>)
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
		pulY = 0;
 8000514:	4b94      	ldr	r3, [pc, #592]	; (8000768 <HandleCheckCommand+0x2f4>)
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
		pulZ = 0;
 800051a:	4b94      	ldr	r3, [pc, #592]	; (800076c <HandleCheckCommand+0x2f8>)
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
		pulT = 0;
 8000520:	4b93      	ldr	r3, [pc, #588]	; (8000770 <HandleCheckCommand+0x2fc>)
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
		count_timer = 0;
 8000526:	4b93      	ldr	r3, [pc, #588]	; (8000774 <HandleCheckCommand+0x300>)
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
		startCmd = 0;
 800052c:	4b92      	ldr	r3, [pc, #584]	; (8000778 <HandleCheckCommand+0x304>)
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
		startRobot = 0;
 8000532:	4b92      	ldr	r3, [pc, #584]	; (800077c <HandleCheckCommand+0x308>)
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
		isTaskDone = 1;
 8000538:	4b91      	ldr	r3, [pc, #580]	; (8000780 <HandleCheckCommand+0x30c>)
 800053a:	2201      	movs	r2, #1
 800053c:	701a      	strb	r2, [r3, #0]
		element++;
 800053e:	4b91      	ldr	r3, [pc, #580]	; (8000784 <HandleCheckCommand+0x310>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	3301      	adds	r3, #1
 8000544:	4a8f      	ldr	r2, [pc, #572]	; (8000784 <HandleCheckCommand+0x310>)
 8000546:	6013      	str	r3, [r2, #0]
		MyRobot[element_uart].CommandState = Home_State;
 8000548:	4b80      	ldr	r3, [pc, #512]	; (800074c <HandleCheckCommand+0x2d8>)
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	4980      	ldr	r1, [pc, #512]	; (8000750 <HandleCheckCommand+0x2dc>)
 800054e:	4613      	mov	r3, r2
 8000550:	00db      	lsls	r3, r3, #3
 8000552:	1a9b      	subs	r3, r3, r2
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	440b      	add	r3, r1
 8000558:	f103 0218 	add.w	r2, r3, #24
 800055c:	7813      	ldrb	r3, [r2, #0]
 800055e:	2101      	movs	r1, #1
 8000560:	f361 0385 	bfi	r3, r1, #2, #4
 8000564:	7013      	strb	r3, [r2, #0]
		MyRobot[element_uart].state = Command;
 8000566:	4b79      	ldr	r3, [pc, #484]	; (800074c <HandleCheckCommand+0x2d8>)
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	4979      	ldr	r1, [pc, #484]	; (8000750 <HandleCheckCommand+0x2dc>)
 800056c:	4613      	mov	r3, r2
 800056e:	00db      	lsls	r3, r3, #3
 8000570:	1a9b      	subs	r3, r3, r2
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	440b      	add	r3, r1
 8000576:	f103 0218 	add.w	r2, r3, #24
 800057a:	7813      	ldrb	r3, [r2, #0]
 800057c:	2102      	movs	r1, #2
 800057e:	f361 0301 	bfi	r3, r1, #0, #2
 8000582:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOB, RELAY_CONVEYOR_Pin, Off);
 8000584:	2201      	movs	r2, #1
 8000586:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800058a:	487f      	ldr	r0, [pc, #508]	; (8000788 <HandleCheckCommand+0x314>)
 800058c:	f002 f99e 	bl	80028cc <HAL_GPIO_WritePin>
		printf("Mode: Stop\r\n");
 8000590:	487e      	ldr	r0, [pc, #504]	; (800078c <HandleCheckCommand+0x318>)
 8000592:	f004 fe71 	bl	8005278 <puts>
		return 0;
 8000596:	2300      	movs	r3, #0
 8000598:	e0d1      	b.n	800073e <HandleCheckCommand+0x2ca>

	} else if (!strncmp(rxByte, Turn_Around, length)) {
 800059a:	221a      	movs	r2, #26
 800059c:	497c      	ldr	r1, [pc, #496]	; (8000790 <HandleCheckCommand+0x31c>)
 800059e:	486a      	ldr	r0, [pc, #424]	; (8000748 <HandleCheckCommand+0x2d4>)
 80005a0:	f004 ff52 	bl	8005448 <strncmp>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d12b      	bne.n	8000602 <HandleCheckCommand+0x18e>
		MyRobot[element_uart].CommandState = Turn_Around_State;
 80005aa:	4b68      	ldr	r3, [pc, #416]	; (800074c <HandleCheckCommand+0x2d8>)
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	4968      	ldr	r1, [pc, #416]	; (8000750 <HandleCheckCommand+0x2dc>)
 80005b0:	4613      	mov	r3, r2
 80005b2:	00db      	lsls	r3, r3, #3
 80005b4:	1a9b      	subs	r3, r3, r2
 80005b6:	009b      	lsls	r3, r3, #2
 80005b8:	440b      	add	r3, r1
 80005ba:	f103 0218 	add.w	r2, r3, #24
 80005be:	7813      	ldrb	r3, [r2, #0]
 80005c0:	2102      	movs	r1, #2
 80005c2:	f361 0385 	bfi	r3, r1, #2, #4
 80005c6:	7013      	strb	r3, [r2, #0]
		MyRobot[element_uart].state = Command;
 80005c8:	4b60      	ldr	r3, [pc, #384]	; (800074c <HandleCheckCommand+0x2d8>)
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	4960      	ldr	r1, [pc, #384]	; (8000750 <HandleCheckCommand+0x2dc>)
 80005ce:	4613      	mov	r3, r2
 80005d0:	00db      	lsls	r3, r3, #3
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	009b      	lsls	r3, r3, #2
 80005d6:	440b      	add	r3, r1
 80005d8:	f103 0218 	add.w	r2, r3, #24
 80005dc:	7813      	ldrb	r3, [r2, #0]
 80005de:	2102      	movs	r1, #2
 80005e0:	f361 0301 	bfi	r3, r1, #0, #2
 80005e4:	7013      	strb	r3, [r2, #0]
		return MyRobot[element_uart].state;
 80005e6:	4b59      	ldr	r3, [pc, #356]	; (800074c <HandleCheckCommand+0x2d8>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	4959      	ldr	r1, [pc, #356]	; (8000750 <HandleCheckCommand+0x2dc>)
 80005ec:	4613      	mov	r3, r2
 80005ee:	00db      	lsls	r3, r3, #3
 80005f0:	1a9b      	subs	r3, r3, r2
 80005f2:	009b      	lsls	r3, r3, #2
 80005f4:	440b      	add	r3, r1
 80005f6:	3318      	adds	r3, #24
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	e09d      	b.n	800073e <HandleCheckCommand+0x2ca>
	} else if (!strncmp(rxByte, Stop_Conveyor, length)) {
 8000602:	221a      	movs	r2, #26
 8000604:	4963      	ldr	r1, [pc, #396]	; (8000794 <HandleCheckCommand+0x320>)
 8000606:	4850      	ldr	r0, [pc, #320]	; (8000748 <HandleCheckCommand+0x2d4>)
 8000608:	f004 ff1e 	bl	8005448 <strncmp>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d10a      	bne.n	8000628 <HandleCheckCommand+0x1b4>
		HAL_GPIO_WritePin(GPIOB, RELAY_CONVEYOR_Pin, Off);
 8000612:	2201      	movs	r2, #1
 8000614:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000618:	485b      	ldr	r0, [pc, #364]	; (8000788 <HandleCheckCommand+0x314>)
 800061a:	f002 f957 	bl	80028cc <HAL_GPIO_WritePin>
		printf("Mode: Stop Conveyor\r\n");
 800061e:	485e      	ldr	r0, [pc, #376]	; (8000798 <HandleCheckCommand+0x324>)
 8000620:	f004 fe2a 	bl	8005278 <puts>
		return 0;
 8000624:	2300      	movs	r3, #0
 8000626:	e08a      	b.n	800073e <HandleCheckCommand+0x2ca>
	} else if (!strncmp(rxByte, Start_Conveyor, length)) { //
 8000628:	221a      	movs	r2, #26
 800062a:	495c      	ldr	r1, [pc, #368]	; (800079c <HandleCheckCommand+0x328>)
 800062c:	4846      	ldr	r0, [pc, #280]	; (8000748 <HandleCheckCommand+0x2d4>)
 800062e:	f004 ff0b 	bl	8005448 <strncmp>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d10a      	bne.n	800064e <HandleCheckCommand+0x1da>
		HAL_GPIO_WritePin(GPIOB, RELAY_CONVEYOR_Pin, On);
 8000638:	2200      	movs	r2, #0
 800063a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800063e:	4852      	ldr	r0, [pc, #328]	; (8000788 <HandleCheckCommand+0x314>)
 8000640:	f002 f944 	bl	80028cc <HAL_GPIO_WritePin>
		printf("Mode: Start Conveyor\r\n");
 8000644:	4856      	ldr	r0, [pc, #344]	; (80007a0 <HandleCheckCommand+0x32c>)
 8000646:	f004 fe17 	bl	8005278 <puts>
		return 0;
 800064a:	2300      	movs	r3, #0
 800064c:	e077      	b.n	800073e <HandleCheckCommand+0x2ca>
	} else if (!strncmp(rxByte, Stop_Pick_Up, length)) {
 800064e:	221a      	movs	r2, #26
 8000650:	4954      	ldr	r1, [pc, #336]	; (80007a4 <HandleCheckCommand+0x330>)
 8000652:	483d      	ldr	r0, [pc, #244]	; (8000748 <HandleCheckCommand+0x2d4>)
 8000654:	f004 fef8 	bl	8005448 <strncmp>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d12b      	bne.n	80006b6 <HandleCheckCommand+0x242>
		MyRobot[element_uart].CommandState = Stop_Pick_Up_State;
 800065e:	4b3b      	ldr	r3, [pc, #236]	; (800074c <HandleCheckCommand+0x2d8>)
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	493b      	ldr	r1, [pc, #236]	; (8000750 <HandleCheckCommand+0x2dc>)
 8000664:	4613      	mov	r3, r2
 8000666:	00db      	lsls	r3, r3, #3
 8000668:	1a9b      	subs	r3, r3, r2
 800066a:	009b      	lsls	r3, r3, #2
 800066c:	440b      	add	r3, r1
 800066e:	f103 0218 	add.w	r2, r3, #24
 8000672:	7813      	ldrb	r3, [r2, #0]
 8000674:	2107      	movs	r1, #7
 8000676:	f361 0385 	bfi	r3, r1, #2, #4
 800067a:	7013      	strb	r3, [r2, #0]
		MyRobot[element_uart].state = Command;
 800067c:	4b33      	ldr	r3, [pc, #204]	; (800074c <HandleCheckCommand+0x2d8>)
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	4933      	ldr	r1, [pc, #204]	; (8000750 <HandleCheckCommand+0x2dc>)
 8000682:	4613      	mov	r3, r2
 8000684:	00db      	lsls	r3, r3, #3
 8000686:	1a9b      	subs	r3, r3, r2
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	440b      	add	r3, r1
 800068c:	f103 0218 	add.w	r2, r3, #24
 8000690:	7813      	ldrb	r3, [r2, #0]
 8000692:	2102      	movs	r1, #2
 8000694:	f361 0301 	bfi	r3, r1, #0, #2
 8000698:	7013      	strb	r3, [r2, #0]
		return MyRobot[element_uart].state;
 800069a:	4b2c      	ldr	r3, [pc, #176]	; (800074c <HandleCheckCommand+0x2d8>)
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	492c      	ldr	r1, [pc, #176]	; (8000750 <HandleCheckCommand+0x2dc>)
 80006a0:	4613      	mov	r3, r2
 80006a2:	00db      	lsls	r3, r3, #3
 80006a4:	1a9b      	subs	r3, r3, r2
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	440b      	add	r3, r1
 80006aa:	3318      	adds	r3, #24
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	e043      	b.n	800073e <HandleCheckCommand+0x2ca>
	} else if (!strncmp(rxByte, Start_Pick_Up, length)) {
 80006b6:	221a      	movs	r2, #26
 80006b8:	493b      	ldr	r1, [pc, #236]	; (80007a8 <HandleCheckCommand+0x334>)
 80006ba:	4823      	ldr	r0, [pc, #140]	; (8000748 <HandleCheckCommand+0x2d4>)
 80006bc:	f004 fec4 	bl	8005448 <strncmp>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d12b      	bne.n	800071e <HandleCheckCommand+0x2aa>
		MyRobot[element_uart].CommandState = Start_Pick_Up_State;
 80006c6:	4b21      	ldr	r3, [pc, #132]	; (800074c <HandleCheckCommand+0x2d8>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	4921      	ldr	r1, [pc, #132]	; (8000750 <HandleCheckCommand+0x2dc>)
 80006cc:	4613      	mov	r3, r2
 80006ce:	00db      	lsls	r3, r3, #3
 80006d0:	1a9b      	subs	r3, r3, r2
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	440b      	add	r3, r1
 80006d6:	f103 0218 	add.w	r2, r3, #24
 80006da:	7813      	ldrb	r3, [r2, #0]
 80006dc:	2106      	movs	r1, #6
 80006de:	f361 0385 	bfi	r3, r1, #2, #4
 80006e2:	7013      	strb	r3, [r2, #0]
		MyRobot[element_uart].state = Command;
 80006e4:	4b19      	ldr	r3, [pc, #100]	; (800074c <HandleCheckCommand+0x2d8>)
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	4919      	ldr	r1, [pc, #100]	; (8000750 <HandleCheckCommand+0x2dc>)
 80006ea:	4613      	mov	r3, r2
 80006ec:	00db      	lsls	r3, r3, #3
 80006ee:	1a9b      	subs	r3, r3, r2
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	440b      	add	r3, r1
 80006f4:	f103 0218 	add.w	r2, r3, #24
 80006f8:	7813      	ldrb	r3, [r2, #0]
 80006fa:	2102      	movs	r1, #2
 80006fc:	f361 0301 	bfi	r3, r1, #0, #2
 8000700:	7013      	strb	r3, [r2, #0]
		return MyRobot[element_uart].state;
 8000702:	4b12      	ldr	r3, [pc, #72]	; (800074c <HandleCheckCommand+0x2d8>)
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	4912      	ldr	r1, [pc, #72]	; (8000750 <HandleCheckCommand+0x2dc>)
 8000708:	4613      	mov	r3, r2
 800070a:	00db      	lsls	r3, r3, #3
 800070c:	1a9b      	subs	r3, r3, r2
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	440b      	add	r3, r1
 8000712:	3318      	adds	r3, #24
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800071a:	b2db      	uxtb	r3, r3
 800071c:	e00f      	b.n	800073e <HandleCheckCommand+0x2ca>
	} else {
		MyRobot[element_uart].CommandState = ThereIsNoCmd;
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <HandleCheckCommand+0x2d8>)
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	490b      	ldr	r1, [pc, #44]	; (8000750 <HandleCheckCommand+0x2dc>)
 8000724:	4613      	mov	r3, r2
 8000726:	00db      	lsls	r3, r3, #3
 8000728:	1a9b      	subs	r3, r3, r2
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	440b      	add	r3, r1
 800072e:	f103 0218 	add.w	r2, r3, #24
 8000732:	7813      	ldrb	r3, [r2, #0]
 8000734:	210a      	movs	r1, #10
 8000736:	f361 0385 	bfi	r3, r1, #2, #4
 800073a:	7013      	strb	r3, [r2, #0]
		return ThereIsNoCmd;
 800073c:	230a      	movs	r3, #10
	}
}
 800073e:	4618      	mov	r0, r3
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000010 	.word	0x20000010
 8000748:	20000d98 	.word	0x20000d98
 800074c:	20000288 	.word	0x20000288
 8000750:	200002a4 	.word	0x200002a4
 8000754:	20000048 	.word	0x20000048
 8000758:	20000158 	.word	0x20000158
 800075c:	200001a0 	.word	0x200001a0
 8000760:	20000264 	.word	0x20000264
 8000764:	20000240 	.word	0x20000240
 8000768:	20000244 	.word	0x20000244
 800076c:	20000248 	.word	0x20000248
 8000770:	2000025c 	.word	0x2000025c
 8000774:	20000284 	.word	0x20000284
 8000778:	20000268 	.word	0x20000268
 800077c:	2000023c 	.word	0x2000023c
 8000780:	20000db2 	.word	0x20000db2
 8000784:	2000026c 	.word	0x2000026c
 8000788:	40010c00 	.word	0x40010c00
 800078c:	080059f0 	.word	0x080059f0
 8000790:	2000002c 	.word	0x2000002c
 8000794:	20000064 	.word	0x20000064
 8000798:	080059fc 	.word	0x080059fc
 800079c:	20000080 	.word	0x20000080
 80007a0:	08005a14 	.word	0x08005a14
 80007a4:	200000b8 	.word	0x200000b8
 80007a8:	2000009c 	.word	0x2000009c

080007ac <HandleCheckCoordinate>:
void HandleCheckCoordinate() {
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
	MyRobot[element_uart].state = Coordinate;
 80007b2:	4b93      	ldr	r3, [pc, #588]	; (8000a00 <HandleCheckCoordinate+0x254>)
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	4993      	ldr	r1, [pc, #588]	; (8000a04 <HandleCheckCoordinate+0x258>)
 80007b8:	4613      	mov	r3, r2
 80007ba:	00db      	lsls	r3, r3, #3
 80007bc:	1a9b      	subs	r3, r3, r2
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	440b      	add	r3, r1
 80007c2:	f103 0218 	add.w	r2, r3, #24
 80007c6:	7813      	ldrb	r3, [r2, #0]
 80007c8:	2101      	movs	r1, #1
 80007ca:	f361 0301 	bfi	r3, r1, #0, #2
 80007ce:	7013      	strb	r3, [r2, #0]
	for (int i = 0; i < length; i++) {
 80007d0:	2300      	movs	r3, #0
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	e134      	b.n	8000a40 <HandleCheckCoordinate+0x294>
		if ((rxByte[i] >= 'a' && rxByte[i] <= 'z')
 80007d6:	4a8c      	ldr	r2, [pc, #560]	; (8000a08 <HandleCheckCoordinate+0x25c>)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	4413      	add	r3, r2
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2b60      	cmp	r3, #96	; 0x60
 80007e0:	d906      	bls.n	80007f0 <HandleCheckCoordinate+0x44>
 80007e2:	4a89      	ldr	r2, [pc, #548]	; (8000a08 <HandleCheckCoordinate+0x25c>)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4413      	add	r3, r2
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b7a      	cmp	r3, #122	; 0x7a
 80007ec:	f240 8124 	bls.w	8000a38 <HandleCheckCoordinate+0x28c>
				|| (rxByte[i] >= 'A' && rxByte[i] <= 'Z') || rxByte[i] == '=') {
 80007f0:	4a85      	ldr	r2, [pc, #532]	; (8000a08 <HandleCheckCoordinate+0x25c>)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4413      	add	r3, r2
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b40      	cmp	r3, #64	; 0x40
 80007fa:	d906      	bls.n	800080a <HandleCheckCoordinate+0x5e>
 80007fc:	4a82      	ldr	r2, [pc, #520]	; (8000a08 <HandleCheckCoordinate+0x25c>)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4413      	add	r3, r2
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b5a      	cmp	r3, #90	; 0x5a
 8000806:	f240 8117 	bls.w	8000a38 <HandleCheckCoordinate+0x28c>
 800080a:	4a7f      	ldr	r2, [pc, #508]	; (8000a08 <HandleCheckCoordinate+0x25c>)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4413      	add	r3, r2
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b3d      	cmp	r3, #61	; 0x3d
 8000814:	f000 8110 	beq.w	8000a38 <HandleCheckCoordinate+0x28c>
			continue;
		} else {
			if (rxByte[i] == ',') {
 8000818:	4a7b      	ldr	r2, [pc, #492]	; (8000a08 <HandleCheckCoordinate+0x25c>)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4413      	add	r3, r2
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b2c      	cmp	r3, #44	; 0x2c
 8000822:	d105      	bne.n	8000830 <HandleCheckCoordinate+0x84>
				count_dot++;
 8000824:	4b79      	ldr	r3, [pc, #484]	; (8000a0c <HandleCheckCoordinate+0x260>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	3301      	adds	r3, #1
 800082a:	4a78      	ldr	r2, [pc, #480]	; (8000a0c <HandleCheckCoordinate+0x260>)
 800082c:	6013      	str	r3, [r2, #0]
				continue;
 800082e:	e104      	b.n	8000a3a <HandleCheckCoordinate+0x28e>
			}
			switch (count_dot) {
 8000830:	4b76      	ldr	r3, [pc, #472]	; (8000a0c <HandleCheckCoordinate+0x260>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b02      	cmp	r3, #2
 8000836:	f000 8098 	beq.w	800096a <HandleCheckCoordinate+0x1be>
 800083a:	2b02      	cmp	r3, #2
 800083c:	f300 80fd 	bgt.w	8000a3a <HandleCheckCoordinate+0x28e>
 8000840:	2b00      	cmp	r3, #0
 8000842:	d002      	beq.n	800084a <HandleCheckCoordinate+0x9e>
 8000844:	2b01      	cmp	r3, #1
 8000846:	d046      	beq.n	80008d6 <HandleCheckCoordinate+0x12a>
 8000848:	e0f7      	b.n	8000a3a <HandleCheckCoordinate+0x28e>
			case AxisX:
				if (rxByte[i] == '-') {
 800084a:	4a6f      	ldr	r2, [pc, #444]	; (8000a08 <HandleCheckCoordinate+0x25c>)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	4413      	add	r3, r2
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b2d      	cmp	r3, #45	; 0x2d
 8000854:	d117      	bne.n	8000886 <HandleCheckCoordinate+0xda>
					MyRobot[element_uart].axisX.direction = CounterClockWise;
 8000856:	4b6a      	ldr	r3, [pc, #424]	; (8000a00 <HandleCheckCoordinate+0x254>)
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	496a      	ldr	r1, [pc, #424]	; (8000a04 <HandleCheckCoordinate+0x258>)
 800085c:	4613      	mov	r3, r2
 800085e:	00db      	lsls	r3, r3, #3
 8000860:	1a9b      	subs	r3, r3, r2
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	18ca      	adds	r2, r1, r3
 8000866:	7913      	ldrb	r3, [r2, #4]
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	7113      	strb	r3, [r2, #4]
					dir_changeX = 1;
 800086e:	4b68      	ldr	r3, [pc, #416]	; (8000a10 <HandleCheckCoordinate+0x264>)
 8000870:	2201      	movs	r2, #1
 8000872:	601a      	str	r2, [r3, #0]
					valueX /= 10;
 8000874:	4b67      	ldr	r3, [pc, #412]	; (8000a14 <HandleCheckCoordinate+0x268>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a67      	ldr	r2, [pc, #412]	; (8000a18 <HandleCheckCoordinate+0x26c>)
 800087a:	fba2 2303 	umull	r2, r3, r2, r3
 800087e:	08db      	lsrs	r3, r3, #3
 8000880:	4a64      	ldr	r2, [pc, #400]	; (8000a14 <HandleCheckCoordinate+0x268>)
 8000882:	6013      	str	r3, [r2, #0]
					continue;
 8000884:	e0d9      	b.n	8000a3a <HandleCheckCoordinate+0x28e>
				}
				if (!dir_changeX) {
 8000886:	4b62      	ldr	r3, [pc, #392]	; (8000a10 <HandleCheckCoordinate+0x264>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d10b      	bne.n	80008a6 <HandleCheckCoordinate+0xfa>
					MyRobot[element_uart].axisX.direction = ClockWise;
 800088e:	4b5c      	ldr	r3, [pc, #368]	; (8000a00 <HandleCheckCoordinate+0x254>)
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	495c      	ldr	r1, [pc, #368]	; (8000a04 <HandleCheckCoordinate+0x258>)
 8000894:	4613      	mov	r3, r2
 8000896:	00db      	lsls	r3, r3, #3
 8000898:	1a9b      	subs	r3, r3, r2
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	18ca      	adds	r2, r1, r3
 800089e:	7913      	ldrb	r3, [r2, #4]
 80008a0:	f36f 0300 	bfc	r3, #0, #1
 80008a4:	7113      	strb	r3, [r2, #4]

				}
				stepX += ((int) rxByte[i] - '0') * valueX;
 80008a6:	4a58      	ldr	r2, [pc, #352]	; (8000a08 <HandleCheckCoordinate+0x25c>)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4413      	add	r3, r2
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	3b30      	subs	r3, #48	; 0x30
 80008b0:	461a      	mov	r2, r3
 80008b2:	4b58      	ldr	r3, [pc, #352]	; (8000a14 <HandleCheckCoordinate+0x268>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	fb03 f202 	mul.w	r2, r3, r2
 80008ba:	4b58      	ldr	r3, [pc, #352]	; (8000a1c <HandleCheckCoordinate+0x270>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4413      	add	r3, r2
 80008c0:	4a56      	ldr	r2, [pc, #344]	; (8000a1c <HandleCheckCoordinate+0x270>)
 80008c2:	6013      	str	r3, [r2, #0]
				valueX /= 10;
 80008c4:	4b53      	ldr	r3, [pc, #332]	; (8000a14 <HandleCheckCoordinate+0x268>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a53      	ldr	r2, [pc, #332]	; (8000a18 <HandleCheckCoordinate+0x26c>)
 80008ca:	fba2 2303 	umull	r2, r3, r2, r3
 80008ce:	08db      	lsrs	r3, r3, #3
 80008d0:	4a50      	ldr	r2, [pc, #320]	; (8000a14 <HandleCheckCoordinate+0x268>)
 80008d2:	6013      	str	r3, [r2, #0]
				break;
 80008d4:	e0b1      	b.n	8000a3a <HandleCheckCoordinate+0x28e>
			case AxisY:
				if (rxByte[i] == '-') {
 80008d6:	4a4c      	ldr	r2, [pc, #304]	; (8000a08 <HandleCheckCoordinate+0x25c>)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4413      	add	r3, r2
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	2b2d      	cmp	r3, #45	; 0x2d
 80008e0:	d119      	bne.n	8000916 <HandleCheckCoordinate+0x16a>
					MyRobot[element_uart].axisY.direction = CounterClockWise;
 80008e2:	4b47      	ldr	r3, [pc, #284]	; (8000a00 <HandleCheckCoordinate+0x254>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	4947      	ldr	r1, [pc, #284]	; (8000a04 <HandleCheckCoordinate+0x258>)
 80008e8:	4613      	mov	r3, r2
 80008ea:	00db      	lsls	r3, r3, #3
 80008ec:	1a9b      	subs	r3, r3, r2
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	440b      	add	r3, r1
 80008f2:	f103 0208 	add.w	r2, r3, #8
 80008f6:	7913      	ldrb	r3, [r2, #4]
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	7113      	strb	r3, [r2, #4]
					dir_changeY = 1;
 80008fe:	4b48      	ldr	r3, [pc, #288]	; (8000a20 <HandleCheckCoordinate+0x274>)
 8000900:	2201      	movs	r2, #1
 8000902:	601a      	str	r2, [r3, #0]
					valueY /= 10;
 8000904:	4b47      	ldr	r3, [pc, #284]	; (8000a24 <HandleCheckCoordinate+0x278>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a43      	ldr	r2, [pc, #268]	; (8000a18 <HandleCheckCoordinate+0x26c>)
 800090a:	fba2 2303 	umull	r2, r3, r2, r3
 800090e:	08db      	lsrs	r3, r3, #3
 8000910:	4a44      	ldr	r2, [pc, #272]	; (8000a24 <HandleCheckCoordinate+0x278>)
 8000912:	6013      	str	r3, [r2, #0]
					continue;
 8000914:	e091      	b.n	8000a3a <HandleCheckCoordinate+0x28e>
				}
				if (!dir_changeY) {
 8000916:	4b42      	ldr	r3, [pc, #264]	; (8000a20 <HandleCheckCoordinate+0x274>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d10d      	bne.n	800093a <HandleCheckCoordinate+0x18e>
					MyRobot[element_uart].axisY.direction = ClockWise;
 800091e:	4b38      	ldr	r3, [pc, #224]	; (8000a00 <HandleCheckCoordinate+0x254>)
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	4938      	ldr	r1, [pc, #224]	; (8000a04 <HandleCheckCoordinate+0x258>)
 8000924:	4613      	mov	r3, r2
 8000926:	00db      	lsls	r3, r3, #3
 8000928:	1a9b      	subs	r3, r3, r2
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	440b      	add	r3, r1
 800092e:	f103 0208 	add.w	r2, r3, #8
 8000932:	7913      	ldrb	r3, [r2, #4]
 8000934:	f36f 0300 	bfc	r3, #0, #1
 8000938:	7113      	strb	r3, [r2, #4]
				}
				stepY += ((int) rxByte[i] - '0') * valueY;
 800093a:	4a33      	ldr	r2, [pc, #204]	; (8000a08 <HandleCheckCoordinate+0x25c>)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	4413      	add	r3, r2
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	3b30      	subs	r3, #48	; 0x30
 8000944:	461a      	mov	r2, r3
 8000946:	4b37      	ldr	r3, [pc, #220]	; (8000a24 <HandleCheckCoordinate+0x278>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	fb03 f202 	mul.w	r2, r3, r2
 800094e:	4b36      	ldr	r3, [pc, #216]	; (8000a28 <HandleCheckCoordinate+0x27c>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4413      	add	r3, r2
 8000954:	4a34      	ldr	r2, [pc, #208]	; (8000a28 <HandleCheckCoordinate+0x27c>)
 8000956:	6013      	str	r3, [r2, #0]
				valueY /= 10;
 8000958:	4b32      	ldr	r3, [pc, #200]	; (8000a24 <HandleCheckCoordinate+0x278>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a2e      	ldr	r2, [pc, #184]	; (8000a18 <HandleCheckCoordinate+0x26c>)
 800095e:	fba2 2303 	umull	r2, r3, r2, r3
 8000962:	08db      	lsrs	r3, r3, #3
 8000964:	4a2f      	ldr	r2, [pc, #188]	; (8000a24 <HandleCheckCoordinate+0x278>)
 8000966:	6013      	str	r3, [r2, #0]
				break;
 8000968:	e067      	b.n	8000a3a <HandleCheckCoordinate+0x28e>
			case AxisZ:
				if (rxByte[i] == '-') {
 800096a:	4a27      	ldr	r2, [pc, #156]	; (8000a08 <HandleCheckCoordinate+0x25c>)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4413      	add	r3, r2
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b2d      	cmp	r3, #45	; 0x2d
 8000974:	d119      	bne.n	80009aa <HandleCheckCoordinate+0x1fe>
					MyRobot[element_uart].axisZ.direction = CounterClockWise;
 8000976:	4b22      	ldr	r3, [pc, #136]	; (8000a00 <HandleCheckCoordinate+0x254>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	4922      	ldr	r1, [pc, #136]	; (8000a04 <HandleCheckCoordinate+0x258>)
 800097c:	4613      	mov	r3, r2
 800097e:	00db      	lsls	r3, r3, #3
 8000980:	1a9b      	subs	r3, r3, r2
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	440b      	add	r3, r1
 8000986:	f103 0210 	add.w	r2, r3, #16
 800098a:	7913      	ldrb	r3, [r2, #4]
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	7113      	strb	r3, [r2, #4]
					valueZ /= 10;
 8000992:	4b26      	ldr	r3, [pc, #152]	; (8000a2c <HandleCheckCoordinate+0x280>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a20      	ldr	r2, [pc, #128]	; (8000a18 <HandleCheckCoordinate+0x26c>)
 8000998:	fba2 2303 	umull	r2, r3, r2, r3
 800099c:	08db      	lsrs	r3, r3, #3
 800099e:	4a23      	ldr	r2, [pc, #140]	; (8000a2c <HandleCheckCoordinate+0x280>)
 80009a0:	6013      	str	r3, [r2, #0]
					dir_changeZ = 1;
 80009a2:	4b23      	ldr	r3, [pc, #140]	; (8000a30 <HandleCheckCoordinate+0x284>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	601a      	str	r2, [r3, #0]
					continue;
 80009a8:	e047      	b.n	8000a3a <HandleCheckCoordinate+0x28e>
				}
				if (!dir_changeZ) {
 80009aa:	4b21      	ldr	r3, [pc, #132]	; (8000a30 <HandleCheckCoordinate+0x284>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d10d      	bne.n	80009ce <HandleCheckCoordinate+0x222>
					MyRobot[element_uart].axisZ.direction = ClockWise;
 80009b2:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <HandleCheckCoordinate+0x254>)
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	4913      	ldr	r1, [pc, #76]	; (8000a04 <HandleCheckCoordinate+0x258>)
 80009b8:	4613      	mov	r3, r2
 80009ba:	00db      	lsls	r3, r3, #3
 80009bc:	1a9b      	subs	r3, r3, r2
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	440b      	add	r3, r1
 80009c2:	f103 0210 	add.w	r2, r3, #16
 80009c6:	7913      	ldrb	r3, [r2, #4]
 80009c8:	f36f 0300 	bfc	r3, #0, #1
 80009cc:	7113      	strb	r3, [r2, #4]
				}
				stepZ += ((int) rxByte[i] - '0') * valueZ;
 80009ce:	4a0e      	ldr	r2, [pc, #56]	; (8000a08 <HandleCheckCoordinate+0x25c>)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4413      	add	r3, r2
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	3b30      	subs	r3, #48	; 0x30
 80009d8:	461a      	mov	r2, r3
 80009da:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <HandleCheckCoordinate+0x280>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	fb03 f202 	mul.w	r2, r3, r2
 80009e2:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <HandleCheckCoordinate+0x288>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4413      	add	r3, r2
 80009e8:	4a12      	ldr	r2, [pc, #72]	; (8000a34 <HandleCheckCoordinate+0x288>)
 80009ea:	6013      	str	r3, [r2, #0]
				valueZ /= 10;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <HandleCheckCoordinate+0x280>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a09      	ldr	r2, [pc, #36]	; (8000a18 <HandleCheckCoordinate+0x26c>)
 80009f2:	fba2 2303 	umull	r2, r3, r2, r3
 80009f6:	08db      	lsrs	r3, r3, #3
 80009f8:	4a0c      	ldr	r2, [pc, #48]	; (8000a2c <HandleCheckCoordinate+0x280>)
 80009fa:	6013      	str	r3, [r2, #0]
				break;
 80009fc:	e01d      	b.n	8000a3a <HandleCheckCoordinate+0x28e>
 80009fe:	bf00      	nop
 8000a00:	20000288 	.word	0x20000288
 8000a04:	200002a4 	.word	0x200002a4
 8000a08:	20000d98 	.word	0x20000d98
 8000a0c:	2000024c 	.word	0x2000024c
 8000a10:	20000278 	.word	0x20000278
 8000a14:	20000004 	.word	0x20000004
 8000a18:	cccccccd 	.word	0xcccccccd
 8000a1c:	2000028c 	.word	0x2000028c
 8000a20:	2000027c 	.word	0x2000027c
 8000a24:	20000008 	.word	0x20000008
 8000a28:	20000290 	.word	0x20000290
 8000a2c:	2000000c 	.word	0x2000000c
 8000a30:	20000280 	.word	0x20000280
 8000a34:	20000294 	.word	0x20000294
			continue;
 8000a38:	bf00      	nop
	for (int i = 0; i < length; i++) {
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2b19      	cmp	r3, #25
 8000a44:	f77f aec7 	ble.w	80007d6 <HandleCheckCoordinate+0x2a>
			}
		}
	}
	MyRobot[element_uart].axisX.step = abs(stepX - HOME_ANGLE_X);
 8000a48:	4b3f      	ldr	r3, [pc, #252]	; (8000b48 <HandleCheckCoordinate+0x39c>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f5a3 33c3 	sub.w	r3, r3, #99840	; 0x18600
 8000a50:	3ba0      	subs	r3, #160	; 0xa0
 8000a52:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8000a56:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8000a5a:	4b3c      	ldr	r3, [pc, #240]	; (8000b4c <HandleCheckCoordinate+0x3a0>)
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	4608      	mov	r0, r1
 8000a60:	493b      	ldr	r1, [pc, #236]	; (8000b50 <HandleCheckCoordinate+0x3a4>)
 8000a62:	4613      	mov	r3, r2
 8000a64:	00db      	lsls	r3, r3, #3
 8000a66:	1a9b      	subs	r3, r3, r2
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	440b      	add	r3, r1
 8000a6c:	6018      	str	r0, [r3, #0]
	MyRobot[element_uart].axisY.step = abs(stepY - HOME_ANGLE_Y);
 8000a6e:	4b39      	ldr	r3, [pc, #228]	; (8000b54 <HandleCheckCoordinate+0x3a8>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f5a3 33c3 	sub.w	r3, r3, #99840	; 0x18600
 8000a76:	3ba0      	subs	r3, #160	; 0xa0
 8000a78:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8000a7c:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8000a80:	4b32      	ldr	r3, [pc, #200]	; (8000b4c <HandleCheckCoordinate+0x3a0>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	4608      	mov	r0, r1
 8000a86:	4932      	ldr	r1, [pc, #200]	; (8000b50 <HandleCheckCoordinate+0x3a4>)
 8000a88:	4613      	mov	r3, r2
 8000a8a:	00db      	lsls	r3, r3, #3
 8000a8c:	1a9b      	subs	r3, r3, r2
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	440b      	add	r3, r1
 8000a92:	3308      	adds	r3, #8
 8000a94:	6018      	str	r0, [r3, #0]
	MyRobot[element_uart].axisZ.step = abs(stepZ - HOME_ANGLE_Z);
 8000a96:	4b30      	ldr	r3, [pc, #192]	; (8000b58 <HandleCheckCoordinate+0x3ac>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f5a3 33c3 	sub.w	r3, r3, #99840	; 0x18600
 8000a9e:	3ba0      	subs	r3, #160	; 0xa0
 8000aa0:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8000aa4:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8000aa8:	4b28      	ldr	r3, [pc, #160]	; (8000b4c <HandleCheckCoordinate+0x3a0>)
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	4608      	mov	r0, r1
 8000aae:	4928      	ldr	r1, [pc, #160]	; (8000b50 <HandleCheckCoordinate+0x3a4>)
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	00db      	lsls	r3, r3, #3
 8000ab4:	1a9b      	subs	r3, r3, r2
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	440b      	add	r3, r1
 8000aba:	3310      	adds	r3, #16
 8000abc:	6018      	str	r0, [r3, #0]
	MyRobot[element_uart].axisX.direction =
			stepX < HOME_ANGLE_X ? CounterClockWise : ClockWise;
 8000abe:	4b22      	ldr	r3, [pc, #136]	; (8000b48 <HandleCheckCoordinate+0x39c>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
	MyRobot[element_uart].axisX.direction =
 8000ac2:	4a22      	ldr	r2, [pc, #136]	; (8000b4c <HandleCheckCoordinate+0x3a0>)
 8000ac4:	6812      	ldr	r2, [r2, #0]
			stepX < HOME_ANGLE_X ? CounterClockWise : ClockWise;
 8000ac6:	4925      	ldr	r1, [pc, #148]	; (8000b5c <HandleCheckCoordinate+0x3b0>)
 8000ac8:	428b      	cmp	r3, r1
 8000aca:	bf94      	ite	ls
 8000acc:	2301      	movls	r3, #1
 8000ace:	2300      	movhi	r3, #0
 8000ad0:	b2d9      	uxtb	r1, r3
	MyRobot[element_uart].axisX.direction =
 8000ad2:	481f      	ldr	r0, [pc, #124]	; (8000b50 <HandleCheckCoordinate+0x3a4>)
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	00db      	lsls	r3, r3, #3
 8000ad8:	1a9b      	subs	r3, r3, r2
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	18c2      	adds	r2, r0, r3
 8000ade:	7913      	ldrb	r3, [r2, #4]
 8000ae0:	f361 0300 	bfi	r3, r1, #0, #1
 8000ae4:	7113      	strb	r3, [r2, #4]
	MyRobot[element_uart].axisY.direction =
			stepY < HOME_ANGLE_Y ? CounterClockWise : ClockWise;
 8000ae6:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <HandleCheckCoordinate+0x3a8>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
	MyRobot[element_uart].axisY.direction =
 8000aea:	4a18      	ldr	r2, [pc, #96]	; (8000b4c <HandleCheckCoordinate+0x3a0>)
 8000aec:	6812      	ldr	r2, [r2, #0]
			stepY < HOME_ANGLE_Y ? CounterClockWise : ClockWise;
 8000aee:	491b      	ldr	r1, [pc, #108]	; (8000b5c <HandleCheckCoordinate+0x3b0>)
 8000af0:	428b      	cmp	r3, r1
 8000af2:	bf94      	ite	ls
 8000af4:	2301      	movls	r3, #1
 8000af6:	2300      	movhi	r3, #0
 8000af8:	b2d9      	uxtb	r1, r3
	MyRobot[element_uart].axisY.direction =
 8000afa:	4815      	ldr	r0, [pc, #84]	; (8000b50 <HandleCheckCoordinate+0x3a4>)
 8000afc:	4613      	mov	r3, r2
 8000afe:	00db      	lsls	r3, r3, #3
 8000b00:	1a9b      	subs	r3, r3, r2
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	4403      	add	r3, r0
 8000b06:	f103 0208 	add.w	r2, r3, #8
 8000b0a:	7913      	ldrb	r3, [r2, #4]
 8000b0c:	f361 0300 	bfi	r3, r1, #0, #1
 8000b10:	7113      	strb	r3, [r2, #4]
	MyRobot[element_uart].axisZ.direction =
			stepZ < HOME_ANGLE_Z ? CounterClockWise : ClockWise;
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <HandleCheckCoordinate+0x3ac>)
 8000b14:	681b      	ldr	r3, [r3, #0]
	MyRobot[element_uart].axisZ.direction =
 8000b16:	4a0d      	ldr	r2, [pc, #52]	; (8000b4c <HandleCheckCoordinate+0x3a0>)
 8000b18:	6812      	ldr	r2, [r2, #0]
			stepZ < HOME_ANGLE_Z ? CounterClockWise : ClockWise;
 8000b1a:	4910      	ldr	r1, [pc, #64]	; (8000b5c <HandleCheckCoordinate+0x3b0>)
 8000b1c:	428b      	cmp	r3, r1
 8000b1e:	bf94      	ite	ls
 8000b20:	2301      	movls	r3, #1
 8000b22:	2300      	movhi	r3, #0
 8000b24:	b2d9      	uxtb	r1, r3
	MyRobot[element_uart].axisZ.direction =
 8000b26:	480a      	ldr	r0, [pc, #40]	; (8000b50 <HandleCheckCoordinate+0x3a4>)
 8000b28:	4613      	mov	r3, r2
 8000b2a:	00db      	lsls	r3, r3, #3
 8000b2c:	1a9b      	subs	r3, r3, r2
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	4403      	add	r3, r0
 8000b32:	f103 0210 	add.w	r2, r3, #16
 8000b36:	7913      	ldrb	r3, [r2, #4]
 8000b38:	f361 0300 	bfi	r3, r1, #0, #1
 8000b3c:	7113      	strb	r3, [r2, #4]
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr
 8000b48:	2000028c 	.word	0x2000028c
 8000b4c:	20000288 	.word	0x20000288
 8000b50:	200002a4 	.word	0x200002a4
 8000b54:	20000290 	.word	0x20000290
 8000b58:	20000294 	.word	0x20000294
 8000b5c:	0001869f 	.word	0x0001869f

08000b60 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a12      	ldr	r2, [pc, #72]	; (8000bb8 <HAL_UART_RxCpltCallback+0x58>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d11f      	bne.n	8000bb2 <HAL_UART_RxCpltCallback+0x52>
		Uart_Receive_Start(); // khoi tao lai cac gia tri cua UART
 8000b72:	f7ff fc29 	bl	80003c8 <Uart_Receive_Start>
		if (HandleCheckCommand() == Command) {
 8000b76:	f7ff fc7d 	bl	8000474 <HandleCheckCommand>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b02      	cmp	r3, #2
 8000b7e:	d108      	bne.n	8000b92 <HAL_UART_RxCpltCallback+0x32>
			element_uart++;
 8000b80:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <HAL_UART_RxCpltCallback+0x5c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	3301      	adds	r3, #1
 8000b86:	4a0d      	ldr	r2, [pc, #52]	; (8000bbc <HAL_UART_RxCpltCallback+0x5c>)
 8000b88:	6013      	str	r3, [r2, #0]
			receiveSuccess = 1;
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <HAL_UART_RxCpltCallback+0x60>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	701a      	strb	r2, [r3, #0]
			return;
 8000b90:	e00f      	b.n	8000bb2 <HAL_UART_RxCpltCallback+0x52>
		} else if (HandleCheckCommand() == ThereIsNoCmd) {
 8000b92:	f7ff fc6f 	bl	8000474 <HandleCheckCommand>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b0a      	cmp	r3, #10
 8000b9a:	d10a      	bne.n	8000bb2 <HAL_UART_RxCpltCallback+0x52>
			HandleCheckCoordinate();
 8000b9c:	f7ff fe06 	bl	80007ac <HandleCheckCoordinate>
			element_uart++;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_UART_RxCpltCallback+0x5c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	4a05      	ldr	r2, [pc, #20]	; (8000bbc <HAL_UART_RxCpltCallback+0x5c>)
 8000ba8:	6013      	str	r3, [r2, #0]
			receiveSuccess = 1;
 8000baa:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <HAL_UART_RxCpltCallback+0x60>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	701a      	strb	r2, [r3, #0]
			return;
 8000bb0:	bf00      	nop
		}
	}

}
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40013800 	.word	0x40013800
 8000bbc:	20000288 	.word	0x20000288
 8000bc0:	20000d95 	.word	0x20000d95

08000bc4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8000bce:	88fb      	ldrh	r3, [r7, #6]
 8000bd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bd4:	d039      	beq.n	8000c4a <HAL_GPIO_EXTI_Callback+0x86>
 8000bd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bda:	dc6b      	bgt.n	8000cb4 <HAL_GPIO_EXTI_Callback+0xf0>
 8000bdc:	2b80      	cmp	r3, #128	; 0x80
 8000bde:	d006      	beq.n	8000bee <HAL_GPIO_EXTI_Callback+0x2a>
 8000be0:	2b80      	cmp	r3, #128	; 0x80
 8000be2:	dc67      	bgt.n	8000cb4 <HAL_GPIO_EXTI_Callback+0xf0>
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	d019      	beq.n	8000c1c <HAL_GPIO_EXTI_Callback+0x58>
 8000be8:	2b10      	cmp	r3, #16
 8000bea:	d047      	beq.n	8000c7c <HAL_GPIO_EXTI_Callback+0xb8>
		__HAL_GPIO_EXTI_CLEAR_IT(EMSTOP_Pin);
		HAL_Delay(200);
		printf("Stop all Axis\r\n");
		break;
	default:
		break;
 8000bec:	e062      	b.n	8000cb4 <HAL_GPIO_EXTI_Callback+0xf0>
		HAL_Delay(200);
 8000bee:	20c8      	movs	r0, #200	; 0xc8
 8000bf0:	f001 fb04 	bl	80021fc <HAL_Delay>
		HAL_TIM_PWM_Stop_IT(&htim2, X_CHANNEL);
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4832      	ldr	r0, [pc, #200]	; (8000cc0 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000bf8:	f002 fd34 	bl	8003664 <HAL_TIM_PWM_Stop_IT>
		homeX = 1;
 8000bfc:	4b31      	ldr	r3, [pc, #196]	; (8000cc4 <HAL_GPIO_EXTI_Callback+0x100>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	601a      	str	r2, [r3, #0]
		EXTI->PR = SIGX_Pin;
 8000c02:	4b31      	ldr	r3, [pc, #196]	; (8000cc8 <HAL_GPIO_EXTI_Callback+0x104>)
 8000c04:	2280      	movs	r2, #128	; 0x80
 8000c06:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(SIGX_Pin);
 8000c08:	4b2f      	ldr	r3, [pc, #188]	; (8000cc8 <HAL_GPIO_EXTI_Callback+0x104>)
 8000c0a:	2280      	movs	r2, #128	; 0x80
 8000c0c:	615a      	str	r2, [r3, #20]
		printf("At home X\r\n");
 8000c0e:	482f      	ldr	r0, [pc, #188]	; (8000ccc <HAL_GPIO_EXTI_Callback+0x108>)
 8000c10:	f004 fb32 	bl	8005278 <puts>
		HAL_Delay(200);
 8000c14:	20c8      	movs	r0, #200	; 0xc8
 8000c16:	f001 faf1 	bl	80021fc <HAL_Delay>
		break;
 8000c1a:	e04c      	b.n	8000cb6 <HAL_GPIO_EXTI_Callback+0xf2>
		HAL_Delay(200);
 8000c1c:	20c8      	movs	r0, #200	; 0xc8
 8000c1e:	f001 faed 	bl	80021fc <HAL_Delay>
		HAL_TIM_PWM_Stop_IT(&htim3, Y_CHANNEL);
 8000c22:	2100      	movs	r1, #0
 8000c24:	482a      	ldr	r0, [pc, #168]	; (8000cd0 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000c26:	f002 fd1d 	bl	8003664 <HAL_TIM_PWM_Stop_IT>
		homeY = 1;
 8000c2a:	4b2a      	ldr	r3, [pc, #168]	; (8000cd4 <HAL_GPIO_EXTI_Callback+0x110>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	601a      	str	r2, [r3, #0]
		EXTI->PR = SIGY_Pin;
 8000c30:	4b25      	ldr	r3, [pc, #148]	; (8000cc8 <HAL_GPIO_EXTI_Callback+0x104>)
 8000c32:	2202      	movs	r2, #2
 8000c34:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(SIGY_Pin);
 8000c36:	4b24      	ldr	r3, [pc, #144]	; (8000cc8 <HAL_GPIO_EXTI_Callback+0x104>)
 8000c38:	2202      	movs	r2, #2
 8000c3a:	615a      	str	r2, [r3, #20]
		printf("At home Y\r\n");
 8000c3c:	4826      	ldr	r0, [pc, #152]	; (8000cd8 <HAL_GPIO_EXTI_Callback+0x114>)
 8000c3e:	f004 fb1b 	bl	8005278 <puts>
		HAL_Delay(200);
 8000c42:	20c8      	movs	r0, #200	; 0xc8
 8000c44:	f001 fada 	bl	80021fc <HAL_Delay>
		break;
 8000c48:	e035      	b.n	8000cb6 <HAL_GPIO_EXTI_Callback+0xf2>
		HAL_Delay(200);
 8000c4a:	20c8      	movs	r0, #200	; 0xc8
 8000c4c:	f001 fad6 	bl	80021fc <HAL_Delay>
		HAL_TIM_PWM_Stop_IT(&htim2, Z_CHANNEL);
 8000c50:	2108      	movs	r1, #8
 8000c52:	481b      	ldr	r0, [pc, #108]	; (8000cc0 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000c54:	f002 fd06 	bl	8003664 <HAL_TIM_PWM_Stop_IT>
		homeZ = 1;
 8000c58:	4b20      	ldr	r3, [pc, #128]	; (8000cdc <HAL_GPIO_EXTI_Callback+0x118>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	601a      	str	r2, [r3, #0]
		EXTI->PR = SIGZ_Pin;
 8000c5e:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <HAL_GPIO_EXTI_Callback+0x104>)
 8000c60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c64:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(SIGZ_Pin);
 8000c66:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <HAL_GPIO_EXTI_Callback+0x104>)
 8000c68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c6c:	615a      	str	r2, [r3, #20]
		HAL_Delay(200);
 8000c6e:	20c8      	movs	r0, #200	; 0xc8
 8000c70:	f001 fac4 	bl	80021fc <HAL_Delay>
		printf("At home Z\r\n");
 8000c74:	481a      	ldr	r0, [pc, #104]	; (8000ce0 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000c76:	f004 faff 	bl	8005278 <puts>
		break;
 8000c7a:	e01c      	b.n	8000cb6 <HAL_GPIO_EXTI_Callback+0xf2>
		HAL_Delay(200);
 8000c7c:	20c8      	movs	r0, #200	; 0xc8
 8000c7e:	f001 fabd 	bl	80021fc <HAL_Delay>
		HAL_TIM_PWM_Stop_IT(&htim2, X_CHANNEL);
 8000c82:	2100      	movs	r1, #0
 8000c84:	480e      	ldr	r0, [pc, #56]	; (8000cc0 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000c86:	f002 fced 	bl	8003664 <HAL_TIM_PWM_Stop_IT>
		HAL_TIM_PWM_Stop_IT(&htim3, Y_CHANNEL);
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4810      	ldr	r0, [pc, #64]	; (8000cd0 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000c8e:	f002 fce9 	bl	8003664 <HAL_TIM_PWM_Stop_IT>
		HAL_TIM_PWM_Stop_IT(&htim2, Z_CHANNEL);
 8000c92:	2108      	movs	r1, #8
 8000c94:	480a      	ldr	r0, [pc, #40]	; (8000cc0 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000c96:	f002 fce5 	bl	8003664 <HAL_TIM_PWM_Stop_IT>
		EXTI->PR = EMSTOP_Pin;
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <HAL_GPIO_EXTI_Callback+0x104>)
 8000c9c:	2210      	movs	r2, #16
 8000c9e:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(EMSTOP_Pin);
 8000ca0:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <HAL_GPIO_EXTI_Callback+0x104>)
 8000ca2:	2210      	movs	r2, #16
 8000ca4:	615a      	str	r2, [r3, #20]
		HAL_Delay(200);
 8000ca6:	20c8      	movs	r0, #200	; 0xc8
 8000ca8:	f001 faa8 	bl	80021fc <HAL_Delay>
		printf("Stop all Axis\r\n");
 8000cac:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <HAL_GPIO_EXTI_Callback+0x120>)
 8000cae:	f004 fae3 	bl	8005278 <puts>
		break;
 8000cb2:	e000      	b.n	8000cb6 <HAL_GPIO_EXTI_Callback+0xf2>
		break;
 8000cb4:	bf00      	nop
	}
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000158 	.word	0x20000158
 8000cc4:	20000230 	.word	0x20000230
 8000cc8:	40010400 	.word	0x40010400
 8000ccc:	08005a2c 	.word	0x08005a2c
 8000cd0:	200001a0 	.word	0x200001a0
 8000cd4:	20000234 	.word	0x20000234
 8000cd8:	08005a38 	.word	0x08005a38
 8000cdc:	20000238 	.word	0x20000238
 8000ce0:	08005a44 	.word	0x08005a44
 8000ce4:	08005a50 	.word	0x08005a50

08000ce8 <ResetAllValue>:
void ResetAllValue() {
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
	homeY = 0;
 8000cec:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <ResetAllValue+0x54>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
	homeX = 0;
 8000cf2:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <ResetAllValue+0x58>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
	homeZ = 0;
 8000cf8:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <ResetAllValue+0x5c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
	pulX = 0;
 8000cfe:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <ResetAllValue+0x60>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
	pulY = 0;
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <ResetAllValue+0x64>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
	pulZ = 0;
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <ResetAllValue+0x68>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
	doneX = 0;
 8000d10:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <ResetAllValue+0x6c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
	doneY = 0;
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <ResetAllValue+0x70>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
	doneZ = 0;
 8000d1c:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <ResetAllValue+0x74>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
	//Init_Home_Value
	X_Home = HOME_ANGLE_X;
 8000d22:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <ResetAllValue+0x78>)
 8000d24:	4a0f      	ldr	r2, [pc, #60]	; (8000d64 <ResetAllValue+0x7c>)
 8000d26:	601a      	str	r2, [r3, #0]
	Y_Home = HOME_ANGLE_Y;
 8000d28:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <ResetAllValue+0x80>)
 8000d2a:	4a0e      	ldr	r2, [pc, #56]	; (8000d64 <ResetAllValue+0x7c>)
 8000d2c:	601a      	str	r2, [r3, #0]
	Z_Home = HOME_ANGLE_Z;
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <ResetAllValue+0x84>)
 8000d30:	4a0c      	ldr	r2, [pc, #48]	; (8000d64 <ResetAllValue+0x7c>)
 8000d32:	601a      	str	r2, [r3, #0]

}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr
 8000d3c:	20000234 	.word	0x20000234
 8000d40:	20000230 	.word	0x20000230
 8000d44:	20000238 	.word	0x20000238
 8000d48:	20000240 	.word	0x20000240
 8000d4c:	20000244 	.word	0x20000244
 8000d50:	20000248 	.word	0x20000248
 8000d54:	20000250 	.word	0x20000250
 8000d58:	20000254 	.word	0x20000254
 8000d5c:	20000258 	.word	0x20000258
 8000d60:	20000298 	.word	0x20000298
 8000d64:	000186a0 	.word	0x000186a0
 8000d68:	2000029c 	.word	0x2000029c
 8000d6c:	200002a0 	.word	0x200002a0

08000d70 <CheckHome>:
void CheckHome(void) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	if (homeY == 1 && homeX == 1 && homeZ == 1) {
 8000d74:	4b1a      	ldr	r3, [pc, #104]	; (8000de0 <CheckHome+0x70>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d12e      	bne.n	8000dda <CheckHome+0x6a>
 8000d7c:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <CheckHome+0x74>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d12a      	bne.n	8000dda <CheckHome+0x6a>
 8000d84:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <CheckHome+0x78>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d126      	bne.n	8000dda <CheckHome+0x6a>
		printf("At home\r\n");
 8000d8c:	4817      	ldr	r0, [pc, #92]	; (8000dec <CheckHome+0x7c>)
 8000d8e:	f004 fa73 	bl	8005278 <puts>
		if (MyRobot[element].CommandState == Home_State || AtHome == 0) {
 8000d92:	4b17      	ldr	r3, [pc, #92]	; (8000df0 <CheckHome+0x80>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	4917      	ldr	r1, [pc, #92]	; (8000df4 <CheckHome+0x84>)
 8000d98:	4613      	mov	r3, r2
 8000d9a:	00db      	lsls	r3, r3, #3
 8000d9c:	1a9b      	subs	r3, r3, r2
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	440b      	add	r3, r1
 8000da2:	3318      	adds	r3, #24
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d003      	beq.n	8000db8 <CheckHome+0x48>
 8000db0:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <CheckHome+0x88>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d108      	bne.n	8000dca <CheckHome+0x5a>
			isTaskDone = 1;
 8000db8:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <CheckHome+0x8c>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	701a      	strb	r2, [r3, #0]
			AtHome = 1;
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <CheckHome+0x88>)
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	601a      	str	r2, [r3, #0]
			state_robot = wait_instruction;
 8000dc4:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <CheckHome+0x90>)
 8000dc6:	2204      	movs	r2, #4
 8000dc8:	701a      	strb	r2, [r3, #0]
		}
		ResetAllValue();
 8000dca:	f7ff ff8d 	bl	8000ce8 <ResetAllValue>
		HAL_GPIO_WritePin(GPIOB, RELAY_CONVEYOR_Pin, On); // bat bang chuyen
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dd4:	480b      	ldr	r0, [pc, #44]	; (8000e04 <CheckHome+0x94>)
 8000dd6:	f001 fd79 	bl	80028cc <HAL_GPIO_WritePin>
	}
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000234 	.word	0x20000234
 8000de4:	20000230 	.word	0x20000230
 8000de8:	20000238 	.word	0x20000238
 8000dec:	08005a60 	.word	0x08005a60
 8000df0:	2000026c 	.word	0x2000026c
 8000df4:	200002a4 	.word	0x200002a4
 8000df8:	20000000 	.word	0x20000000
 8000dfc:	20000db2 	.word	0x20000db2
 8000e00:	200000d2 	.word	0x200000d2
 8000e04:	40010c00 	.word	0x40010c00

08000e08 <RobotDoCommand>:
void RobotDoCommand() {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
	switch (MyRobot[element].CommandState) {
 8000e0c:	4b5c      	ldr	r3, [pc, #368]	; (8000f80 <RobotDoCommand+0x178>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	495c      	ldr	r1, [pc, #368]	; (8000f84 <RobotDoCommand+0x17c>)
 8000e12:	4613      	mov	r3, r2
 8000e14:	00db      	lsls	r3, r3, #3
 8000e16:	1a9b      	subs	r3, r3, r2
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	440b      	add	r3, r1
 8000e1c:	3318      	adds	r3, #24
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	3b01      	subs	r3, #1
 8000e28:	2b08      	cmp	r3, #8
 8000e2a:	f200 80a5 	bhi.w	8000f78 <RobotDoCommand+0x170>
 8000e2e:	a201      	add	r2, pc, #4	; (adr r2, 8000e34 <RobotDoCommand+0x2c>)
 8000e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e34:	08000e59 	.word	0x08000e59
 8000e38:	08000ea7 	.word	0x08000ea7
 8000e3c:	08000f79 	.word	0x08000f79
 8000e40:	08000f79 	.word	0x08000f79
 8000e44:	08000f79 	.word	0x08000f79
 8000e48:	08000eed 	.word	0x08000eed
 8000e4c:	08000f0f 	.word	0x08000f0f
 8000e50:	08000f31 	.word	0x08000f31
 8000e54:	08000f55 	.word	0x08000f55
	case Home_State:
		HAL_GPIO_WritePin(GPIOB, DIRX_Pin | DIRY_Pin | DIRZ_Pin,
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f240 4121 	movw	r1, #1057	; 0x421
 8000e5e:	484a      	ldr	r0, [pc, #296]	; (8000f88 <RobotDoCommand+0x180>)
 8000e60:	f001 fd34 	bl	80028cc <HAL_GPIO_WritePin>
				CounterClockWise);
		HAL_TIM_PWM_Start_IT(&htim2, X_CHANNEL);
 8000e64:	2100      	movs	r1, #0
 8000e66:	4849      	ldr	r0, [pc, #292]	; (8000f8c <RobotDoCommand+0x184>)
 8000e68:	f002 fb0c 	bl	8003484 <HAL_TIM_PWM_Start_IT>
		HAL_TIM_PWM_Start_IT(&htim3, Y_CHANNEL);
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4848      	ldr	r0, [pc, #288]	; (8000f90 <RobotDoCommand+0x188>)
 8000e70:	f002 fb08 	bl	8003484 <HAL_TIM_PWM_Start_IT>
		HAL_TIM_PWM_Start_IT(&htim2, Z_CHANNEL);
 8000e74:	2108      	movs	r1, #8
 8000e76:	4845      	ldr	r0, [pc, #276]	; (8000f8c <RobotDoCommand+0x184>)
 8000e78:	f002 fb04 	bl	8003484 <HAL_TIM_PWM_Start_IT>
		doneX = 1;
 8000e7c:	4b45      	ldr	r3, [pc, #276]	; (8000f94 <RobotDoCommand+0x18c>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	601a      	str	r2, [r3, #0]
		doneY = 1;
 8000e82:	4b45      	ldr	r3, [pc, #276]	; (8000f98 <RobotDoCommand+0x190>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	601a      	str	r2, [r3, #0]
		doneZ = 1;
 8000e88:	4b44      	ldr	r3, [pc, #272]	; (8000f9c <RobotDoCommand+0x194>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	601a      	str	r2, [r3, #0]
		element++;
 8000e8e:	4b3c      	ldr	r3, [pc, #240]	; (8000f80 <RobotDoCommand+0x178>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	3301      	adds	r3, #1
 8000e94:	4a3a      	ldr	r2, [pc, #232]	; (8000f80 <RobotDoCommand+0x178>)
 8000e96:	6013      	str	r3, [r2, #0]
		printf("Mode: Home\r\n");
 8000e98:	4841      	ldr	r0, [pc, #260]	; (8000fa0 <RobotDoCommand+0x198>)
 8000e9a:	f004 f9ed 	bl	8005278 <puts>
		isTaskDone = 0;
 8000e9e:	4b41      	ldr	r3, [pc, #260]	; (8000fa4 <RobotDoCommand+0x19c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]
		break;
 8000ea4:	e069      	b.n	8000f7a <RobotDoCommand+0x172>
	case Turn_Around_State:
		HAL_GPIO_WritePin(GPIOB, RELAY_CONVEYOR_Pin, On); // BAT BANG CHUYEN
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eac:	4836      	ldr	r0, [pc, #216]	; (8000f88 <RobotDoCommand+0x180>)
 8000eae:	f001 fd0d 	bl	80028cc <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Stop_IT(&htim2, X_CHANNEL);
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4835      	ldr	r0, [pc, #212]	; (8000f8c <RobotDoCommand+0x184>)
 8000eb6:	f002 fbd5 	bl	8003664 <HAL_TIM_PWM_Stop_IT>
		HAL_TIM_PWM_Stop_IT(&htim3, Y_CHANNEL);
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4834      	ldr	r0, [pc, #208]	; (8000f90 <RobotDoCommand+0x188>)
 8000ebe:	f002 fbd1 	bl	8003664 <HAL_TIM_PWM_Stop_IT>
		HAL_TIM_PWM_Stop_IT(&htim2, Z_CHANNEL);
 8000ec2:	2108      	movs	r1, #8
 8000ec4:	4831      	ldr	r0, [pc, #196]	; (8000f8c <RobotDoCommand+0x184>)
 8000ec6:	f002 fbcd 	bl	8003664 <HAL_TIM_PWM_Stop_IT>
		HAL_TIM_PWM_Start_IT(&htim2, TURN_CHANNEL);
 8000eca:	2104      	movs	r1, #4
 8000ecc:	482f      	ldr	r0, [pc, #188]	; (8000f8c <RobotDoCommand+0x184>)
 8000ece:	f002 fad9 	bl	8003484 <HAL_TIM_PWM_Start_IT>
		startCmd = 1;
 8000ed2:	4b35      	ldr	r3, [pc, #212]	; (8000fa8 <RobotDoCommand+0x1a0>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	601a      	str	r2, [r3, #0]
		isTaskDone = 0;
 8000ed8:	4b32      	ldr	r3, [pc, #200]	; (8000fa4 <RobotDoCommand+0x19c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	701a      	strb	r2, [r3, #0]
		doneT = 0;
 8000ede:	4b33      	ldr	r3, [pc, #204]	; (8000fac <RobotDoCommand+0x1a4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
		printf("Mode: Turn Around\r\n");
 8000ee4:	4832      	ldr	r0, [pc, #200]	; (8000fb0 <RobotDoCommand+0x1a8>)
 8000ee6:	f004 f9c7 	bl	8005278 <puts>
		break;
 8000eea:	e046      	b.n	8000f7a <RobotDoCommand+0x172>
	case Start_Pick_Up_State:
		HAL_GPIO_WritePin(GPIOA, RELAY_ROBOT_Pin, On);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2140      	movs	r1, #64	; 0x40
 8000ef0:	4830      	ldr	r0, [pc, #192]	; (8000fb4 <RobotDoCommand+0x1ac>)
 8000ef2:	f001 fceb 	bl	80028cc <HAL_GPIO_WritePin>
		printf("Mode: Start picking up \r\n");
 8000ef6:	4830      	ldr	r0, [pc, #192]	; (8000fb8 <RobotDoCommand+0x1b0>)
 8000ef8:	f004 f9be 	bl	8005278 <puts>
		element++;
 8000efc:	4b20      	ldr	r3, [pc, #128]	; (8000f80 <RobotDoCommand+0x178>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	3301      	adds	r3, #1
 8000f02:	4a1f      	ldr	r2, [pc, #124]	; (8000f80 <RobotDoCommand+0x178>)
 8000f04:	6013      	str	r3, [r2, #0]
		isTaskDone = 1;
 8000f06:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <RobotDoCommand+0x19c>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	701a      	strb	r2, [r3, #0]
		break;
 8000f0c:	e035      	b.n	8000f7a <RobotDoCommand+0x172>
	case Stop_Pick_Up_State:
		HAL_GPIO_WritePin(GPIOA, RELAY_ROBOT_Pin, Off);
 8000f0e:	2201      	movs	r2, #1
 8000f10:	2140      	movs	r1, #64	; 0x40
 8000f12:	4828      	ldr	r0, [pc, #160]	; (8000fb4 <RobotDoCommand+0x1ac>)
 8000f14:	f001 fcda 	bl	80028cc <HAL_GPIO_WritePin>
		printf("Mode: Stop picking up \r\n");
 8000f18:	4828      	ldr	r0, [pc, #160]	; (8000fbc <RobotDoCommand+0x1b4>)
 8000f1a:	f004 f9ad 	bl	8005278 <puts>
		element++;
 8000f1e:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <RobotDoCommand+0x178>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	3301      	adds	r3, #1
 8000f24:	4a16      	ldr	r2, [pc, #88]	; (8000f80 <RobotDoCommand+0x178>)
 8000f26:	6013      	str	r3, [r2, #0]
		isTaskDone = 1;
 8000f28:	4b1e      	ldr	r3, [pc, #120]	; (8000fa4 <RobotDoCommand+0x19c>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	701a      	strb	r2, [r3, #0]
		break;
 8000f2e:	e024      	b.n	8000f7a <RobotDoCommand+0x172>
	case Start_Absorb_State:
		HAL_GPIO_WritePin(GPIOB, RELAY_ABSORB_Pin, On);
 8000f30:	2200      	movs	r2, #0
 8000f32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f36:	4814      	ldr	r0, [pc, #80]	; (8000f88 <RobotDoCommand+0x180>)
 8000f38:	f001 fcc8 	bl	80028cc <HAL_GPIO_WritePin>
		printf("Mode: Start absorbing \r\n");
 8000f3c:	4820      	ldr	r0, [pc, #128]	; (8000fc0 <RobotDoCommand+0x1b8>)
 8000f3e:	f004 f99b 	bl	8005278 <puts>
		isTaskDone = 1;
 8000f42:	4b18      	ldr	r3, [pc, #96]	; (8000fa4 <RobotDoCommand+0x19c>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	701a      	strb	r2, [r3, #0]
		element++;
 8000f48:	4b0d      	ldr	r3, [pc, #52]	; (8000f80 <RobotDoCommand+0x178>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	4a0c      	ldr	r2, [pc, #48]	; (8000f80 <RobotDoCommand+0x178>)
 8000f50:	6013      	str	r3, [r2, #0]
		break;
 8000f52:	e012      	b.n	8000f7a <RobotDoCommand+0x172>
	case Stop_Absorb_State:
		HAL_GPIO_WritePin(GPIOB, RELAY_ABSORB_Pin, Off);
 8000f54:	2201      	movs	r2, #1
 8000f56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f5a:	480b      	ldr	r0, [pc, #44]	; (8000f88 <RobotDoCommand+0x180>)
 8000f5c:	f001 fcb6 	bl	80028cc <HAL_GPIO_WritePin>
		printf("Mode: Stop absorbing \r\n");
 8000f60:	4818      	ldr	r0, [pc, #96]	; (8000fc4 <RobotDoCommand+0x1bc>)
 8000f62:	f004 f989 	bl	8005278 <puts>
		isTaskDone = 1;
 8000f66:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <RobotDoCommand+0x19c>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	701a      	strb	r2, [r3, #0]
		element++;
 8000f6c:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <RobotDoCommand+0x178>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	3301      	adds	r3, #1
 8000f72:	4a03      	ldr	r2, [pc, #12]	; (8000f80 <RobotDoCommand+0x178>)
 8000f74:	6013      	str	r3, [r2, #0]
		break;
 8000f76:	e000      	b.n	8000f7a <RobotDoCommand+0x172>
	default:
		break;
 8000f78:	bf00      	nop
	}

}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	2000026c 	.word	0x2000026c
 8000f84:	200002a4 	.word	0x200002a4
 8000f88:	40010c00 	.word	0x40010c00
 8000f8c:	20000158 	.word	0x20000158
 8000f90:	200001a0 	.word	0x200001a0
 8000f94:	20000250 	.word	0x20000250
 8000f98:	20000254 	.word	0x20000254
 8000f9c:	20000258 	.word	0x20000258
 8000fa0:	08005a6c 	.word	0x08005a6c
 8000fa4:	20000db2 	.word	0x20000db2
 8000fa8:	20000268 	.word	0x20000268
 8000fac:	20000260 	.word	0x20000260
 8000fb0:	08005a78 	.word	0x08005a78
 8000fb4:	40010800 	.word	0x40010800
 8000fb8:	08005a8c 	.word	0x08005a8c
 8000fbc:	08005aa8 	.word	0x08005aa8
 8000fc0:	08005ac0 	.word	0x08005ac0
 8000fc4:	08005ad8 	.word	0x08005ad8

08000fc8 <RobotDoCoordinate>:
void RobotDoCoordinate() {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	printf("Mode: XYZ \r\n");
 8000fcc:	4859      	ldr	r0, [pc, #356]	; (8001134 <RobotDoCoordinate+0x16c>)
 8000fce:	f004 f953 	bl	8005278 <puts>
	startXYZ = 1;
 8000fd2:	4b59      	ldr	r3, [pc, #356]	; (8001138 <RobotDoCoordinate+0x170>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, DIRX_Pin, MyRobot[element].axisX.direction);
 8000fd8:	4b58      	ldr	r3, [pc, #352]	; (800113c <RobotDoCoordinate+0x174>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4958      	ldr	r1, [pc, #352]	; (8001140 <RobotDoCoordinate+0x178>)
 8000fde:	4613      	mov	r3, r2
 8000fe0:	00db      	lsls	r3, r3, #3
 8000fe2:	1a9b      	subs	r3, r3, r2
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	440b      	add	r3, r1
 8000fe8:	791b      	ldrb	r3, [r3, #4]
 8000fea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	4853      	ldr	r0, [pc, #332]	; (8001144 <RobotDoCoordinate+0x17c>)
 8000ff6:	f001 fc69 	bl	80028cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DIRY_Pin, MyRobot[element].axisY.direction);
 8000ffa:	4b50      	ldr	r3, [pc, #320]	; (800113c <RobotDoCoordinate+0x174>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	4950      	ldr	r1, [pc, #320]	; (8001140 <RobotDoCoordinate+0x178>)
 8001000:	4613      	mov	r3, r2
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	1a9b      	subs	r3, r3, r2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	440b      	add	r3, r1
 800100a:	3308      	adds	r3, #8
 800100c:	791b      	ldrb	r3, [r3, #4]
 800100e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001012:	b2db      	uxtb	r3, r3
 8001014:	461a      	mov	r2, r3
 8001016:	2120      	movs	r1, #32
 8001018:	484a      	ldr	r0, [pc, #296]	; (8001144 <RobotDoCoordinate+0x17c>)
 800101a:	f001 fc57 	bl	80028cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DIRZ_Pin, MyRobot[element].axisZ.direction);
 800101e:	4b47      	ldr	r3, [pc, #284]	; (800113c <RobotDoCoordinate+0x174>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	4947      	ldr	r1, [pc, #284]	; (8001140 <RobotDoCoordinate+0x178>)
 8001024:	4613      	mov	r3, r2
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	1a9b      	subs	r3, r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	440b      	add	r3, r1
 800102e:	3310      	adds	r3, #16
 8001030:	791b      	ldrb	r3, [r3, #4]
 8001032:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001036:	b2db      	uxtb	r3, r3
 8001038:	461a      	mov	r2, r3
 800103a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800103e:	4841      	ldr	r0, [pc, #260]	; (8001144 <RobotDoCoordinate+0x17c>)
 8001040:	f001 fc44 	bl	80028cc <HAL_GPIO_WritePin>
	if (MyRobot[element].axisX.step) {
 8001044:	4b3d      	ldr	r3, [pc, #244]	; (800113c <RobotDoCoordinate+0x174>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	493d      	ldr	r1, [pc, #244]	; (8001140 <RobotDoCoordinate+0x178>)
 800104a:	4613      	mov	r3, r2
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	1a9b      	subs	r3, r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	440b      	add	r3, r1
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d007      	beq.n	800106a <RobotDoCoordinate+0xa2>
		HAL_TIM_PWM_Start_IT(&htim2, X_CHANNEL);
 800105a:	2100      	movs	r1, #0
 800105c:	483a      	ldr	r0, [pc, #232]	; (8001148 <RobotDoCoordinate+0x180>)
 800105e:	f002 fa11 	bl	8003484 <HAL_TIM_PWM_Start_IT>
		doneX = 0;
 8001062:	4b3a      	ldr	r3, [pc, #232]	; (800114c <RobotDoCoordinate+0x184>)
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	e007      	b.n	800107a <RobotDoCoordinate+0xb2>
	} else {
		doneX = 1;
 800106a:	4b38      	ldr	r3, [pc, #224]	; (800114c <RobotDoCoordinate+0x184>)
 800106c:	2201      	movs	r2, #1
 800106e:	601a      	str	r2, [r3, #0]
		count_timer++;
 8001070:	4b37      	ldr	r3, [pc, #220]	; (8001150 <RobotDoCoordinate+0x188>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	3301      	adds	r3, #1
 8001076:	4a36      	ldr	r2, [pc, #216]	; (8001150 <RobotDoCoordinate+0x188>)
 8001078:	6013      	str	r3, [r2, #0]
	}
	if (MyRobot[element].axisY.step) {
 800107a:	4b30      	ldr	r3, [pc, #192]	; (800113c <RobotDoCoordinate+0x174>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	4930      	ldr	r1, [pc, #192]	; (8001140 <RobotDoCoordinate+0x178>)
 8001080:	4613      	mov	r3, r2
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	1a9b      	subs	r3, r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	440b      	add	r3, r1
 800108a:	3308      	adds	r3, #8
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d007      	beq.n	80010a2 <RobotDoCoordinate+0xda>
		HAL_TIM_PWM_Start_IT(&htim3, Y_CHANNEL);
 8001092:	2100      	movs	r1, #0
 8001094:	482f      	ldr	r0, [pc, #188]	; (8001154 <RobotDoCoordinate+0x18c>)
 8001096:	f002 f9f5 	bl	8003484 <HAL_TIM_PWM_Start_IT>
		doneY = 0;
 800109a:	4b2f      	ldr	r3, [pc, #188]	; (8001158 <RobotDoCoordinate+0x190>)
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	e007      	b.n	80010b2 <RobotDoCoordinate+0xea>
	} else {
		doneY = 1;
 80010a2:	4b2d      	ldr	r3, [pc, #180]	; (8001158 <RobotDoCoordinate+0x190>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	601a      	str	r2, [r3, #0]
		count_timer++;
 80010a8:	4b29      	ldr	r3, [pc, #164]	; (8001150 <RobotDoCoordinate+0x188>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	3301      	adds	r3, #1
 80010ae:	4a28      	ldr	r2, [pc, #160]	; (8001150 <RobotDoCoordinate+0x188>)
 80010b0:	6013      	str	r3, [r2, #0]
	}
	if (MyRobot[element].axisZ.step) {
 80010b2:	4b22      	ldr	r3, [pc, #136]	; (800113c <RobotDoCoordinate+0x174>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	4922      	ldr	r1, [pc, #136]	; (8001140 <RobotDoCoordinate+0x178>)
 80010b8:	4613      	mov	r3, r2
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	1a9b      	subs	r3, r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	440b      	add	r3, r1
 80010c2:	3310      	adds	r3, #16
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d007      	beq.n	80010da <RobotDoCoordinate+0x112>
		HAL_TIM_PWM_Start_IT(&htim2, Z_CHANNEL);
 80010ca:	2108      	movs	r1, #8
 80010cc:	481e      	ldr	r0, [pc, #120]	; (8001148 <RobotDoCoordinate+0x180>)
 80010ce:	f002 f9d9 	bl	8003484 <HAL_TIM_PWM_Start_IT>
		doneZ = 0;
 80010d2:	4b22      	ldr	r3, [pc, #136]	; (800115c <RobotDoCoordinate+0x194>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	e007      	b.n	80010ea <RobotDoCoordinate+0x122>
	} else {
		doneZ = 1;
 80010da:	4b20      	ldr	r3, [pc, #128]	; (800115c <RobotDoCoordinate+0x194>)
 80010dc:	2201      	movs	r2, #1
 80010de:	601a      	str	r2, [r3, #0]
		count_timer++;
 80010e0:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <RobotDoCoordinate+0x188>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	3301      	adds	r3, #1
 80010e6:	4a1a      	ldr	r2, [pc, #104]	; (8001150 <RobotDoCoordinate+0x188>)
 80010e8:	6013      	str	r3, [r2, #0]
	}
	isTaskDone = 0;
 80010ea:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <RobotDoCoordinate+0x198>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]
	if (count_timer == 3) {
 80010f0:	4b17      	ldr	r3, [pc, #92]	; (8001150 <RobotDoCoordinate+0x188>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b03      	cmp	r3, #3
 80010f6:	d10d      	bne.n	8001114 <RobotDoCoordinate+0x14c>
		startXYZ = 0;
 80010f8:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <RobotDoCoordinate+0x170>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
		count_timer = 0;
 80010fe:	4b14      	ldr	r3, [pc, #80]	; (8001150 <RobotDoCoordinate+0x188>)
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
		element++;
 8001104:	4b0d      	ldr	r3, [pc, #52]	; (800113c <RobotDoCoordinate+0x174>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	3301      	adds	r3, #1
 800110a:	4a0c      	ldr	r2, [pc, #48]	; (800113c <RobotDoCoordinate+0x174>)
 800110c:	6013      	str	r3, [r2, #0]
		isTaskDone = 1;
 800110e:	4b14      	ldr	r3, [pc, #80]	; (8001160 <RobotDoCoordinate+0x198>)
 8001110:	2201      	movs	r2, #1
 8001112:	701a      	strb	r2, [r3, #0]

	}
	if (state_robot != save_instruction && receiveSuccess) {
 8001114:	4b13      	ldr	r3, [pc, #76]	; (8001164 <RobotDoCoordinate+0x19c>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b03      	cmp	r3, #3
 800111a:	d009      	beq.n	8001130 <RobotDoCoordinate+0x168>
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <RobotDoCoordinate+0x1a0>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d005      	beq.n	8001130 <RobotDoCoordinate+0x168>
		state_robot = save_instruction;
 8001124:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <RobotDoCoordinate+0x19c>)
 8001126:	2203      	movs	r2, #3
 8001128:	701a      	strb	r2, [r3, #0]
		initialize_finish = 0;
 800112a:	4b10      	ldr	r3, [pc, #64]	; (800116c <RobotDoCoordinate+0x1a4>)
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
	}

}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	08005af0 	.word	0x08005af0
 8001138:	20000264 	.word	0x20000264
 800113c:	2000026c 	.word	0x2000026c
 8001140:	200002a4 	.word	0x200002a4
 8001144:	40010c00 	.word	0x40010c00
 8001148:	20000158 	.word	0x20000158
 800114c:	20000250 	.word	0x20000250
 8001150:	20000284 	.word	0x20000284
 8001154:	200001a0 	.word	0x200001a0
 8001158:	20000254 	.word	0x20000254
 800115c:	20000258 	.word	0x20000258
 8001160:	20000db2 	.word	0x20000db2
 8001164:	200000d2 	.word	0x200000d2
 8001168:	20000d95 	.word	0x20000d95
 800116c:	20000d94 	.word	0x20000d94

08001170 <ControlRobot>:
void ControlRobot() {
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
	if (MyRobot[element].state == 0) {
 8001174:	4b34      	ldr	r3, [pc, #208]	; (8001248 <ControlRobot+0xd8>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	4934      	ldr	r1, [pc, #208]	; (800124c <ControlRobot+0xdc>)
 800117a:	4613      	mov	r3, r2
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	1a9b      	subs	r3, r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	440b      	add	r3, r1
 8001184:	3318      	adds	r3, #24
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	d057      	beq.n	8001242 <ControlRobot+0xd2>
		return;
	}
	if (MyRobot[element].state == Command) {
 8001192:	4b2d      	ldr	r3, [pc, #180]	; (8001248 <ControlRobot+0xd8>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	492d      	ldr	r1, [pc, #180]	; (800124c <ControlRobot+0xdc>)
 8001198:	4613      	mov	r3, r2
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	1a9b      	subs	r3, r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	440b      	add	r3, r1
 80011a2:	3318      	adds	r3, #24
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d102      	bne.n	80011b6 <ControlRobot+0x46>
		RobotDoCommand();
 80011b0:	f7ff fe2a 	bl	8000e08 <RobotDoCommand>
 80011b4:	e010      	b.n	80011d8 <ControlRobot+0x68>
	} else if (MyRobot[element].state == Coordinate) {
 80011b6:	4b24      	ldr	r3, [pc, #144]	; (8001248 <ControlRobot+0xd8>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	4924      	ldr	r1, [pc, #144]	; (800124c <ControlRobot+0xdc>)
 80011bc:	4613      	mov	r3, r2
 80011be:	00db      	lsls	r3, r3, #3
 80011c0:	1a9b      	subs	r3, r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	440b      	add	r3, r1
 80011c6:	3318      	adds	r3, #24
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d101      	bne.n	80011d8 <ControlRobot+0x68>
		RobotDoCoordinate();
 80011d4:	f7ff fef8 	bl	8000fc8 <RobotDoCoordinate>
	}
	if ((MyRobot[element].state == Coordinate
 80011d8:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <ControlRobot+0xd8>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	491b      	ldr	r1, [pc, #108]	; (800124c <ControlRobot+0xdc>)
 80011de:	4613      	mov	r3, r2
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	1a9b      	subs	r3, r3, r2
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	440b      	add	r3, r1
 80011e8:	3318      	adds	r3, #24
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d01d      	beq.n	8001232 <ControlRobot+0xc2>
			|| (MyRobot[element].state == Command
 80011f6:	4b14      	ldr	r3, [pc, #80]	; (8001248 <ControlRobot+0xd8>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	4914      	ldr	r1, [pc, #80]	; (800124c <ControlRobot+0xdc>)
 80011fc:	4613      	mov	r3, r2
 80011fe:	00db      	lsls	r3, r3, #3
 8001200:	1a9b      	subs	r3, r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	440b      	add	r3, r1
 8001206:	3318      	adds	r3, #24
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d117      	bne.n	8001244 <ControlRobot+0xd4>
					&& MyRobot[element].CommandState == Turn_Around_State))
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <ControlRobot+0xd8>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	490c      	ldr	r1, [pc, #48]	; (800124c <ControlRobot+0xdc>)
 800121a:	4613      	mov	r3, r2
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	1a9b      	subs	r3, r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	440b      	add	r3, r1
 8001224:	3318      	adds	r3, #24
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b02      	cmp	r3, #2
 8001230:	d108      	bne.n	8001244 <ControlRobot+0xd4>
			&& isTaskDone == 0) {
 8001232:	4b07      	ldr	r3, [pc, #28]	; (8001250 <ControlRobot+0xe0>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d104      	bne.n	8001244 <ControlRobot+0xd4>
		startRobot = 1;
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <ControlRobot+0xe4>)
 800123c:	2201      	movs	r2, #1
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	e000      	b.n	8001244 <ControlRobot+0xd4>
		return;
 8001242:	bf00      	nop
	}
}
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	2000026c 	.word	0x2000026c
 800124c:	200002a4 	.word	0x200002a4
 8001250:	20000db2 	.word	0x20000db2
 8001254:	2000023c 	.word	0x2000023c

08001258 <Initialize_Save_Instruction>:
void Initialize_Save_Instruction(void) {
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
	// XYZ instruction
	// first XYZ
	receiveSuccess = 0;
 800125c:	4bcd      	ldr	r3, [pc, #820]	; (8001594 <Initialize_Save_Instruction+0x33c>)
 800125e:	2200      	movs	r2, #0
 8001260:	701a      	strb	r2, [r3, #0]

	MyRobot[element].axisX.step = 500;
 8001262:	4bcd      	ldr	r3, [pc, #820]	; (8001598 <Initialize_Save_Instruction+0x340>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	49cd      	ldr	r1, [pc, #820]	; (800159c <Initialize_Save_Instruction+0x344>)
 8001268:	4613      	mov	r3, r2
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	1a9b      	subs	r3, r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	440b      	add	r3, r1
 8001272:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001276:	601a      	str	r2, [r3, #0]
	MyRobot[element].axisY.step = 500;
 8001278:	4bc7      	ldr	r3, [pc, #796]	; (8001598 <Initialize_Save_Instruction+0x340>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	49c7      	ldr	r1, [pc, #796]	; (800159c <Initialize_Save_Instruction+0x344>)
 800127e:	4613      	mov	r3, r2
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	1a9b      	subs	r3, r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	440b      	add	r3, r1
 8001288:	3308      	adds	r3, #8
 800128a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800128e:	601a      	str	r2, [r3, #0]
	MyRobot[element].axisZ.step = 500;
 8001290:	4bc1      	ldr	r3, [pc, #772]	; (8001598 <Initialize_Save_Instruction+0x340>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	49c1      	ldr	r1, [pc, #772]	; (800159c <Initialize_Save_Instruction+0x344>)
 8001296:	4613      	mov	r3, r2
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	1a9b      	subs	r3, r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	440b      	add	r3, r1
 80012a0:	3310      	adds	r3, #16
 80012a2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80012a6:	601a      	str	r2, [r3, #0]
	MyRobot[element].axisX.direction = CounterClockWise;
 80012a8:	4bbb      	ldr	r3, [pc, #748]	; (8001598 <Initialize_Save_Instruction+0x340>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	49bb      	ldr	r1, [pc, #748]	; (800159c <Initialize_Save_Instruction+0x344>)
 80012ae:	4613      	mov	r3, r2
 80012b0:	00db      	lsls	r3, r3, #3
 80012b2:	1a9b      	subs	r3, r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	18ca      	adds	r2, r1, r3
 80012b8:	7913      	ldrb	r3, [r2, #4]
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	7113      	strb	r3, [r2, #4]
	MyRobot[element].axisY.direction = CounterClockWise;
 80012c0:	4bb5      	ldr	r3, [pc, #724]	; (8001598 <Initialize_Save_Instruction+0x340>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	49b5      	ldr	r1, [pc, #724]	; (800159c <Initialize_Save_Instruction+0x344>)
 80012c6:	4613      	mov	r3, r2
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	1a9b      	subs	r3, r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	440b      	add	r3, r1
 80012d0:	f103 0208 	add.w	r2, r3, #8
 80012d4:	7913      	ldrb	r3, [r2, #4]
 80012d6:	f043 0301 	orr.w	r3, r3, #1
 80012da:	7113      	strb	r3, [r2, #4]
	MyRobot[element].axisZ.direction = CounterClockWise;
 80012dc:	4bae      	ldr	r3, [pc, #696]	; (8001598 <Initialize_Save_Instruction+0x340>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	49ae      	ldr	r1, [pc, #696]	; (800159c <Initialize_Save_Instruction+0x344>)
 80012e2:	4613      	mov	r3, r2
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	1a9b      	subs	r3, r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	440b      	add	r3, r1
 80012ec:	f103 0210 	add.w	r2, r3, #16
 80012f0:	7913      	ldrb	r3, [r2, #4]
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	7113      	strb	r3, [r2, #4]
	MyRobot[element].state = Coordinate;
 80012f8:	4ba7      	ldr	r3, [pc, #668]	; (8001598 <Initialize_Save_Instruction+0x340>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	49a7      	ldr	r1, [pc, #668]	; (800159c <Initialize_Save_Instruction+0x344>)
 80012fe:	4613      	mov	r3, r2
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	1a9b      	subs	r3, r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	440b      	add	r3, r1
 8001308:	f103 0218 	add.w	r2, r3, #24
 800130c:	7813      	ldrb	r3, [r2, #0]
 800130e:	2101      	movs	r1, #1
 8001310:	f361 0301 	bfi	r3, r1, #0, #2
 8001314:	7013      	strb	r3, [r2, #0]
	// Pick up XYZ
	MyRobot[element + 1].CommandState = Stop_Pick_Up_State;
 8001316:	4ba0      	ldr	r3, [pc, #640]	; (8001598 <Initialize_Save_Instruction+0x340>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	1c5a      	adds	r2, r3, #1
 800131c:	499f      	ldr	r1, [pc, #636]	; (800159c <Initialize_Save_Instruction+0x344>)
 800131e:	4613      	mov	r3, r2
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	1a9b      	subs	r3, r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	440b      	add	r3, r1
 8001328:	f103 0218 	add.w	r2, r3, #24
 800132c:	7813      	ldrb	r3, [r2, #0]
 800132e:	2107      	movs	r1, #7
 8001330:	f361 0385 	bfi	r3, r1, #2, #4
 8001334:	7013      	strb	r3, [r2, #0]
	MyRobot[element + 1].state = Command;
 8001336:	4b98      	ldr	r3, [pc, #608]	; (8001598 <Initialize_Save_Instruction+0x340>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	1c5a      	adds	r2, r3, #1
 800133c:	4997      	ldr	r1, [pc, #604]	; (800159c <Initialize_Save_Instruction+0x344>)
 800133e:	4613      	mov	r3, r2
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	1a9b      	subs	r3, r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	440b      	add	r3, r1
 8001348:	f103 0218 	add.w	r2, r3, #24
 800134c:	7813      	ldrb	r3, [r2, #0]
 800134e:	2102      	movs	r1, #2
 8001350:	f361 0301 	bfi	r3, r1, #0, #2
 8001354:	7013      	strb	r3, [r2, #0]
	// Absorb instruction
	MyRobot[element + 2].CommandState = Start_Absorb_State;
 8001356:	4b90      	ldr	r3, [pc, #576]	; (8001598 <Initialize_Save_Instruction+0x340>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	1c9a      	adds	r2, r3, #2
 800135c:	498f      	ldr	r1, [pc, #572]	; (800159c <Initialize_Save_Instruction+0x344>)
 800135e:	4613      	mov	r3, r2
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	1a9b      	subs	r3, r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	440b      	add	r3, r1
 8001368:	f103 0218 	add.w	r2, r3, #24
 800136c:	7813      	ldrb	r3, [r2, #0]
 800136e:	2108      	movs	r1, #8
 8001370:	f361 0385 	bfi	r3, r1, #2, #4
 8001374:	7013      	strb	r3, [r2, #0]
	MyRobot[element + 2].state = Command;
 8001376:	4b88      	ldr	r3, [pc, #544]	; (8001598 <Initialize_Save_Instruction+0x340>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	1c9a      	adds	r2, r3, #2
 800137c:	4987      	ldr	r1, [pc, #540]	; (800159c <Initialize_Save_Instruction+0x344>)
 800137e:	4613      	mov	r3, r2
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	1a9b      	subs	r3, r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	440b      	add	r3, r1
 8001388:	f103 0218 	add.w	r2, r3, #24
 800138c:	7813      	ldrb	r3, [r2, #0]
 800138e:	2102      	movs	r1, #2
 8001390:	f361 0301 	bfi	r3, r1, #0, #2
 8001394:	7013      	strb	r3, [r2, #0]
	//Spin instruction
	MyRobot[element + 3].CommandState = Turn_Around_State;
 8001396:	4b80      	ldr	r3, [pc, #512]	; (8001598 <Initialize_Save_Instruction+0x340>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	1cda      	adds	r2, r3, #3
 800139c:	497f      	ldr	r1, [pc, #508]	; (800159c <Initialize_Save_Instruction+0x344>)
 800139e:	4613      	mov	r3, r2
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	1a9b      	subs	r3, r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	440b      	add	r3, r1
 80013a8:	f103 0218 	add.w	r2, r3, #24
 80013ac:	7813      	ldrb	r3, [r2, #0]
 80013ae:	2102      	movs	r1, #2
 80013b0:	f361 0385 	bfi	r3, r1, #2, #4
 80013b4:	7013      	strb	r3, [r2, #0]
	MyRobot[element + 3].state = Command;
 80013b6:	4b78      	ldr	r3, [pc, #480]	; (8001598 <Initialize_Save_Instruction+0x340>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	1cda      	adds	r2, r3, #3
 80013bc:	4977      	ldr	r1, [pc, #476]	; (800159c <Initialize_Save_Instruction+0x344>)
 80013be:	4613      	mov	r3, r2
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	1a9b      	subs	r3, r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	440b      	add	r3, r1
 80013c8:	f103 0218 	add.w	r2, r3, #24
 80013cc:	7813      	ldrb	r3, [r2, #0]
 80013ce:	2102      	movs	r1, #2
 80013d0:	f361 0301 	bfi	r3, r1, #0, #2
 80013d4:	7013      	strb	r3, [r2, #0]
	// XYZ instruction
	MyRobot[element + 4].axisX.step = 500;
 80013d6:	4b70      	ldr	r3, [pc, #448]	; (8001598 <Initialize_Save_Instruction+0x340>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	1d1a      	adds	r2, r3, #4
 80013dc:	496f      	ldr	r1, [pc, #444]	; (800159c <Initialize_Save_Instruction+0x344>)
 80013de:	4613      	mov	r3, r2
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	1a9b      	subs	r3, r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	440b      	add	r3, r1
 80013e8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80013ec:	601a      	str	r2, [r3, #0]
	MyRobot[element + 4].axisY.step = 500;
 80013ee:	4b6a      	ldr	r3, [pc, #424]	; (8001598 <Initialize_Save_Instruction+0x340>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	1d1a      	adds	r2, r3, #4
 80013f4:	4969      	ldr	r1, [pc, #420]	; (800159c <Initialize_Save_Instruction+0x344>)
 80013f6:	4613      	mov	r3, r2
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	1a9b      	subs	r3, r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	440b      	add	r3, r1
 8001400:	3308      	adds	r3, #8
 8001402:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001406:	601a      	str	r2, [r3, #0]
	MyRobot[element + 4].axisZ.step = 500;
 8001408:	4b63      	ldr	r3, [pc, #396]	; (8001598 <Initialize_Save_Instruction+0x340>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	1d1a      	adds	r2, r3, #4
 800140e:	4963      	ldr	r1, [pc, #396]	; (800159c <Initialize_Save_Instruction+0x344>)
 8001410:	4613      	mov	r3, r2
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	1a9b      	subs	r3, r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	440b      	add	r3, r1
 800141a:	3310      	adds	r3, #16
 800141c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001420:	601a      	str	r2, [r3, #0]
	MyRobot[element + 4].axisX.direction = CounterClockWise;
 8001422:	4b5d      	ldr	r3, [pc, #372]	; (8001598 <Initialize_Save_Instruction+0x340>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	1d1a      	adds	r2, r3, #4
 8001428:	495c      	ldr	r1, [pc, #368]	; (800159c <Initialize_Save_Instruction+0x344>)
 800142a:	4613      	mov	r3, r2
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	1a9b      	subs	r3, r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	18ca      	adds	r2, r1, r3
 8001434:	7913      	ldrb	r3, [r2, #4]
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	7113      	strb	r3, [r2, #4]
	MyRobot[element + 4].axisY.direction = CounterClockWise;
 800143c:	4b56      	ldr	r3, [pc, #344]	; (8001598 <Initialize_Save_Instruction+0x340>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	1d1a      	adds	r2, r3, #4
 8001442:	4956      	ldr	r1, [pc, #344]	; (800159c <Initialize_Save_Instruction+0x344>)
 8001444:	4613      	mov	r3, r2
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	1a9b      	subs	r3, r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	440b      	add	r3, r1
 800144e:	f103 0208 	add.w	r2, r3, #8
 8001452:	7913      	ldrb	r3, [r2, #4]
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	7113      	strb	r3, [r2, #4]
	MyRobot[element + 4].axisZ.direction = CounterClockWise;
 800145a:	4b4f      	ldr	r3, [pc, #316]	; (8001598 <Initialize_Save_Instruction+0x340>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	1d1a      	adds	r2, r3, #4
 8001460:	494e      	ldr	r1, [pc, #312]	; (800159c <Initialize_Save_Instruction+0x344>)
 8001462:	4613      	mov	r3, r2
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	1a9b      	subs	r3, r3, r2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	440b      	add	r3, r1
 800146c:	f103 0210 	add.w	r2, r3, #16
 8001470:	7913      	ldrb	r3, [r2, #4]
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	7113      	strb	r3, [r2, #4]
	MyRobot[element + 4].state = Coordinate;
 8001478:	4b47      	ldr	r3, [pc, #284]	; (8001598 <Initialize_Save_Instruction+0x340>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	1d1a      	adds	r2, r3, #4
 800147e:	4947      	ldr	r1, [pc, #284]	; (800159c <Initialize_Save_Instruction+0x344>)
 8001480:	4613      	mov	r3, r2
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	1a9b      	subs	r3, r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	440b      	add	r3, r1
 800148a:	f103 0218 	add.w	r2, r3, #24
 800148e:	7813      	ldrb	r3, [r2, #0]
 8001490:	2101      	movs	r1, #1
 8001492:	f361 0301 	bfi	r3, r1, #0, #2
 8001496:	7013      	strb	r3, [r2, #0]
	//Start pick up
	MyRobot[element + 5].CommandState = Start_Pick_Up_State;
 8001498:	4b3f      	ldr	r3, [pc, #252]	; (8001598 <Initialize_Save_Instruction+0x340>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	1d5a      	adds	r2, r3, #5
 800149e:	493f      	ldr	r1, [pc, #252]	; (800159c <Initialize_Save_Instruction+0x344>)
 80014a0:	4613      	mov	r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	1a9b      	subs	r3, r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	440b      	add	r3, r1
 80014aa:	f103 0218 	add.w	r2, r3, #24
 80014ae:	7813      	ldrb	r3, [r2, #0]
 80014b0:	2106      	movs	r1, #6
 80014b2:	f361 0385 	bfi	r3, r1, #2, #4
 80014b6:	7013      	strb	r3, [r2, #0]
	MyRobot[element + 5].state = Command;
 80014b8:	4b37      	ldr	r3, [pc, #220]	; (8001598 <Initialize_Save_Instruction+0x340>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	1d5a      	adds	r2, r3, #5
 80014be:	4937      	ldr	r1, [pc, #220]	; (800159c <Initialize_Save_Instruction+0x344>)
 80014c0:	4613      	mov	r3, r2
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	1a9b      	subs	r3, r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	440b      	add	r3, r1
 80014ca:	f103 0218 	add.w	r2, r3, #24
 80014ce:	7813      	ldrb	r3, [r2, #0]
 80014d0:	2102      	movs	r1, #2
 80014d2:	f361 0301 	bfi	r3, r1, #0, #2
 80014d6:	7013      	strb	r3, [r2, #0]
	// Stop absorb
	MyRobot[element + 6].CommandState = Stop_Absorb_State;
 80014d8:	4b2f      	ldr	r3, [pc, #188]	; (8001598 <Initialize_Save_Instruction+0x340>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	1d9a      	adds	r2, r3, #6
 80014de:	492f      	ldr	r1, [pc, #188]	; (800159c <Initialize_Save_Instruction+0x344>)
 80014e0:	4613      	mov	r3, r2
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	1a9b      	subs	r3, r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	440b      	add	r3, r1
 80014ea:	f103 0218 	add.w	r2, r3, #24
 80014ee:	7813      	ldrb	r3, [r2, #0]
 80014f0:	2109      	movs	r1, #9
 80014f2:	f361 0385 	bfi	r3, r1, #2, #4
 80014f6:	7013      	strb	r3, [r2, #0]
	MyRobot[element + 6].state = Command;
 80014f8:	4b27      	ldr	r3, [pc, #156]	; (8001598 <Initialize_Save_Instruction+0x340>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	1d9a      	adds	r2, r3, #6
 80014fe:	4927      	ldr	r1, [pc, #156]	; (800159c <Initialize_Save_Instruction+0x344>)
 8001500:	4613      	mov	r3, r2
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	1a9b      	subs	r3, r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	440b      	add	r3, r1
 800150a:	f103 0218 	add.w	r2, r3, #24
 800150e:	7813      	ldrb	r3, [r2, #0]
 8001510:	2102      	movs	r1, #2
 8001512:	f361 0301 	bfi	r3, r1, #0, #2
 8001516:	7013      	strb	r3, [r2, #0]
	// XYZ
	MyRobot[element + 7].axisX.step = 500;
 8001518:	4b1f      	ldr	r3, [pc, #124]	; (8001598 <Initialize_Save_Instruction+0x340>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	1dda      	adds	r2, r3, #7
 800151e:	491f      	ldr	r1, [pc, #124]	; (800159c <Initialize_Save_Instruction+0x344>)
 8001520:	4613      	mov	r3, r2
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	1a9b      	subs	r3, r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	440b      	add	r3, r1
 800152a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800152e:	601a      	str	r2, [r3, #0]
	MyRobot[element + 7].axisY.step = 500;
 8001530:	4b19      	ldr	r3, [pc, #100]	; (8001598 <Initialize_Save_Instruction+0x340>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	1dda      	adds	r2, r3, #7
 8001536:	4919      	ldr	r1, [pc, #100]	; (800159c <Initialize_Save_Instruction+0x344>)
 8001538:	4613      	mov	r3, r2
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	1a9b      	subs	r3, r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	440b      	add	r3, r1
 8001542:	3308      	adds	r3, #8
 8001544:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001548:	601a      	str	r2, [r3, #0]
	MyRobot[element + 7].axisZ.step = 500;
 800154a:	4b13      	ldr	r3, [pc, #76]	; (8001598 <Initialize_Save_Instruction+0x340>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	1dda      	adds	r2, r3, #7
 8001550:	4912      	ldr	r1, [pc, #72]	; (800159c <Initialize_Save_Instruction+0x344>)
 8001552:	4613      	mov	r3, r2
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	1a9b      	subs	r3, r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	440b      	add	r3, r1
 800155c:	3310      	adds	r3, #16
 800155e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001562:	601a      	str	r2, [r3, #0]
	MyRobot[element + 7].axisX.direction = CounterClockWise;
 8001564:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <Initialize_Save_Instruction+0x340>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	1dda      	adds	r2, r3, #7
 800156a:	490c      	ldr	r1, [pc, #48]	; (800159c <Initialize_Save_Instruction+0x344>)
 800156c:	4613      	mov	r3, r2
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	1a9b      	subs	r3, r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	18ca      	adds	r2, r1, r3
 8001576:	7913      	ldrb	r3, [r2, #4]
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	7113      	strb	r3, [r2, #4]
	MyRobot[element + 7].axisY.direction = CounterClockWise;
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <Initialize_Save_Instruction+0x340>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	1dda      	adds	r2, r3, #7
 8001584:	4905      	ldr	r1, [pc, #20]	; (800159c <Initialize_Save_Instruction+0x344>)
 8001586:	4613      	mov	r3, r2
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	1a9b      	subs	r3, r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	440b      	add	r3, r1
 8001590:	e006      	b.n	80015a0 <Initialize_Save_Instruction+0x348>
 8001592:	bf00      	nop
 8001594:	20000d95 	.word	0x20000d95
 8001598:	2000026c 	.word	0x2000026c
 800159c:	200002a4 	.word	0x200002a4
 80015a0:	f103 0208 	add.w	r2, r3, #8
 80015a4:	7913      	ldrb	r3, [r2, #4]
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	7113      	strb	r3, [r2, #4]
	MyRobot[element + 7].axisZ.direction = CounterClockWise;
 80015ac:	4b5a      	ldr	r3, [pc, #360]	; (8001718 <Initialize_Save_Instruction+0x4c0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	1dda      	adds	r2, r3, #7
 80015b2:	495a      	ldr	r1, [pc, #360]	; (800171c <Initialize_Save_Instruction+0x4c4>)
 80015b4:	4613      	mov	r3, r2
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	1a9b      	subs	r3, r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	440b      	add	r3, r1
 80015be:	f103 0210 	add.w	r2, r3, #16
 80015c2:	7913      	ldrb	r3, [r2, #4]
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	7113      	strb	r3, [r2, #4]
	MyRobot[element + 7].state = Coordinate;
 80015ca:	4b53      	ldr	r3, [pc, #332]	; (8001718 <Initialize_Save_Instruction+0x4c0>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	1dda      	adds	r2, r3, #7
 80015d0:	4952      	ldr	r1, [pc, #328]	; (800171c <Initialize_Save_Instruction+0x4c4>)
 80015d2:	4613      	mov	r3, r2
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	1a9b      	subs	r3, r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	440b      	add	r3, r1
 80015dc:	f103 0218 	add.w	r2, r3, #24
 80015e0:	7813      	ldrb	r3, [r2, #0]
 80015e2:	2101      	movs	r1, #1
 80015e4:	f361 0301 	bfi	r3, r1, #0, #2
 80015e8:	7013      	strb	r3, [r2, #0]
	// stop pick up
	MyRobot[element + 8].CommandState = Stop_Pick_Up_State;
 80015ea:	4b4b      	ldr	r3, [pc, #300]	; (8001718 <Initialize_Save_Instruction+0x4c0>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f103 0208 	add.w	r2, r3, #8
 80015f2:	494a      	ldr	r1, [pc, #296]	; (800171c <Initialize_Save_Instruction+0x4c4>)
 80015f4:	4613      	mov	r3, r2
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	1a9b      	subs	r3, r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	f103 0218 	add.w	r2, r3, #24
 8001602:	7813      	ldrb	r3, [r2, #0]
 8001604:	2107      	movs	r1, #7
 8001606:	f361 0385 	bfi	r3, r1, #2, #4
 800160a:	7013      	strb	r3, [r2, #0]
	MyRobot[element + 8].state = Command;
 800160c:	4b42      	ldr	r3, [pc, #264]	; (8001718 <Initialize_Save_Instruction+0x4c0>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f103 0208 	add.w	r2, r3, #8
 8001614:	4941      	ldr	r1, [pc, #260]	; (800171c <Initialize_Save_Instruction+0x4c4>)
 8001616:	4613      	mov	r3, r2
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	1a9b      	subs	r3, r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	440b      	add	r3, r1
 8001620:	f103 0218 	add.w	r2, r3, #24
 8001624:	7813      	ldrb	r3, [r2, #0]
 8001626:	2102      	movs	r1, #2
 8001628:	f361 0301 	bfi	r3, r1, #0, #2
 800162c:	7013      	strb	r3, [r2, #0]

	MyRobot[element + 9].axisX.step = 500;
 800162e:	4b3a      	ldr	r3, [pc, #232]	; (8001718 <Initialize_Save_Instruction+0x4c0>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f103 0209 	add.w	r2, r3, #9
 8001636:	4939      	ldr	r1, [pc, #228]	; (800171c <Initialize_Save_Instruction+0x4c4>)
 8001638:	4613      	mov	r3, r2
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	1a9b      	subs	r3, r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	440b      	add	r3, r1
 8001642:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001646:	601a      	str	r2, [r3, #0]
	MyRobot[element + 9].axisY.step = 500;
 8001648:	4b33      	ldr	r3, [pc, #204]	; (8001718 <Initialize_Save_Instruction+0x4c0>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f103 0209 	add.w	r2, r3, #9
 8001650:	4932      	ldr	r1, [pc, #200]	; (800171c <Initialize_Save_Instruction+0x4c4>)
 8001652:	4613      	mov	r3, r2
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	1a9b      	subs	r3, r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	440b      	add	r3, r1
 800165c:	3308      	adds	r3, #8
 800165e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001662:	601a      	str	r2, [r3, #0]
	MyRobot[element + 9].axisZ.step = 500;
 8001664:	4b2c      	ldr	r3, [pc, #176]	; (8001718 <Initialize_Save_Instruction+0x4c0>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f103 0209 	add.w	r2, r3, #9
 800166c:	492b      	ldr	r1, [pc, #172]	; (800171c <Initialize_Save_Instruction+0x4c4>)
 800166e:	4613      	mov	r3, r2
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	1a9b      	subs	r3, r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	440b      	add	r3, r1
 8001678:	3310      	adds	r3, #16
 800167a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800167e:	601a      	str	r2, [r3, #0]
	MyRobot[element + 9].axisX.direction = CounterClockWise;
 8001680:	4b25      	ldr	r3, [pc, #148]	; (8001718 <Initialize_Save_Instruction+0x4c0>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f103 0209 	add.w	r2, r3, #9
 8001688:	4924      	ldr	r1, [pc, #144]	; (800171c <Initialize_Save_Instruction+0x4c4>)
 800168a:	4613      	mov	r3, r2
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	1a9b      	subs	r3, r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	18ca      	adds	r2, r1, r3
 8001694:	7913      	ldrb	r3, [r2, #4]
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	7113      	strb	r3, [r2, #4]
	MyRobot[element + 9].axisY.direction = CounterClockWise;
 800169c:	4b1e      	ldr	r3, [pc, #120]	; (8001718 <Initialize_Save_Instruction+0x4c0>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f103 0209 	add.w	r2, r3, #9
 80016a4:	491d      	ldr	r1, [pc, #116]	; (800171c <Initialize_Save_Instruction+0x4c4>)
 80016a6:	4613      	mov	r3, r2
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	1a9b      	subs	r3, r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	440b      	add	r3, r1
 80016b0:	f103 0208 	add.w	r2, r3, #8
 80016b4:	7913      	ldrb	r3, [r2, #4]
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	7113      	strb	r3, [r2, #4]
	MyRobot[element + 9].axisZ.direction = CounterClockWise;
 80016bc:	4b16      	ldr	r3, [pc, #88]	; (8001718 <Initialize_Save_Instruction+0x4c0>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f103 0209 	add.w	r2, r3, #9
 80016c4:	4915      	ldr	r1, [pc, #84]	; (800171c <Initialize_Save_Instruction+0x4c4>)
 80016c6:	4613      	mov	r3, r2
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	1a9b      	subs	r3, r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	440b      	add	r3, r1
 80016d0:	f103 0210 	add.w	r2, r3, #16
 80016d4:	7913      	ldrb	r3, [r2, #4]
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	7113      	strb	r3, [r2, #4]
	MyRobot[element + 9].state = Coordinate;
 80016dc:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <Initialize_Save_Instruction+0x4c0>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f103 0209 	add.w	r2, r3, #9
 80016e4:	490d      	ldr	r1, [pc, #52]	; (800171c <Initialize_Save_Instruction+0x4c4>)
 80016e6:	4613      	mov	r3, r2
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	1a9b      	subs	r3, r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	440b      	add	r3, r1
 80016f0:	f103 0218 	add.w	r2, r3, #24
 80016f4:	7813      	ldrb	r3, [r2, #0]
 80016f6:	2101      	movs	r1, #1
 80016f8:	f361 0301 	bfi	r3, r1, #0, #2
 80016fc:	7013      	strb	r3, [r2, #0]

	end_instruction = element + 9;
 80016fe:	4b06      	ldr	r3, [pc, #24]	; (8001718 <Initialize_Save_Instruction+0x4c0>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	3309      	adds	r3, #9
 8001704:	4a06      	ldr	r2, [pc, #24]	; (8001720 <Initialize_Save_Instruction+0x4c8>)
 8001706:	6013      	str	r3, [r2, #0]
	initialize_finish = 1;
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <Initialize_Save_Instruction+0x4cc>)
 800170a:	2201      	movs	r2, #1
 800170c:	701a      	strb	r2, [r3, #0]
}
 800170e:	bf00      	nop
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	2000026c 	.word	0x2000026c
 800171c:	200002a4 	.word	0x200002a4
 8001720:	20000270 	.word	0x20000270
 8001724:	20000d94 	.word	0x20000d94

08001728 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800172c:	f000 fd04 	bl	8002138 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001730:	f000 f894 	bl	800185c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001734:	f000 fa02 	bl	8001b3c <MX_GPIO_Init>
	MX_TIM2_Init();
 8001738:	f000 f8d6 	bl	80018e8 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 800173c:	f000 f9d4 	bl	8001ae8 <MX_USART1_UART_Init>
	MX_TIM3_Init();
 8001740:	f000 f95c 	bl	80019fc <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */

	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 8001744:	4b37      	ldr	r3, [pc, #220]	; (8001824 <main+0xfc>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f06f 0201 	mvn.w	r2, #1
 800174c:	611a      	str	r2, [r3, #16]

	HAL_TIM_Base_Start_IT(&htim2);
 800174e:	4835      	ldr	r0, [pc, #212]	; (8001824 <main+0xfc>)
 8001750:	f001 fd4c 	bl	80031ec <HAL_TIM_Base_Start_IT>

	__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 8001754:	4b34      	ldr	r3, [pc, #208]	; (8001828 <main+0x100>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f06f 0201 	mvn.w	r2, #1
 800175c:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim3);
 800175e:	4832      	ldr	r0, [pc, #200]	; (8001828 <main+0x100>)
 8001760:	f001 fd44 	bl	80031ec <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart1, (uint8_t*) rxByte, length);
 8001764:	221a      	movs	r2, #26
 8001766:	4931      	ldr	r1, [pc, #196]	; (800182c <main+0x104>)
 8001768:	4831      	ldr	r0, [pc, #196]	; (8001830 <main+0x108>)
 800176a:	f002 feca 	bl	8004502 <HAL_UART_Receive_IT>
	HAL_TIM_PWM_Start(&htim2, Z_CHANNEL);
 800176e:	2108      	movs	r1, #8
 8001770:	482c      	ldr	r0, [pc, #176]	; (8001824 <main+0xfc>)
 8001772:	f001 fde5 	bl	8003340 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, X_CHANNEL);
 8001776:	2100      	movs	r1, #0
 8001778:	482a      	ldr	r0, [pc, #168]	; (8001824 <main+0xfc>)
 800177a:	f001 fde1 	bl	8003340 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, Y_CHANNEL);
 800177e:	2100      	movs	r1, #0
 8001780:	4829      	ldr	r0, [pc, #164]	; (8001828 <main+0x100>)
 8001782:	f001 fddd 	bl	8003340 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOB, DIRX_Pin | DIRY_Pin | DIRZ_Pin, CounterClockWise);
 8001786:	2201      	movs	r2, #1
 8001788:	f240 4121 	movw	r1, #1057	; 0x421
 800178c:	4829      	ldr	r0, [pc, #164]	; (8001834 <main+0x10c>)
 800178e:	f001 f89d 	bl	80028cc <HAL_GPIO_WritePin>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (!AtHome) {
 8001792:	4b29      	ldr	r3, [pc, #164]	; (8001838 <main+0x110>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <main+0x76>
			CheckHome();
 800179a:	f7ff fae9 	bl	8000d70 <CheckHome>
		}
		switch (state_robot) {
 800179e:	4b27      	ldr	r3, [pc, #156]	; (800183c <main+0x114>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b03      	cmp	r3, #3
 80017a4:	d010      	beq.n	80017c8 <main+0xa0>
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	d136      	bne.n	8001818 <main+0xf0>
		case wait_instruction:
			if (isTaskDone || (!element && startRobot == 0)) {
 80017aa:	4b25      	ldr	r3, [pc, #148]	; (8001840 <main+0x118>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d107      	bne.n	80017c2 <main+0x9a>
 80017b2:	4b24      	ldr	r3, [pc, #144]	; (8001844 <main+0x11c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d130      	bne.n	800181c <main+0xf4>
 80017ba:	4b23      	ldr	r3, [pc, #140]	; (8001848 <main+0x120>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d12c      	bne.n	800181c <main+0xf4>
				ControlRobot();
 80017c2:	f7ff fcd5 	bl	8001170 <ControlRobot>
			}
			break;
 80017c6:	e029      	b.n	800181c <main+0xf4>
		case save_instruction:
			if (!initialize_finish && isTaskDone) {
 80017c8:	4b20      	ldr	r3, [pc, #128]	; (800184c <main+0x124>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d105      	bne.n	80017dc <main+0xb4>
 80017d0:	4b1b      	ldr	r3, [pc, #108]	; (8001840 <main+0x118>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <main+0xb4>
				Initialize_Save_Instruction();
 80017d8:	f7ff fd3e 	bl	8001258 <Initialize_Save_Instruction>

			}
			if (isTaskDone && initialize_finish) {
 80017dc:	4b18      	ldr	r3, [pc, #96]	; (8001840 <main+0x118>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d005      	beq.n	80017f0 <main+0xc8>
 80017e4:	4b19      	ldr	r3, [pc, #100]	; (800184c <main+0x124>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <main+0xc8>
				ControlRobot();
 80017ec:	f7ff fcc0 	bl	8001170 <ControlRobot>
			}
			if (element == end_instruction && initialize_finish) {
 80017f0:	4b14      	ldr	r3, [pc, #80]	; (8001844 <main+0x11c>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4b16      	ldr	r3, [pc, #88]	; (8001850 <main+0x128>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d111      	bne.n	8001820 <main+0xf8>
 80017fc:	4b13      	ldr	r3, [pc, #76]	; (800184c <main+0x124>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d00d      	beq.n	8001820 <main+0xf8>
				state_robot = wait_instruction;
 8001804:	4b0d      	ldr	r3, [pc, #52]	; (800183c <main+0x114>)
 8001806:	2204      	movs	r2, #4
 8001808:	701a      	strb	r2, [r3, #0]
				printf("Done, go back state wait instruction\r\n");
 800180a:	4812      	ldr	r0, [pc, #72]	; (8001854 <main+0x12c>)
 800180c:	f003 fd34 	bl	8005278 <puts>
				backFromSave = 1;
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <main+0x130>)
 8001812:	2201      	movs	r2, #1
 8001814:	601a      	str	r2, [r3, #0]
			}
			break;
 8001816:	e003      	b.n	8001820 <main+0xf8>
		default:
			break;
 8001818:	bf00      	nop
 800181a:	e7ba      	b.n	8001792 <main+0x6a>
			break;
 800181c:	bf00      	nop
 800181e:	e7b8      	b.n	8001792 <main+0x6a>
			break;
 8001820:	bf00      	nop
		if (!AtHome) {
 8001822:	e7b6      	b.n	8001792 <main+0x6a>
 8001824:	20000158 	.word	0x20000158
 8001828:	200001a0 	.word	0x200001a0
 800182c:	20000d98 	.word	0x20000d98
 8001830:	200001e8 	.word	0x200001e8
 8001834:	40010c00 	.word	0x40010c00
 8001838:	20000000 	.word	0x20000000
 800183c:	200000d2 	.word	0x200000d2
 8001840:	20000db2 	.word	0x20000db2
 8001844:	2000026c 	.word	0x2000026c
 8001848:	2000023c 	.word	0x2000023c
 800184c:	20000d94 	.word	0x20000d94
 8001850:	20000270 	.word	0x20000270
 8001854:	08005afc 	.word	0x08005afc
 8001858:	20000274 	.word	0x20000274

0800185c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800185c:	b580      	push	{r7, lr}
 800185e:	b090      	sub	sp, #64	; 0x40
 8001860:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001862:	f107 0318 	add.w	r3, r7, #24
 8001866:	2228      	movs	r2, #40	; 0x28
 8001868:	2100      	movs	r1, #0
 800186a:	4618      	mov	r0, r3
 800186c:	f003 fde4 	bl	8005438 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001870:	1d3b      	adds	r3, r7, #4
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]
 800187a:	60da      	str	r2, [r3, #12]
 800187c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800187e:	2301      	movs	r3, #1
 8001880:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001882:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001886:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001888:	2300      	movs	r3, #0
 800188a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800188c:	2301      	movs	r3, #1
 800188e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001890:	2302      	movs	r3, #2
 8001892:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001894:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001898:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800189a:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 800189e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80018a0:	f107 0318 	add.w	r3, r7, #24
 80018a4:	4618      	mov	r0, r3
 80018a6:	f001 f841 	bl	800292c <HAL_RCC_OscConfig>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <SystemClock_Config+0x58>
		Error_Handler();
 80018b0:	f000 fa02 	bl	8001cb8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80018b4:	230f      	movs	r3, #15
 80018b6:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018b8:	2302      	movs	r3, #2
 80018ba:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018bc:	2300      	movs	r3, #0
 80018be:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80018c0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80018c4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 80018c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80018ca:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80018cc:	1d3b      	adds	r3, r7, #4
 80018ce:	2102      	movs	r1, #2
 80018d0:	4618      	mov	r0, r3
 80018d2:	f001 faad 	bl	8002e30 <HAL_RCC_ClockConfig>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <SystemClock_Config+0x84>
		Error_Handler();
 80018dc:	f000 f9ec 	bl	8001cb8 <Error_Handler>
	}
}
 80018e0:	bf00      	nop
 80018e2:	3740      	adds	r7, #64	; 0x40
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08e      	sub	sp, #56	; 0x38
 80018ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80018ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80018fc:	f107 0320 	add.w	r3, r7, #32
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001906:	1d3b      	adds	r3, r7, #4
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
 8001914:	615a      	str	r2, [r3, #20]
 8001916:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001918:	4b37      	ldr	r3, [pc, #220]	; (80019f8 <MX_TIM2_Init+0x110>)
 800191a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800191e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 160 - 1;
 8001920:	4b35      	ldr	r3, [pc, #212]	; (80019f8 <MX_TIM2_Init+0x110>)
 8001922:	229f      	movs	r2, #159	; 0x9f
 8001924:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001926:	4b34      	ldr	r3, [pc, #208]	; (80019f8 <MX_TIM2_Init+0x110>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 125 - 1;
 800192c:	4b32      	ldr	r3, [pc, #200]	; (80019f8 <MX_TIM2_Init+0x110>)
 800192e:	227c      	movs	r2, #124	; 0x7c
 8001930:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001932:	4b31      	ldr	r3, [pc, #196]	; (80019f8 <MX_TIM2_Init+0x110>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001938:	4b2f      	ldr	r3, [pc, #188]	; (80019f8 <MX_TIM2_Init+0x110>)
 800193a:	2200      	movs	r2, #0
 800193c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800193e:	482e      	ldr	r0, [pc, #184]	; (80019f8 <MX_TIM2_Init+0x110>)
 8001940:	f001 fc04 	bl	800314c <HAL_TIM_Base_Init>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_TIM2_Init+0x66>
		Error_Handler();
 800194a:	f000 f9b5 	bl	8001cb8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800194e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001952:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001954:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001958:	4619      	mov	r1, r3
 800195a:	4827      	ldr	r0, [pc, #156]	; (80019f8 <MX_TIM2_Init+0x110>)
 800195c:	f002 f8fe 	bl	8003b5c <HAL_TIM_ConfigClockSource>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM2_Init+0x82>
		Error_Handler();
 8001966:	f000 f9a7 	bl	8001cb8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 800196a:	4823      	ldr	r0, [pc, #140]	; (80019f8 <MX_TIM2_Init+0x110>)
 800196c:	f001 fc90 	bl	8003290 <HAL_TIM_PWM_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_TIM2_Init+0x92>
		Error_Handler();
 8001976:	f000 f99f 	bl	8001cb8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800197a:	2300      	movs	r3, #0
 800197c:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800197e:	2300      	movs	r3, #0
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001982:	f107 0320 	add.w	r3, r7, #32
 8001986:	4619      	mov	r1, r3
 8001988:	481b      	ldr	r0, [pc, #108]	; (80019f8 <MX_TIM2_Init+0x110>)
 800198a:	f002 fc77 	bl	800427c <HAL_TIMEx_MasterConfigSynchronization>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_TIM2_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8001994:	f000 f990 	bl	8001cb8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001998:	2360      	movs	r3, #96	; 0x60
 800199a:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 100;
 800199c:	2364      	movs	r3, #100	; 0x64
 800199e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019a0:	2300      	movs	r3, #0
 80019a2:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 80019a8:	1d3b      	adds	r3, r7, #4
 80019aa:	2200      	movs	r2, #0
 80019ac:	4619      	mov	r1, r3
 80019ae:	4812      	ldr	r0, [pc, #72]	; (80019f8 <MX_TIM2_Init+0x110>)
 80019b0:	f002 f812 	bl	80039d8 <HAL_TIM_PWM_ConfigChannel>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_TIM2_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 80019ba:	f000 f97d 	bl	8001cb8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 80019be:	1d3b      	adds	r3, r7, #4
 80019c0:	2204      	movs	r2, #4
 80019c2:	4619      	mov	r1, r3
 80019c4:	480c      	ldr	r0, [pc, #48]	; (80019f8 <MX_TIM2_Init+0x110>)
 80019c6:	f002 f807 	bl	80039d8 <HAL_TIM_PWM_ConfigChannel>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_TIM2_Init+0xec>
			!= HAL_OK) {
		Error_Handler();
 80019d0:	f000 f972 	bl	8001cb8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	2208      	movs	r2, #8
 80019d8:	4619      	mov	r1, r3
 80019da:	4807      	ldr	r0, [pc, #28]	; (80019f8 <MX_TIM2_Init+0x110>)
 80019dc:	f001 fffc 	bl	80039d8 <HAL_TIM_PWM_ConfigChannel>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_TIM2_Init+0x102>
			!= HAL_OK) {
		Error_Handler();
 80019e6:	f000 f967 	bl	8001cb8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80019ea:	4803      	ldr	r0, [pc, #12]	; (80019f8 <MX_TIM2_Init+0x110>)
 80019ec:	f000 f9dc 	bl	8001da8 <HAL_TIM_MspPostInit>

}
 80019f0:	bf00      	nop
 80019f2:	3738      	adds	r7, #56	; 0x38
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20000158 	.word	0x20000158

080019fc <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08e      	sub	sp, #56	; 0x38
 8001a00:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001a02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
 8001a0e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001a10:	f107 0320 	add.w	r3, r7, #32
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001a1a:	1d3b      	adds	r3, r7, #4
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]
 8001a28:	615a      	str	r2, [r3, #20]
 8001a2a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001a2c:	4b2c      	ldr	r3, [pc, #176]	; (8001ae0 <MX_TIM3_Init+0xe4>)
 8001a2e:	4a2d      	ldr	r2, [pc, #180]	; (8001ae4 <MX_TIM3_Init+0xe8>)
 8001a30:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 160 - 1;
 8001a32:	4b2b      	ldr	r3, [pc, #172]	; (8001ae0 <MX_TIM3_Init+0xe4>)
 8001a34:	229f      	movs	r2, #159	; 0x9f
 8001a36:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a38:	4b29      	ldr	r3, [pc, #164]	; (8001ae0 <MX_TIM3_Init+0xe4>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 200 - 1;
 8001a3e:	4b28      	ldr	r3, [pc, #160]	; (8001ae0 <MX_TIM3_Init+0xe4>)
 8001a40:	22c7      	movs	r2, #199	; 0xc7
 8001a42:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a44:	4b26      	ldr	r3, [pc, #152]	; (8001ae0 <MX_TIM3_Init+0xe4>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a4a:	4b25      	ldr	r3, [pc, #148]	; (8001ae0 <MX_TIM3_Init+0xe4>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001a50:	4823      	ldr	r0, [pc, #140]	; (8001ae0 <MX_TIM3_Init+0xe4>)
 8001a52:	f001 fb7b 	bl	800314c <HAL_TIM_Base_Init>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_TIM3_Init+0x64>
		Error_Handler();
 8001a5c:	f000 f92c 	bl	8001cb8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a64:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001a66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	481c      	ldr	r0, [pc, #112]	; (8001ae0 <MX_TIM3_Init+0xe4>)
 8001a6e:	f002 f875 	bl	8003b5c <HAL_TIM_ConfigClockSource>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_TIM3_Init+0x80>
		Error_Handler();
 8001a78:	f000 f91e 	bl	8001cb8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8001a7c:	4818      	ldr	r0, [pc, #96]	; (8001ae0 <MX_TIM3_Init+0xe4>)
 8001a7e:	f001 fc07 	bl	8003290 <HAL_TIM_PWM_Init>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_TIM3_Init+0x90>
		Error_Handler();
 8001a88:	f000 f916 	bl	8001cb8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a90:	2300      	movs	r3, #0
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001a94:	f107 0320 	add.w	r3, r7, #32
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4811      	ldr	r0, [pc, #68]	; (8001ae0 <MX_TIM3_Init+0xe4>)
 8001a9c:	f002 fbee 	bl	800427c <HAL_TIMEx_MasterConfigSynchronization>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_TIM3_Init+0xae>
			!= HAL_OK) {
		Error_Handler();
 8001aa6:	f000 f907 	bl	8001cb8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aaa:	2360      	movs	r3, #96	; 0x60
 8001aac:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 50;
 8001aae:	2332      	movs	r3, #50	; 0x32
 8001ab0:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	2200      	movs	r2, #0
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4807      	ldr	r0, [pc, #28]	; (8001ae0 <MX_TIM3_Init+0xe4>)
 8001ac2:	f001 ff89 	bl	80039d8 <HAL_TIM_PWM_ConfigChannel>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_TIM3_Init+0xd4>
			!= HAL_OK) {
		Error_Handler();
 8001acc:	f000 f8f4 	bl	8001cb8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8001ad0:	4803      	ldr	r0, [pc, #12]	; (8001ae0 <MX_TIM3_Init+0xe4>)
 8001ad2:	f000 f969 	bl	8001da8 <HAL_TIM_MspPostInit>

}
 8001ad6:	bf00      	nop
 8001ad8:	3738      	adds	r7, #56	; 0x38
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	200001a0 	.word	0x200001a0
 8001ae4:	40000400 	.word	0x40000400

08001ae8 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001aec:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <MX_USART1_UART_Init+0x4c>)
 8001aee:	4a12      	ldr	r2, [pc, #72]	; (8001b38 <MX_USART1_UART_Init+0x50>)
 8001af0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8001af2:	4b10      	ldr	r3, [pc, #64]	; (8001b34 <MX_USART1_UART_Init+0x4c>)
 8001af4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001af8:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001afa:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <MX_USART1_UART_Init+0x4c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001b00:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <MX_USART1_UART_Init+0x4c>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001b06:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <MX_USART1_UART_Init+0x4c>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001b0c:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <MX_USART1_UART_Init+0x4c>)
 8001b0e:	220c      	movs	r2, #12
 8001b10:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b12:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <MX_USART1_UART_Init+0x4c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b18:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <MX_USART1_UART_Init+0x4c>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001b1e:	4805      	ldr	r0, [pc, #20]	; (8001b34 <MX_USART1_UART_Init+0x4c>)
 8001b20:	f002 fc1c 	bl	800435c <HAL_UART_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8001b2a:	f000 f8c5 	bl	8001cb8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	200001e8 	.word	0x200001e8
 8001b38:	40013800 	.word	0x40013800

08001b3c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b088      	sub	sp, #32
 8001b40:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001b42:	f107 0310 	add.w	r3, r7, #16
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
 8001b4c:	609a      	str	r2, [r3, #8]
 8001b4e:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001b50:	4b54      	ldr	r3, [pc, #336]	; (8001ca4 <MX_GPIO_Init+0x168>)
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	4a53      	ldr	r2, [pc, #332]	; (8001ca4 <MX_GPIO_Init+0x168>)
 8001b56:	f043 0320 	orr.w	r3, r3, #32
 8001b5a:	6193      	str	r3, [r2, #24]
 8001b5c:	4b51      	ldr	r3, [pc, #324]	; (8001ca4 <MX_GPIO_Init+0x168>)
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	f003 0320 	and.w	r3, r3, #32
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001b68:	4b4e      	ldr	r3, [pc, #312]	; (8001ca4 <MX_GPIO_Init+0x168>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	4a4d      	ldr	r2, [pc, #308]	; (8001ca4 <MX_GPIO_Init+0x168>)
 8001b6e:	f043 0304 	orr.w	r3, r3, #4
 8001b72:	6193      	str	r3, [r2, #24]
 8001b74:	4b4b      	ldr	r3, [pc, #300]	; (8001ca4 <MX_GPIO_Init+0x168>)
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	60bb      	str	r3, [r7, #8]
 8001b7e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001b80:	4b48      	ldr	r3, [pc, #288]	; (8001ca4 <MX_GPIO_Init+0x168>)
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	4a47      	ldr	r2, [pc, #284]	; (8001ca4 <MX_GPIO_Init+0x168>)
 8001b86:	f043 0308 	orr.w	r3, r3, #8
 8001b8a:	6193      	str	r3, [r2, #24]
 8001b8c:	4b45      	ldr	r3, [pc, #276]	; (8001ca4 <MX_GPIO_Init+0x168>)
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	f003 0308 	and.w	r3, r3, #8
 8001b94:	607b      	str	r3, [r7, #4]
 8001b96:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DIRY_GPIO_Port, DIRY_Pin, GPIO_PIN_RESET);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	2120      	movs	r1, #32
 8001b9c:	4842      	ldr	r0, [pc, #264]	; (8001ca8 <MX_GPIO_Init+0x16c>)
 8001b9e:	f000 fe95 	bl	80028cc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RELAY_ROBOT_GPIO_Port, RELAY_ROBOT_Pin, GPIO_PIN_SET);
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	2140      	movs	r1, #64	; 0x40
 8001ba6:	4840      	ldr	r0, [pc, #256]	; (8001ca8 <MX_GPIO_Init+0x16c>)
 8001ba8:	f000 fe90 	bl	80028cc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, DIRX_Pin | DIRZ_Pin, GPIO_PIN_RESET);
 8001bac:	2200      	movs	r2, #0
 8001bae:	f240 4101 	movw	r1, #1025	; 0x401
 8001bb2:	483e      	ldr	r0, [pc, #248]	; (8001cac <MX_GPIO_Init+0x170>)
 8001bb4:	f000 fe8a 	bl	80028cc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, RELAY_ABSORB_Pin | RELAY_CONVEYOR_Pin,
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001bbe:	483b      	ldr	r0, [pc, #236]	; (8001cac <MX_GPIO_Init+0x170>)
 8001bc0:	f000 fe84 	bl	80028cc <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin : EMSTOP_Pin */
	GPIO_InitStruct.Pin = EMSTOP_Pin;
 8001bc4:	2310      	movs	r3, #16
 8001bc6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bc8:	4b39      	ldr	r3, [pc, #228]	; (8001cb0 <MX_GPIO_Init+0x174>)
 8001bca:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(EMSTOP_GPIO_Port, &GPIO_InitStruct);
 8001bd0:	f107 0310 	add.w	r3, r7, #16
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4834      	ldr	r0, [pc, #208]	; (8001ca8 <MX_GPIO_Init+0x16c>)
 8001bd8:	f000 fcf4 	bl	80025c4 <HAL_GPIO_Init>

	/*Configure GPIO pin : DIRY_Pin */
	GPIO_InitStruct.Pin = DIRY_Pin;
 8001bdc:	2320      	movs	r3, #32
 8001bde:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be0:	2301      	movs	r3, #1
 8001be2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001be4:	2302      	movs	r3, #2
 8001be6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be8:	2302      	movs	r3, #2
 8001bea:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(DIRY_GPIO_Port, &GPIO_InitStruct);
 8001bec:	f107 0310 	add.w	r3, r7, #16
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	482d      	ldr	r0, [pc, #180]	; (8001ca8 <MX_GPIO_Init+0x16c>)
 8001bf4:	f000 fce6 	bl	80025c4 <HAL_GPIO_Init>

	/*Configure GPIO pin : RELAY_ROBOT_Pin */
	GPIO_InitStruct.Pin = RELAY_ROBOT_Pin;
 8001bf8:	2340      	movs	r3, #64	; 0x40
 8001bfa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c04:	2302      	movs	r3, #2
 8001c06:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(RELAY_ROBOT_GPIO_Port, &GPIO_InitStruct);
 8001c08:	f107 0310 	add.w	r3, r7, #16
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4826      	ldr	r0, [pc, #152]	; (8001ca8 <MX_GPIO_Init+0x16c>)
 8001c10:	f000 fcd8 	bl	80025c4 <HAL_GPIO_Init>

	/*Configure GPIO pins : DIRX_Pin DIRZ_Pin */
	GPIO_InitStruct.Pin = DIRX_Pin | DIRZ_Pin;
 8001c14:	f240 4301 	movw	r3, #1025	; 0x401
 8001c18:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c22:	2302      	movs	r3, #2
 8001c24:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c26:	f107 0310 	add.w	r3, r7, #16
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	481f      	ldr	r0, [pc, #124]	; (8001cac <MX_GPIO_Init+0x170>)
 8001c2e:	f000 fcc9 	bl	80025c4 <HAL_GPIO_Init>

	/*Configure GPIO pins : SIGY_Pin SIGX_Pin SIGZ_Pin */
	GPIO_InitStruct.Pin = SIGY_Pin | SIGX_Pin | SIGZ_Pin;
 8001c32:	f240 2382 	movw	r3, #642	; 0x282
 8001c36:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c38:	4b1e      	ldr	r3, [pc, #120]	; (8001cb4 <MX_GPIO_Init+0x178>)
 8001c3a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c40:	f107 0310 	add.w	r3, r7, #16
 8001c44:	4619      	mov	r1, r3
 8001c46:	4819      	ldr	r0, [pc, #100]	; (8001cac <MX_GPIO_Init+0x170>)
 8001c48:	f000 fcbc 	bl	80025c4 <HAL_GPIO_Init>

	/*Configure GPIO pins : RELAY_ABSORB_Pin RELAY_CONVEYOR_Pin */
	GPIO_InitStruct.Pin = RELAY_ABSORB_Pin | RELAY_CONVEYOR_Pin;
 8001c4c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001c50:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c52:	2301      	movs	r3, #1
 8001c54:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c5e:	f107 0310 	add.w	r3, r7, #16
 8001c62:	4619      	mov	r1, r3
 8001c64:	4811      	ldr	r0, [pc, #68]	; (8001cac <MX_GPIO_Init+0x170>)
 8001c66:	f000 fcad 	bl	80025c4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	2007      	movs	r0, #7
 8001c70:	f000 fbbf 	bl	80023f2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001c74:	2007      	movs	r0, #7
 8001c76:	f000 fbd8 	bl	800242a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	200a      	movs	r0, #10
 8001c80:	f000 fbb7 	bl	80023f2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001c84:	200a      	movs	r0, #10
 8001c86:	f000 fbd0 	bl	800242a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	2017      	movs	r0, #23
 8001c90:	f000 fbaf 	bl	80023f2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c94:	2017      	movs	r0, #23
 8001c96:	f000 fbc8 	bl	800242a <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001c9a:	bf00      	nop
 8001c9c:	3720      	adds	r7, #32
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	40010800 	.word	0x40010800
 8001cac:	40010c00 	.word	0x40010c00
 8001cb0:	10110000 	.word	0x10110000
 8001cb4:	10210000 	.word	0x10210000

08001cb8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cbc:	b672      	cpsid	i
}
 8001cbe:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001cc0:	e7fe      	b.n	8001cc0 <Error_Handler+0x8>
	...

08001cc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cca:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <HAL_MspInit+0x5c>)
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	4a14      	ldr	r2, [pc, #80]	; (8001d20 <HAL_MspInit+0x5c>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6193      	str	r3, [r2, #24]
 8001cd6:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <HAL_MspInit+0x5c>)
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	60bb      	str	r3, [r7, #8]
 8001ce0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ce2:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <HAL_MspInit+0x5c>)
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	4a0e      	ldr	r2, [pc, #56]	; (8001d20 <HAL_MspInit+0x5c>)
 8001ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cec:	61d3      	str	r3, [r2, #28]
 8001cee:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <HAL_MspInit+0x5c>)
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf6:	607b      	str	r3, [r7, #4]
 8001cf8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cfa:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <HAL_MspInit+0x60>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	4a04      	ldr	r2, [pc, #16]	; (8001d24 <HAL_MspInit+0x60>)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d16:	bf00      	nop
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr
 8001d20:	40021000 	.word	0x40021000
 8001d24:	40010000 	.word	0x40010000

08001d28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d38:	d114      	bne.n	8001d64 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d3a:	4b19      	ldr	r3, [pc, #100]	; (8001da0 <HAL_TIM_Base_MspInit+0x78>)
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	4a18      	ldr	r2, [pc, #96]	; (8001da0 <HAL_TIM_Base_MspInit+0x78>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	61d3      	str	r3, [r2, #28]
 8001d46:	4b16      	ldr	r3, [pc, #88]	; (8001da0 <HAL_TIM_Base_MspInit+0x78>)
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d52:	2200      	movs	r2, #0
 8001d54:	2100      	movs	r1, #0
 8001d56:	201c      	movs	r0, #28
 8001d58:	f000 fb4b 	bl	80023f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d5c:	201c      	movs	r0, #28
 8001d5e:	f000 fb64 	bl	800242a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d62:	e018      	b.n	8001d96 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a0e      	ldr	r2, [pc, #56]	; (8001da4 <HAL_TIM_Base_MspInit+0x7c>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d113      	bne.n	8001d96 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d6e:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <HAL_TIM_Base_MspInit+0x78>)
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	4a0b      	ldr	r2, [pc, #44]	; (8001da0 <HAL_TIM_Base_MspInit+0x78>)
 8001d74:	f043 0302 	orr.w	r3, r3, #2
 8001d78:	61d3      	str	r3, [r2, #28]
 8001d7a:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <HAL_TIM_Base_MspInit+0x78>)
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	60bb      	str	r3, [r7, #8]
 8001d84:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d86:	2200      	movs	r2, #0
 8001d88:	2100      	movs	r1, #0
 8001d8a:	201d      	movs	r0, #29
 8001d8c:	f000 fb31 	bl	80023f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d90:	201d      	movs	r0, #29
 8001d92:	f000 fb4a 	bl	800242a <HAL_NVIC_EnableIRQ>
}
 8001d96:	bf00      	nop
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40000400 	.word	0x40000400

08001da8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08a      	sub	sp, #40	; 0x28
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dc6:	d118      	bne.n	8001dfa <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc8:	4b25      	ldr	r3, [pc, #148]	; (8001e60 <HAL_TIM_MspPostInit+0xb8>)
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	4a24      	ldr	r2, [pc, #144]	; (8001e60 <HAL_TIM_MspPostInit+0xb8>)
 8001dce:	f043 0304 	orr.w	r3, r3, #4
 8001dd2:	6193      	str	r3, [r2, #24]
 8001dd4:	4b22      	ldr	r3, [pc, #136]	; (8001e60 <HAL_TIM_MspPostInit+0xb8>)
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	613b      	str	r3, [r7, #16]
 8001dde:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001de0:	2307      	movs	r3, #7
 8001de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de4:	2302      	movs	r3, #2
 8001de6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de8:	2302      	movs	r3, #2
 8001dea:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	4619      	mov	r1, r3
 8001df2:	481c      	ldr	r0, [pc, #112]	; (8001e64 <HAL_TIM_MspPostInit+0xbc>)
 8001df4:	f000 fbe6 	bl	80025c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001df8:	e02e      	b.n	8001e58 <HAL_TIM_MspPostInit+0xb0>
  else if(htim->Instance==TIM3)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a1a      	ldr	r2, [pc, #104]	; (8001e68 <HAL_TIM_MspPostInit+0xc0>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d129      	bne.n	8001e58 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e04:	4b16      	ldr	r3, [pc, #88]	; (8001e60 <HAL_TIM_MspPostInit+0xb8>)
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	4a15      	ldr	r2, [pc, #84]	; (8001e60 <HAL_TIM_MspPostInit+0xb8>)
 8001e0a:	f043 0308 	orr.w	r3, r3, #8
 8001e0e:	6193      	str	r3, [r2, #24]
 8001e10:	4b13      	ldr	r3, [pc, #76]	; (8001e60 <HAL_TIM_MspPostInit+0xb8>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	f003 0308 	and.w	r3, r3, #8
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e1c:	2310      	movs	r3, #16
 8001e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e20:	2302      	movs	r3, #2
 8001e22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e24:	2302      	movs	r3, #2
 8001e26:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	480f      	ldr	r0, [pc, #60]	; (8001e6c <HAL_TIM_MspPostInit+0xc4>)
 8001e30:	f000 fbc8 	bl	80025c4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001e34:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <HAL_TIM_MspPostInit+0xc8>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
 8001e52:	4a07      	ldr	r2, [pc, #28]	; (8001e70 <HAL_TIM_MspPostInit+0xc8>)
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e56:	6053      	str	r3, [r2, #4]
}
 8001e58:	bf00      	nop
 8001e5a:	3728      	adds	r7, #40	; 0x28
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40010800 	.word	0x40010800
 8001e68:	40000400 	.word	0x40000400
 8001e6c:	40010c00 	.word	0x40010c00
 8001e70:	40010000 	.word	0x40010000

08001e74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b088      	sub	sp, #32
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7c:	f107 0310 	add.w	r3, r7, #16
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a20      	ldr	r2, [pc, #128]	; (8001f10 <HAL_UART_MspInit+0x9c>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d139      	bne.n	8001f08 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e94:	4b1f      	ldr	r3, [pc, #124]	; (8001f14 <HAL_UART_MspInit+0xa0>)
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	4a1e      	ldr	r2, [pc, #120]	; (8001f14 <HAL_UART_MspInit+0xa0>)
 8001e9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e9e:	6193      	str	r3, [r2, #24]
 8001ea0:	4b1c      	ldr	r3, [pc, #112]	; (8001f14 <HAL_UART_MspInit+0xa0>)
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eac:	4b19      	ldr	r3, [pc, #100]	; (8001f14 <HAL_UART_MspInit+0xa0>)
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	4a18      	ldr	r2, [pc, #96]	; (8001f14 <HAL_UART_MspInit+0xa0>)
 8001eb2:	f043 0304 	orr.w	r3, r3, #4
 8001eb6:	6193      	str	r3, [r2, #24]
 8001eb8:	4b16      	ldr	r3, [pc, #88]	; (8001f14 <HAL_UART_MspInit+0xa0>)
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ec4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ec8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed2:	f107 0310 	add.w	r3, r7, #16
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	480f      	ldr	r0, [pc, #60]	; (8001f18 <HAL_UART_MspInit+0xa4>)
 8001eda:	f000 fb73 	bl	80025c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ee2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eec:	f107 0310 	add.w	r3, r7, #16
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4809      	ldr	r0, [pc, #36]	; (8001f18 <HAL_UART_MspInit+0xa4>)
 8001ef4:	f000 fb66 	bl	80025c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ef8:	2200      	movs	r2, #0
 8001efa:	2100      	movs	r1, #0
 8001efc:	2025      	movs	r0, #37	; 0x25
 8001efe:	f000 fa78 	bl	80023f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f02:	2025      	movs	r0, #37	; 0x25
 8001f04:	f000 fa91 	bl	800242a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f08:	bf00      	nop
 8001f0a:	3720      	adds	r7, #32
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40013800 	.word	0x40013800
 8001f14:	40021000 	.word	0x40021000
 8001f18:	40010800 	.word	0x40010800

08001f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f20:	e7fe      	b.n	8001f20 <NMI_Handler+0x4>

08001f22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f26:	e7fe      	b.n	8001f26 <HardFault_Handler+0x4>

08001f28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f2c:	e7fe      	b.n	8001f2c <MemManage_Handler+0x4>

08001f2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f32:	e7fe      	b.n	8001f32 <BusFault_Handler+0x4>

08001f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f38:	e7fe      	b.n	8001f38 <UsageFault_Handler+0x4>

08001f3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr

08001f46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f46:	b480      	push	{r7}
 8001f48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr

08001f52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f52:	b480      	push	{r7}
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr

08001f5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f62:	f000 f92f 	bl	80021c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SIGY_Pin);
 8001f6e:	2002      	movs	r0, #2
 8001f70:	f000 fcc4 	bl	80028fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001f74:	bf00      	nop
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMSTOP_Pin);
 8001f7c:	2010      	movs	r0, #16
 8001f7e:	f000 fcbd 	bl	80028fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SIGX_Pin);
 8001f8a:	2080      	movs	r0, #128	; 0x80
 8001f8c:	f000 fcb6 	bl	80028fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SIGZ_Pin);
 8001f90:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001f94:	f000 fcb2 	bl	80028fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001f98:	bf00      	nop
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fa0:	4802      	ldr	r0, [pc, #8]	; (8001fac <TIM2_IRQHandler+0x10>)
 8001fa2:	f001 fc11 	bl	80037c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000158 	.word	0x20000158

08001fb0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001fb4:	4802      	ldr	r0, [pc, #8]	; (8001fc0 <TIM3_IRQHandler+0x10>)
 8001fb6:	f001 fc07 	bl	80037c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	200001a0 	.word	0x200001a0

08001fc4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001fc8:	4802      	ldr	r0, [pc, #8]	; (8001fd4 <USART1_IRQHandler+0x10>)
 8001fca:	f002 fabf 	bl	800454c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	200001e8 	.word	0x200001e8

08001fd8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]
 8001fe8:	e00a      	b.n	8002000 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fea:	f3af 8000 	nop.w
 8001fee:	4601      	mov	r1, r0
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	1c5a      	adds	r2, r3, #1
 8001ff4:	60ba      	str	r2, [r7, #8]
 8001ff6:	b2ca      	uxtb	r2, r1
 8001ff8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	617b      	str	r3, [r7, #20]
 8002000:	697a      	ldr	r2, [r7, #20]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	429a      	cmp	r2, r3
 8002006:	dbf0      	blt.n	8001fea <_read+0x12>
  }

  return len;
 8002008:	687b      	ldr	r3, [r7, #4]
}
 800200a:	4618      	mov	r0, r3
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800201a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800201e:	4618      	mov	r0, r3
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr

08002028 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002038:	605a      	str	r2, [r3, #4]
  return 0;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	bc80      	pop	{r7}
 8002044:	4770      	bx	lr

08002046 <_isatty>:

int _isatty(int file)
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800204e:	2301      	movs	r3, #1
}
 8002050:	4618      	mov	r0, r3
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr

0800205a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800205a:	b480      	push	{r7}
 800205c:	b085      	sub	sp, #20
 800205e:	af00      	add	r7, sp, #0
 8002060:	60f8      	str	r0, [r7, #12]
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3714      	adds	r7, #20
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr
	...

08002074 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800207c:	4a14      	ldr	r2, [pc, #80]	; (80020d0 <_sbrk+0x5c>)
 800207e:	4b15      	ldr	r3, [pc, #84]	; (80020d4 <_sbrk+0x60>)
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002088:	4b13      	ldr	r3, [pc, #76]	; (80020d8 <_sbrk+0x64>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d102      	bne.n	8002096 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002090:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <_sbrk+0x64>)
 8002092:	4a12      	ldr	r2, [pc, #72]	; (80020dc <_sbrk+0x68>)
 8002094:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002096:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <_sbrk+0x64>)
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4413      	add	r3, r2
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d207      	bcs.n	80020b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020a4:	f003 fa28 	bl	80054f8 <__errno>
 80020a8:	4603      	mov	r3, r0
 80020aa:	220c      	movs	r2, #12
 80020ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ae:	f04f 33ff 	mov.w	r3, #4294967295
 80020b2:	e009      	b.n	80020c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020b4:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <_sbrk+0x64>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ba:	4b07      	ldr	r3, [pc, #28]	; (80020d8 <_sbrk+0x64>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4413      	add	r3, r2
 80020c2:	4a05      	ldr	r2, [pc, #20]	; (80020d8 <_sbrk+0x64>)
 80020c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020c6:	68fb      	ldr	r3, [r7, #12]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	20005000 	.word	0x20005000
 80020d4:	00000400 	.word	0x00000400
 80020d8:	20000db4 	.word	0x20000db4
 80020dc:	20000f08 	.word	0x20000f08

080020e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr

080020ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020ec:	f7ff fff8 	bl	80020e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020f0:	480b      	ldr	r0, [pc, #44]	; (8002120 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80020f2:	490c      	ldr	r1, [pc, #48]	; (8002124 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80020f4:	4a0c      	ldr	r2, [pc, #48]	; (8002128 <LoopFillZerobss+0x16>)
  movs r3, #0
 80020f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020f8:	e002      	b.n	8002100 <LoopCopyDataInit>

080020fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020fe:	3304      	adds	r3, #4

08002100 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002100:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002102:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002104:	d3f9      	bcc.n	80020fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002106:	4a09      	ldr	r2, [pc, #36]	; (800212c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002108:	4c09      	ldr	r4, [pc, #36]	; (8002130 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800210a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800210c:	e001      	b.n	8002112 <LoopFillZerobss>

0800210e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800210e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002110:	3204      	adds	r2, #4

08002112 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002112:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002114:	d3fb      	bcc.n	800210e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002116:	f003 f9f5 	bl	8005504 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800211a:	f7ff fb05 	bl	8001728 <main>
  bx lr
 800211e:	4770      	bx	lr
  ldr r0, =_sdata
 8002120:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002124:	2000013c 	.word	0x2000013c
  ldr r2, =_sidata
 8002128:	08005b58 	.word	0x08005b58
  ldr r2, =_sbss
 800212c:	2000013c 	.word	0x2000013c
  ldr r4, =_ebss
 8002130:	20000f08 	.word	0x20000f08

08002134 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002134:	e7fe      	b.n	8002134 <ADC1_2_IRQHandler>
	...

08002138 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800213c:	4b08      	ldr	r3, [pc, #32]	; (8002160 <HAL_Init+0x28>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a07      	ldr	r2, [pc, #28]	; (8002160 <HAL_Init+0x28>)
 8002142:	f043 0310 	orr.w	r3, r3, #16
 8002146:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002148:	2003      	movs	r0, #3
 800214a:	f000 f947 	bl	80023dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800214e:	2000      	movs	r0, #0
 8002150:	f000 f808 	bl	8002164 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002154:	f7ff fdb6 	bl	8001cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40022000 	.word	0x40022000

08002164 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800216c:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <HAL_InitTick+0x54>)
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	4b12      	ldr	r3, [pc, #72]	; (80021bc <HAL_InitTick+0x58>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	4619      	mov	r1, r3
 8002176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800217a:	fbb3 f3f1 	udiv	r3, r3, r1
 800217e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002182:	4618      	mov	r0, r3
 8002184:	f000 f95f 	bl	8002446 <HAL_SYSTICK_Config>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e00e      	b.n	80021b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2b0f      	cmp	r3, #15
 8002196:	d80a      	bhi.n	80021ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002198:	2200      	movs	r2, #0
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	f04f 30ff 	mov.w	r0, #4294967295
 80021a0:	f000 f927 	bl	80023f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021a4:	4a06      	ldr	r2, [pc, #24]	; (80021c0 <HAL_InitTick+0x5c>)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
 80021ac:	e000      	b.n	80021b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	200000d4 	.word	0x200000d4
 80021bc:	200000dc 	.word	0x200000dc
 80021c0:	200000d8 	.word	0x200000d8

080021c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021c8:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <HAL_IncTick+0x1c>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	461a      	mov	r2, r3
 80021ce:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <HAL_IncTick+0x20>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4413      	add	r3, r2
 80021d4:	4a03      	ldr	r2, [pc, #12]	; (80021e4 <HAL_IncTick+0x20>)
 80021d6:	6013      	str	r3, [r2, #0]
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr
 80021e0:	200000dc 	.word	0x200000dc
 80021e4:	20000db8 	.word	0x20000db8

080021e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  return uwTick;
 80021ec:	4b02      	ldr	r3, [pc, #8]	; (80021f8 <HAL_GetTick+0x10>)
 80021ee:	681b      	ldr	r3, [r3, #0]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr
 80021f8:	20000db8 	.word	0x20000db8

080021fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002204:	f7ff fff0 	bl	80021e8 <HAL_GetTick>
 8002208:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002214:	d005      	beq.n	8002222 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002216:	4b0a      	ldr	r3, [pc, #40]	; (8002240 <HAL_Delay+0x44>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	461a      	mov	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4413      	add	r3, r2
 8002220:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002222:	bf00      	nop
 8002224:	f7ff ffe0 	bl	80021e8 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	429a      	cmp	r2, r3
 8002232:	d8f7      	bhi.n	8002224 <HAL_Delay+0x28>
  {
  }
}
 8002234:	bf00      	nop
 8002236:	bf00      	nop
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	200000dc 	.word	0x200000dc

08002244 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002254:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <__NVIC_SetPriorityGrouping+0x44>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002260:	4013      	ands	r3, r2
 8002262:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800226c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002274:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002276:	4a04      	ldr	r2, [pc, #16]	; (8002288 <__NVIC_SetPriorityGrouping+0x44>)
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	60d3      	str	r3, [r2, #12]
}
 800227c:	bf00      	nop
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	bc80      	pop	{r7}
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	e000ed00 	.word	0xe000ed00

0800228c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002290:	4b04      	ldr	r3, [pc, #16]	; (80022a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	0a1b      	lsrs	r3, r3, #8
 8002296:	f003 0307 	and.w	r3, r3, #7
}
 800229a:	4618      	mov	r0, r3
 800229c:	46bd      	mov	sp, r7
 800229e:	bc80      	pop	{r7}
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	db0b      	blt.n	80022d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	f003 021f 	and.w	r2, r3, #31
 80022c0:	4906      	ldr	r1, [pc, #24]	; (80022dc <__NVIC_EnableIRQ+0x34>)
 80022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c6:	095b      	lsrs	r3, r3, #5
 80022c8:	2001      	movs	r0, #1
 80022ca:	fa00 f202 	lsl.w	r2, r0, r2
 80022ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr
 80022dc:	e000e100 	.word	0xe000e100

080022e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	6039      	str	r1, [r7, #0]
 80022ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	db0a      	blt.n	800230a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	490c      	ldr	r1, [pc, #48]	; (800232c <__NVIC_SetPriority+0x4c>)
 80022fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fe:	0112      	lsls	r2, r2, #4
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	440b      	add	r3, r1
 8002304:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002308:	e00a      	b.n	8002320 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	b2da      	uxtb	r2, r3
 800230e:	4908      	ldr	r1, [pc, #32]	; (8002330 <__NVIC_SetPriority+0x50>)
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	3b04      	subs	r3, #4
 8002318:	0112      	lsls	r2, r2, #4
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	440b      	add	r3, r1
 800231e:	761a      	strb	r2, [r3, #24]
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	e000e100 	.word	0xe000e100
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002334:	b480      	push	{r7}
 8002336:	b089      	sub	sp, #36	; 0x24
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f1c3 0307 	rsb	r3, r3, #7
 800234e:	2b04      	cmp	r3, #4
 8002350:	bf28      	it	cs
 8002352:	2304      	movcs	r3, #4
 8002354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	3304      	adds	r3, #4
 800235a:	2b06      	cmp	r3, #6
 800235c:	d902      	bls.n	8002364 <NVIC_EncodePriority+0x30>
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	3b03      	subs	r3, #3
 8002362:	e000      	b.n	8002366 <NVIC_EncodePriority+0x32>
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002368:	f04f 32ff 	mov.w	r2, #4294967295
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43da      	mvns	r2, r3
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	401a      	ands	r2, r3
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800237c:	f04f 31ff 	mov.w	r1, #4294967295
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	fa01 f303 	lsl.w	r3, r1, r3
 8002386:	43d9      	mvns	r1, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800238c:	4313      	orrs	r3, r2
         );
}
 800238e:	4618      	mov	r0, r3
 8002390:	3724      	adds	r7, #36	; 0x24
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr

08002398 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023a8:	d301      	bcc.n	80023ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023aa:	2301      	movs	r3, #1
 80023ac:	e00f      	b.n	80023ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ae:	4a0a      	ldr	r2, [pc, #40]	; (80023d8 <SysTick_Config+0x40>)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023b6:	210f      	movs	r1, #15
 80023b8:	f04f 30ff 	mov.w	r0, #4294967295
 80023bc:	f7ff ff90 	bl	80022e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023c0:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <SysTick_Config+0x40>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023c6:	4b04      	ldr	r3, [pc, #16]	; (80023d8 <SysTick_Config+0x40>)
 80023c8:	2207      	movs	r2, #7
 80023ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	e000e010 	.word	0xe000e010

080023dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f7ff ff2d 	bl	8002244 <__NVIC_SetPriorityGrouping>
}
 80023ea:	bf00      	nop
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b086      	sub	sp, #24
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	4603      	mov	r3, r0
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
 80023fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002404:	f7ff ff42 	bl	800228c <__NVIC_GetPriorityGrouping>
 8002408:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	68b9      	ldr	r1, [r7, #8]
 800240e:	6978      	ldr	r0, [r7, #20]
 8002410:	f7ff ff90 	bl	8002334 <NVIC_EncodePriority>
 8002414:	4602      	mov	r2, r0
 8002416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800241a:	4611      	mov	r1, r2
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff ff5f 	bl	80022e0 <__NVIC_SetPriority>
}
 8002422:	bf00      	nop
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	4603      	mov	r3, r0
 8002432:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff ff35 	bl	80022a8 <__NVIC_EnableIRQ>
}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b082      	sub	sp, #8
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7ff ffa2 	bl	8002398 <SysTick_Config>
 8002454:	4603      	mov	r3, r0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800245e:	b480      	push	{r7}
 8002460:	b085      	sub	sp, #20
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002466:	2300      	movs	r3, #0
 8002468:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d008      	beq.n	8002488 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2204      	movs	r2, #4
 800247a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e020      	b.n	80024ca <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 020e 	bic.w	r2, r2, #14
 8002496:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 0201 	bic.w	r2, r2, #1
 80024a6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b0:	2101      	movs	r1, #1
 80024b2:	fa01 f202 	lsl.w	r2, r1, r2
 80024b6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3714      	adds	r7, #20
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bc80      	pop	{r7}
 80024d2:	4770      	bx	lr

080024d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024dc:	2300      	movs	r3, #0
 80024de:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d005      	beq.n	80024f8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2204      	movs	r2, #4
 80024f0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	73fb      	strb	r3, [r7, #15]
 80024f6:	e051      	b.n	800259c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 020e 	bic.w	r2, r2, #14
 8002506:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0201 	bic.w	r2, r2, #1
 8002516:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a22      	ldr	r2, [pc, #136]	; (80025a8 <HAL_DMA_Abort_IT+0xd4>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d029      	beq.n	8002576 <HAL_DMA_Abort_IT+0xa2>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a21      	ldr	r2, [pc, #132]	; (80025ac <HAL_DMA_Abort_IT+0xd8>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d022      	beq.n	8002572 <HAL_DMA_Abort_IT+0x9e>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a1f      	ldr	r2, [pc, #124]	; (80025b0 <HAL_DMA_Abort_IT+0xdc>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d01a      	beq.n	800256c <HAL_DMA_Abort_IT+0x98>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a1e      	ldr	r2, [pc, #120]	; (80025b4 <HAL_DMA_Abort_IT+0xe0>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d012      	beq.n	8002566 <HAL_DMA_Abort_IT+0x92>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a1c      	ldr	r2, [pc, #112]	; (80025b8 <HAL_DMA_Abort_IT+0xe4>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d00a      	beq.n	8002560 <HAL_DMA_Abort_IT+0x8c>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a1b      	ldr	r2, [pc, #108]	; (80025bc <HAL_DMA_Abort_IT+0xe8>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d102      	bne.n	800255a <HAL_DMA_Abort_IT+0x86>
 8002554:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002558:	e00e      	b.n	8002578 <HAL_DMA_Abort_IT+0xa4>
 800255a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800255e:	e00b      	b.n	8002578 <HAL_DMA_Abort_IT+0xa4>
 8002560:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002564:	e008      	b.n	8002578 <HAL_DMA_Abort_IT+0xa4>
 8002566:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800256a:	e005      	b.n	8002578 <HAL_DMA_Abort_IT+0xa4>
 800256c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002570:	e002      	b.n	8002578 <HAL_DMA_Abort_IT+0xa4>
 8002572:	2310      	movs	r3, #16
 8002574:	e000      	b.n	8002578 <HAL_DMA_Abort_IT+0xa4>
 8002576:	2301      	movs	r3, #1
 8002578:	4a11      	ldr	r2, [pc, #68]	; (80025c0 <HAL_DMA_Abort_IT+0xec>)
 800257a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002590:	2b00      	cmp	r3, #0
 8002592:	d003      	beq.n	800259c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	4798      	blx	r3
    } 
  }
  return status;
 800259c:	7bfb      	ldrb	r3, [r7, #15]
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40020008 	.word	0x40020008
 80025ac:	4002001c 	.word	0x4002001c
 80025b0:	40020030 	.word	0x40020030
 80025b4:	40020044 	.word	0x40020044
 80025b8:	40020058 	.word	0x40020058
 80025bc:	4002006c 	.word	0x4002006c
 80025c0:	40020000 	.word	0x40020000

080025c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b08b      	sub	sp, #44	; 0x2c
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025ce:	2300      	movs	r3, #0
 80025d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025d2:	2300      	movs	r3, #0
 80025d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025d6:	e169      	b.n	80028ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025d8:	2201      	movs	r2, #1
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	69fa      	ldr	r2, [r7, #28]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	f040 8158 	bne.w	80028a6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	4a9a      	ldr	r2, [pc, #616]	; (8002864 <HAL_GPIO_Init+0x2a0>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d05e      	beq.n	80026be <HAL_GPIO_Init+0xfa>
 8002600:	4a98      	ldr	r2, [pc, #608]	; (8002864 <HAL_GPIO_Init+0x2a0>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d875      	bhi.n	80026f2 <HAL_GPIO_Init+0x12e>
 8002606:	4a98      	ldr	r2, [pc, #608]	; (8002868 <HAL_GPIO_Init+0x2a4>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d058      	beq.n	80026be <HAL_GPIO_Init+0xfa>
 800260c:	4a96      	ldr	r2, [pc, #600]	; (8002868 <HAL_GPIO_Init+0x2a4>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d86f      	bhi.n	80026f2 <HAL_GPIO_Init+0x12e>
 8002612:	4a96      	ldr	r2, [pc, #600]	; (800286c <HAL_GPIO_Init+0x2a8>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d052      	beq.n	80026be <HAL_GPIO_Init+0xfa>
 8002618:	4a94      	ldr	r2, [pc, #592]	; (800286c <HAL_GPIO_Init+0x2a8>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d869      	bhi.n	80026f2 <HAL_GPIO_Init+0x12e>
 800261e:	4a94      	ldr	r2, [pc, #592]	; (8002870 <HAL_GPIO_Init+0x2ac>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d04c      	beq.n	80026be <HAL_GPIO_Init+0xfa>
 8002624:	4a92      	ldr	r2, [pc, #584]	; (8002870 <HAL_GPIO_Init+0x2ac>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d863      	bhi.n	80026f2 <HAL_GPIO_Init+0x12e>
 800262a:	4a92      	ldr	r2, [pc, #584]	; (8002874 <HAL_GPIO_Init+0x2b0>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d046      	beq.n	80026be <HAL_GPIO_Init+0xfa>
 8002630:	4a90      	ldr	r2, [pc, #576]	; (8002874 <HAL_GPIO_Init+0x2b0>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d85d      	bhi.n	80026f2 <HAL_GPIO_Init+0x12e>
 8002636:	2b12      	cmp	r3, #18
 8002638:	d82a      	bhi.n	8002690 <HAL_GPIO_Init+0xcc>
 800263a:	2b12      	cmp	r3, #18
 800263c:	d859      	bhi.n	80026f2 <HAL_GPIO_Init+0x12e>
 800263e:	a201      	add	r2, pc, #4	; (adr r2, 8002644 <HAL_GPIO_Init+0x80>)
 8002640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002644:	080026bf 	.word	0x080026bf
 8002648:	08002699 	.word	0x08002699
 800264c:	080026ab 	.word	0x080026ab
 8002650:	080026ed 	.word	0x080026ed
 8002654:	080026f3 	.word	0x080026f3
 8002658:	080026f3 	.word	0x080026f3
 800265c:	080026f3 	.word	0x080026f3
 8002660:	080026f3 	.word	0x080026f3
 8002664:	080026f3 	.word	0x080026f3
 8002668:	080026f3 	.word	0x080026f3
 800266c:	080026f3 	.word	0x080026f3
 8002670:	080026f3 	.word	0x080026f3
 8002674:	080026f3 	.word	0x080026f3
 8002678:	080026f3 	.word	0x080026f3
 800267c:	080026f3 	.word	0x080026f3
 8002680:	080026f3 	.word	0x080026f3
 8002684:	080026f3 	.word	0x080026f3
 8002688:	080026a1 	.word	0x080026a1
 800268c:	080026b5 	.word	0x080026b5
 8002690:	4a79      	ldr	r2, [pc, #484]	; (8002878 <HAL_GPIO_Init+0x2b4>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d013      	beq.n	80026be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002696:	e02c      	b.n	80026f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	623b      	str	r3, [r7, #32]
          break;
 800269e:	e029      	b.n	80026f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	3304      	adds	r3, #4
 80026a6:	623b      	str	r3, [r7, #32]
          break;
 80026a8:	e024      	b.n	80026f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	3308      	adds	r3, #8
 80026b0:	623b      	str	r3, [r7, #32]
          break;
 80026b2:	e01f      	b.n	80026f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	330c      	adds	r3, #12
 80026ba:	623b      	str	r3, [r7, #32]
          break;
 80026bc:	e01a      	b.n	80026f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d102      	bne.n	80026cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026c6:	2304      	movs	r3, #4
 80026c8:	623b      	str	r3, [r7, #32]
          break;
 80026ca:	e013      	b.n	80026f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d105      	bne.n	80026e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026d4:	2308      	movs	r3, #8
 80026d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	69fa      	ldr	r2, [r7, #28]
 80026dc:	611a      	str	r2, [r3, #16]
          break;
 80026de:	e009      	b.n	80026f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026e0:	2308      	movs	r3, #8
 80026e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	69fa      	ldr	r2, [r7, #28]
 80026e8:	615a      	str	r2, [r3, #20]
          break;
 80026ea:	e003      	b.n	80026f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026ec:	2300      	movs	r3, #0
 80026ee:	623b      	str	r3, [r7, #32]
          break;
 80026f0:	e000      	b.n	80026f4 <HAL_GPIO_Init+0x130>
          break;
 80026f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	2bff      	cmp	r3, #255	; 0xff
 80026f8:	d801      	bhi.n	80026fe <HAL_GPIO_Init+0x13a>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	e001      	b.n	8002702 <HAL_GPIO_Init+0x13e>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	3304      	adds	r3, #4
 8002702:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	2bff      	cmp	r3, #255	; 0xff
 8002708:	d802      	bhi.n	8002710 <HAL_GPIO_Init+0x14c>
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	e002      	b.n	8002716 <HAL_GPIO_Init+0x152>
 8002710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002712:	3b08      	subs	r3, #8
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	210f      	movs	r1, #15
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	fa01 f303 	lsl.w	r3, r1, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	401a      	ands	r2, r3
 8002728:	6a39      	ldr	r1, [r7, #32]
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	fa01 f303 	lsl.w	r3, r1, r3
 8002730:	431a      	orrs	r2, r3
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 80b1 	beq.w	80028a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002744:	4b4d      	ldr	r3, [pc, #308]	; (800287c <HAL_GPIO_Init+0x2b8>)
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	4a4c      	ldr	r2, [pc, #304]	; (800287c <HAL_GPIO_Init+0x2b8>)
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	6193      	str	r3, [r2, #24]
 8002750:	4b4a      	ldr	r3, [pc, #296]	; (800287c <HAL_GPIO_Init+0x2b8>)
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	60bb      	str	r3, [r7, #8]
 800275a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800275c:	4a48      	ldr	r2, [pc, #288]	; (8002880 <HAL_GPIO_Init+0x2bc>)
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	089b      	lsrs	r3, r3, #2
 8002762:	3302      	adds	r3, #2
 8002764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002768:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	220f      	movs	r2, #15
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	43db      	mvns	r3, r3
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	4013      	ands	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a40      	ldr	r2, [pc, #256]	; (8002884 <HAL_GPIO_Init+0x2c0>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d013      	beq.n	80027b0 <HAL_GPIO_Init+0x1ec>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a3f      	ldr	r2, [pc, #252]	; (8002888 <HAL_GPIO_Init+0x2c4>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d00d      	beq.n	80027ac <HAL_GPIO_Init+0x1e8>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a3e      	ldr	r2, [pc, #248]	; (800288c <HAL_GPIO_Init+0x2c8>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d007      	beq.n	80027a8 <HAL_GPIO_Init+0x1e4>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a3d      	ldr	r2, [pc, #244]	; (8002890 <HAL_GPIO_Init+0x2cc>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d101      	bne.n	80027a4 <HAL_GPIO_Init+0x1e0>
 80027a0:	2303      	movs	r3, #3
 80027a2:	e006      	b.n	80027b2 <HAL_GPIO_Init+0x1ee>
 80027a4:	2304      	movs	r3, #4
 80027a6:	e004      	b.n	80027b2 <HAL_GPIO_Init+0x1ee>
 80027a8:	2302      	movs	r3, #2
 80027aa:	e002      	b.n	80027b2 <HAL_GPIO_Init+0x1ee>
 80027ac:	2301      	movs	r3, #1
 80027ae:	e000      	b.n	80027b2 <HAL_GPIO_Init+0x1ee>
 80027b0:	2300      	movs	r3, #0
 80027b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b4:	f002 0203 	and.w	r2, r2, #3
 80027b8:	0092      	lsls	r2, r2, #2
 80027ba:	4093      	lsls	r3, r2
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	4313      	orrs	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027c2:	492f      	ldr	r1, [pc, #188]	; (8002880 <HAL_GPIO_Init+0x2bc>)
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	089b      	lsrs	r3, r3, #2
 80027c8:	3302      	adds	r3, #2
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d006      	beq.n	80027ea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027dc:	4b2d      	ldr	r3, [pc, #180]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	492c      	ldr	r1, [pc, #176]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	608b      	str	r3, [r1, #8]
 80027e8:	e006      	b.n	80027f8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027ea:	4b2a      	ldr	r3, [pc, #168]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 80027ec:	689a      	ldr	r2, [r3, #8]
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	43db      	mvns	r3, r3
 80027f2:	4928      	ldr	r1, [pc, #160]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 80027f4:	4013      	ands	r3, r2
 80027f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d006      	beq.n	8002812 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002804:	4b23      	ldr	r3, [pc, #140]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 8002806:	68da      	ldr	r2, [r3, #12]
 8002808:	4922      	ldr	r1, [pc, #136]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	4313      	orrs	r3, r2
 800280e:	60cb      	str	r3, [r1, #12]
 8002810:	e006      	b.n	8002820 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002812:	4b20      	ldr	r3, [pc, #128]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	43db      	mvns	r3, r3
 800281a:	491e      	ldr	r1, [pc, #120]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 800281c:	4013      	ands	r3, r2
 800281e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d006      	beq.n	800283a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800282c:	4b19      	ldr	r3, [pc, #100]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 800282e:	685a      	ldr	r2, [r3, #4]
 8002830:	4918      	ldr	r1, [pc, #96]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	4313      	orrs	r3, r2
 8002836:	604b      	str	r3, [r1, #4]
 8002838:	e006      	b.n	8002848 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800283a:	4b16      	ldr	r3, [pc, #88]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	43db      	mvns	r3, r3
 8002842:	4914      	ldr	r1, [pc, #80]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 8002844:	4013      	ands	r3, r2
 8002846:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d021      	beq.n	8002898 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002854:	4b0f      	ldr	r3, [pc, #60]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	490e      	ldr	r1, [pc, #56]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	4313      	orrs	r3, r2
 800285e:	600b      	str	r3, [r1, #0]
 8002860:	e021      	b.n	80028a6 <HAL_GPIO_Init+0x2e2>
 8002862:	bf00      	nop
 8002864:	10320000 	.word	0x10320000
 8002868:	10310000 	.word	0x10310000
 800286c:	10220000 	.word	0x10220000
 8002870:	10210000 	.word	0x10210000
 8002874:	10120000 	.word	0x10120000
 8002878:	10110000 	.word	0x10110000
 800287c:	40021000 	.word	0x40021000
 8002880:	40010000 	.word	0x40010000
 8002884:	40010800 	.word	0x40010800
 8002888:	40010c00 	.word	0x40010c00
 800288c:	40011000 	.word	0x40011000
 8002890:	40011400 	.word	0x40011400
 8002894:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <HAL_GPIO_Init+0x304>)
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	43db      	mvns	r3, r3
 80028a0:	4909      	ldr	r1, [pc, #36]	; (80028c8 <HAL_GPIO_Init+0x304>)
 80028a2:	4013      	ands	r3, r2
 80028a4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	3301      	adds	r3, #1
 80028aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	fa22 f303 	lsr.w	r3, r2, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f47f ae8e 	bne.w	80025d8 <HAL_GPIO_Init+0x14>
  }
}
 80028bc:	bf00      	nop
 80028be:	bf00      	nop
 80028c0:	372c      	adds	r7, #44	; 0x2c
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr
 80028c8:	40010400 	.word	0x40010400

080028cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	807b      	strh	r3, [r7, #2]
 80028d8:	4613      	mov	r3, r2
 80028da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028dc:	787b      	ldrb	r3, [r7, #1]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028e2:	887a      	ldrh	r2, [r7, #2]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028e8:	e003      	b.n	80028f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028ea:	887b      	ldrh	r3, [r7, #2]
 80028ec:	041a      	lsls	r2, r3, #16
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	611a      	str	r2, [r3, #16]
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr

080028fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002906:	4b08      	ldr	r3, [pc, #32]	; (8002928 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002908:	695a      	ldr	r2, [r3, #20]
 800290a:	88fb      	ldrh	r3, [r7, #6]
 800290c:	4013      	ands	r3, r2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d006      	beq.n	8002920 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002912:	4a05      	ldr	r2, [pc, #20]	; (8002928 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002914:	88fb      	ldrh	r3, [r7, #6]
 8002916:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002918:	88fb      	ldrh	r3, [r7, #6]
 800291a:	4618      	mov	r0, r3
 800291c:	f7fe f952 	bl	8000bc4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002920:	bf00      	nop
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40010400 	.word	0x40010400

0800292c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e272      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	f000 8087 	beq.w	8002a5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800294c:	4b92      	ldr	r3, [pc, #584]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 030c 	and.w	r3, r3, #12
 8002954:	2b04      	cmp	r3, #4
 8002956:	d00c      	beq.n	8002972 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002958:	4b8f      	ldr	r3, [pc, #572]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 030c 	and.w	r3, r3, #12
 8002960:	2b08      	cmp	r3, #8
 8002962:	d112      	bne.n	800298a <HAL_RCC_OscConfig+0x5e>
 8002964:	4b8c      	ldr	r3, [pc, #560]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800296c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002970:	d10b      	bne.n	800298a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002972:	4b89      	ldr	r3, [pc, #548]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d06c      	beq.n	8002a58 <HAL_RCC_OscConfig+0x12c>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d168      	bne.n	8002a58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e24c      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002992:	d106      	bne.n	80029a2 <HAL_RCC_OscConfig+0x76>
 8002994:	4b80      	ldr	r3, [pc, #512]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a7f      	ldr	r2, [pc, #508]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 800299a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800299e:	6013      	str	r3, [r2, #0]
 80029a0:	e02e      	b.n	8002a00 <HAL_RCC_OscConfig+0xd4>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10c      	bne.n	80029c4 <HAL_RCC_OscConfig+0x98>
 80029aa:	4b7b      	ldr	r3, [pc, #492]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a7a      	ldr	r2, [pc, #488]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	4b78      	ldr	r3, [pc, #480]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a77      	ldr	r2, [pc, #476]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	e01d      	b.n	8002a00 <HAL_RCC_OscConfig+0xd4>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029cc:	d10c      	bne.n	80029e8 <HAL_RCC_OscConfig+0xbc>
 80029ce:	4b72      	ldr	r3, [pc, #456]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a71      	ldr	r2, [pc, #452]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	4b6f      	ldr	r3, [pc, #444]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a6e      	ldr	r2, [pc, #440]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	e00b      	b.n	8002a00 <HAL_RCC_OscConfig+0xd4>
 80029e8:	4b6b      	ldr	r3, [pc, #428]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a6a      	ldr	r2, [pc, #424]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029f2:	6013      	str	r3, [r2, #0]
 80029f4:	4b68      	ldr	r3, [pc, #416]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a67      	ldr	r2, [pc, #412]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d013      	beq.n	8002a30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a08:	f7ff fbee 	bl	80021e8 <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a10:	f7ff fbea 	bl	80021e8 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b64      	cmp	r3, #100	; 0x64
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e200      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a22:	4b5d      	ldr	r3, [pc, #372]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d0f0      	beq.n	8002a10 <HAL_RCC_OscConfig+0xe4>
 8002a2e:	e014      	b.n	8002a5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a30:	f7ff fbda 	bl	80021e8 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a38:	f7ff fbd6 	bl	80021e8 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b64      	cmp	r3, #100	; 0x64
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e1ec      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a4a:	4b53      	ldr	r3, [pc, #332]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCC_OscConfig+0x10c>
 8002a56:	e000      	b.n	8002a5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d063      	beq.n	8002b2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a66:	4b4c      	ldr	r3, [pc, #304]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f003 030c 	and.w	r3, r3, #12
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00b      	beq.n	8002a8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a72:	4b49      	ldr	r3, [pc, #292]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f003 030c 	and.w	r3, r3, #12
 8002a7a:	2b08      	cmp	r3, #8
 8002a7c:	d11c      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x18c>
 8002a7e:	4b46      	ldr	r3, [pc, #280]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d116      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a8a:	4b43      	ldr	r3, [pc, #268]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d005      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x176>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d001      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e1c0      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa2:	4b3d      	ldr	r3, [pc, #244]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	4939      	ldr	r1, [pc, #228]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ab6:	e03a      	b.n	8002b2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d020      	beq.n	8002b02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ac0:	4b36      	ldr	r3, [pc, #216]	; (8002b9c <HAL_RCC_OscConfig+0x270>)
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac6:	f7ff fb8f 	bl	80021e8 <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ace:	f7ff fb8b 	bl	80021e8 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e1a1      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae0:	4b2d      	ldr	r3, [pc, #180]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0f0      	beq.n	8002ace <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aec:	4b2a      	ldr	r3, [pc, #168]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	4927      	ldr	r1, [pc, #156]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	600b      	str	r3, [r1, #0]
 8002b00:	e015      	b.n	8002b2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b02:	4b26      	ldr	r3, [pc, #152]	; (8002b9c <HAL_RCC_OscConfig+0x270>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b08:	f7ff fb6e 	bl	80021e8 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b10:	f7ff fb6a 	bl	80021e8 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e180      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b22:	4b1d      	ldr	r3, [pc, #116]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f0      	bne.n	8002b10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d03a      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d019      	beq.n	8002b76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b42:	4b17      	ldr	r3, [pc, #92]	; (8002ba0 <HAL_RCC_OscConfig+0x274>)
 8002b44:	2201      	movs	r2, #1
 8002b46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b48:	f7ff fb4e 	bl	80021e8 <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b50:	f7ff fb4a 	bl	80021e8 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e160      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b62:	4b0d      	ldr	r3, [pc, #52]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0f0      	beq.n	8002b50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b6e:	2001      	movs	r0, #1
 8002b70:	f000 face 	bl	8003110 <RCC_Delay>
 8002b74:	e01c      	b.n	8002bb0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b76:	4b0a      	ldr	r3, [pc, #40]	; (8002ba0 <HAL_RCC_OscConfig+0x274>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b7c:	f7ff fb34 	bl	80021e8 <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b82:	e00f      	b.n	8002ba4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b84:	f7ff fb30 	bl	80021e8 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d908      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e146      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
 8002b96:	bf00      	nop
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	42420000 	.word	0x42420000
 8002ba0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba4:	4b92      	ldr	r3, [pc, #584]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1e9      	bne.n	8002b84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 80a6 	beq.w	8002d0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bc2:	4b8b      	ldr	r3, [pc, #556]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10d      	bne.n	8002bea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bce:	4b88      	ldr	r3, [pc, #544]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	4a87      	ldr	r2, [pc, #540]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bd8:	61d3      	str	r3, [r2, #28]
 8002bda:	4b85      	ldr	r3, [pc, #532]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be2:	60bb      	str	r3, [r7, #8]
 8002be4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002be6:	2301      	movs	r3, #1
 8002be8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bea:	4b82      	ldr	r3, [pc, #520]	; (8002df4 <HAL_RCC_OscConfig+0x4c8>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d118      	bne.n	8002c28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bf6:	4b7f      	ldr	r3, [pc, #508]	; (8002df4 <HAL_RCC_OscConfig+0x4c8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a7e      	ldr	r2, [pc, #504]	; (8002df4 <HAL_RCC_OscConfig+0x4c8>)
 8002bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c02:	f7ff faf1 	bl	80021e8 <HAL_GetTick>
 8002c06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c08:	e008      	b.n	8002c1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c0a:	f7ff faed 	bl	80021e8 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b64      	cmp	r3, #100	; 0x64
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e103      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1c:	4b75      	ldr	r3, [pc, #468]	; (8002df4 <HAL_RCC_OscConfig+0x4c8>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d0f0      	beq.n	8002c0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d106      	bne.n	8002c3e <HAL_RCC_OscConfig+0x312>
 8002c30:	4b6f      	ldr	r3, [pc, #444]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	4a6e      	ldr	r2, [pc, #440]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c36:	f043 0301 	orr.w	r3, r3, #1
 8002c3a:	6213      	str	r3, [r2, #32]
 8002c3c:	e02d      	b.n	8002c9a <HAL_RCC_OscConfig+0x36e>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10c      	bne.n	8002c60 <HAL_RCC_OscConfig+0x334>
 8002c46:	4b6a      	ldr	r3, [pc, #424]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	4a69      	ldr	r2, [pc, #420]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c4c:	f023 0301 	bic.w	r3, r3, #1
 8002c50:	6213      	str	r3, [r2, #32]
 8002c52:	4b67      	ldr	r3, [pc, #412]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	4a66      	ldr	r2, [pc, #408]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c58:	f023 0304 	bic.w	r3, r3, #4
 8002c5c:	6213      	str	r3, [r2, #32]
 8002c5e:	e01c      	b.n	8002c9a <HAL_RCC_OscConfig+0x36e>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	2b05      	cmp	r3, #5
 8002c66:	d10c      	bne.n	8002c82 <HAL_RCC_OscConfig+0x356>
 8002c68:	4b61      	ldr	r3, [pc, #388]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	4a60      	ldr	r2, [pc, #384]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c6e:	f043 0304 	orr.w	r3, r3, #4
 8002c72:	6213      	str	r3, [r2, #32]
 8002c74:	4b5e      	ldr	r3, [pc, #376]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	4a5d      	ldr	r2, [pc, #372]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c7a:	f043 0301 	orr.w	r3, r3, #1
 8002c7e:	6213      	str	r3, [r2, #32]
 8002c80:	e00b      	b.n	8002c9a <HAL_RCC_OscConfig+0x36e>
 8002c82:	4b5b      	ldr	r3, [pc, #364]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	4a5a      	ldr	r2, [pc, #360]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c88:	f023 0301 	bic.w	r3, r3, #1
 8002c8c:	6213      	str	r3, [r2, #32]
 8002c8e:	4b58      	ldr	r3, [pc, #352]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	4a57      	ldr	r2, [pc, #348]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c94:	f023 0304 	bic.w	r3, r3, #4
 8002c98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d015      	beq.n	8002cce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ca2:	f7ff faa1 	bl	80021e8 <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca8:	e00a      	b.n	8002cc0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002caa:	f7ff fa9d 	bl	80021e8 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e0b1      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc0:	4b4b      	ldr	r3, [pc, #300]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0ee      	beq.n	8002caa <HAL_RCC_OscConfig+0x37e>
 8002ccc:	e014      	b.n	8002cf8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cce:	f7ff fa8b 	bl	80021e8 <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd4:	e00a      	b.n	8002cec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd6:	f7ff fa87 	bl	80021e8 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e09b      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cec:	4b40      	ldr	r3, [pc, #256]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1ee      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cf8:	7dfb      	ldrb	r3, [r7, #23]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d105      	bne.n	8002d0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cfe:	4b3c      	ldr	r3, [pc, #240]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	4a3b      	ldr	r2, [pc, #236]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 8087 	beq.w	8002e22 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d14:	4b36      	ldr	r3, [pc, #216]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f003 030c 	and.w	r3, r3, #12
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	d061      	beq.n	8002de4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d146      	bne.n	8002db6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d28:	4b33      	ldr	r3, [pc, #204]	; (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2e:	f7ff fa5b 	bl	80021e8 <HAL_GetTick>
 8002d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d34:	e008      	b.n	8002d48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d36:	f7ff fa57 	bl	80021e8 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e06d      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d48:	4b29      	ldr	r3, [pc, #164]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1f0      	bne.n	8002d36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d5c:	d108      	bne.n	8002d70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d5e:	4b24      	ldr	r3, [pc, #144]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	4921      	ldr	r1, [pc, #132]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d70:	4b1f      	ldr	r3, [pc, #124]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a19      	ldr	r1, [r3, #32]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	430b      	orrs	r3, r1
 8002d82:	491b      	ldr	r1, [pc, #108]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d88:	4b1b      	ldr	r3, [pc, #108]	; (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8e:	f7ff fa2b 	bl	80021e8 <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d96:	f7ff fa27 	bl	80021e8 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e03d      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002da8:	4b11      	ldr	r3, [pc, #68]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0f0      	beq.n	8002d96 <HAL_RCC_OscConfig+0x46a>
 8002db4:	e035      	b.n	8002e22 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db6:	4b10      	ldr	r3, [pc, #64]	; (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dbc:	f7ff fa14 	bl	80021e8 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc4:	f7ff fa10 	bl	80021e8 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e026      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dd6:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f0      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x498>
 8002de2:	e01e      	b.n	8002e22 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	69db      	ldr	r3, [r3, #28]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d107      	bne.n	8002dfc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e019      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
 8002df0:	40021000 	.word	0x40021000
 8002df4:	40007000 	.word	0x40007000
 8002df8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002dfc:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <HAL_RCC_OscConfig+0x500>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d106      	bne.n	8002e1e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d001      	beq.n	8002e22 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e000      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40021000 	.word	0x40021000

08002e30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e0d0      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e44:	4b6a      	ldr	r3, [pc, #424]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d910      	bls.n	8002e74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e52:	4b67      	ldr	r3, [pc, #412]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f023 0207 	bic.w	r2, r3, #7
 8002e5a:	4965      	ldr	r1, [pc, #404]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e62:	4b63      	ldr	r3, [pc, #396]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d001      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0b8      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d020      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d005      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e8c:	4b59      	ldr	r3, [pc, #356]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	4a58      	ldr	r2, [pc, #352]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0308 	and.w	r3, r3, #8
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d005      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ea4:	4b53      	ldr	r3, [pc, #332]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	4a52      	ldr	r2, [pc, #328]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002eaa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002eae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eb0:	4b50      	ldr	r3, [pc, #320]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	494d      	ldr	r1, [pc, #308]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d040      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d107      	bne.n	8002ee6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed6:	4b47      	ldr	r3, [pc, #284]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d115      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e07f      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d107      	bne.n	8002efe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eee:	4b41      	ldr	r3, [pc, #260]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d109      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e073      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002efe:	4b3d      	ldr	r3, [pc, #244]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e06b      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f0e:	4b39      	ldr	r3, [pc, #228]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f023 0203 	bic.w	r2, r3, #3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	4936      	ldr	r1, [pc, #216]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f20:	f7ff f962 	bl	80021e8 <HAL_GetTick>
 8002f24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f26:	e00a      	b.n	8002f3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f28:	f7ff f95e 	bl	80021e8 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e053      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3e:	4b2d      	ldr	r3, [pc, #180]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f003 020c 	and.w	r2, r3, #12
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d1eb      	bne.n	8002f28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f50:	4b27      	ldr	r3, [pc, #156]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d210      	bcs.n	8002f80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5e:	4b24      	ldr	r3, [pc, #144]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f023 0207 	bic.w	r2, r3, #7
 8002f66:	4922      	ldr	r1, [pc, #136]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6e:	4b20      	ldr	r3, [pc, #128]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0307 	and.w	r3, r3, #7
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d001      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e032      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d008      	beq.n	8002f9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f8c:	4b19      	ldr	r3, [pc, #100]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	4916      	ldr	r1, [pc, #88]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d009      	beq.n	8002fbe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002faa:	4b12      	ldr	r3, [pc, #72]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	490e      	ldr	r1, [pc, #56]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fbe:	f000 f821 	bl	8003004 <HAL_RCC_GetSysClockFreq>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	091b      	lsrs	r3, r3, #4
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	490a      	ldr	r1, [pc, #40]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fd0:	5ccb      	ldrb	r3, [r1, r3]
 8002fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd6:	4a09      	ldr	r2, [pc, #36]	; (8002ffc <HAL_RCC_ClockConfig+0x1cc>)
 8002fd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fda:	4b09      	ldr	r3, [pc, #36]	; (8003000 <HAL_RCC_ClockConfig+0x1d0>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff f8c0 	bl	8002164 <HAL_InitTick>

  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40022000 	.word	0x40022000
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	08005b24 	.word	0x08005b24
 8002ffc:	200000d4 	.word	0x200000d4
 8003000:	200000d8 	.word	0x200000d8

08003004 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003004:	b480      	push	{r7}
 8003006:	b087      	sub	sp, #28
 8003008:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800300a:	2300      	movs	r3, #0
 800300c:	60fb      	str	r3, [r7, #12]
 800300e:	2300      	movs	r3, #0
 8003010:	60bb      	str	r3, [r7, #8]
 8003012:	2300      	movs	r3, #0
 8003014:	617b      	str	r3, [r7, #20]
 8003016:	2300      	movs	r3, #0
 8003018:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800301a:	2300      	movs	r3, #0
 800301c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800301e:	4b1e      	ldr	r3, [pc, #120]	; (8003098 <HAL_RCC_GetSysClockFreq+0x94>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f003 030c 	and.w	r3, r3, #12
 800302a:	2b04      	cmp	r3, #4
 800302c:	d002      	beq.n	8003034 <HAL_RCC_GetSysClockFreq+0x30>
 800302e:	2b08      	cmp	r3, #8
 8003030:	d003      	beq.n	800303a <HAL_RCC_GetSysClockFreq+0x36>
 8003032:	e027      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003034:	4b19      	ldr	r3, [pc, #100]	; (800309c <HAL_RCC_GetSysClockFreq+0x98>)
 8003036:	613b      	str	r3, [r7, #16]
      break;
 8003038:	e027      	b.n	800308a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	0c9b      	lsrs	r3, r3, #18
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	4a17      	ldr	r2, [pc, #92]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003044:	5cd3      	ldrb	r3, [r2, r3]
 8003046:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d010      	beq.n	8003074 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003052:	4b11      	ldr	r3, [pc, #68]	; (8003098 <HAL_RCC_GetSysClockFreq+0x94>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	0c5b      	lsrs	r3, r3, #17
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	4a11      	ldr	r2, [pc, #68]	; (80030a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800305e:	5cd3      	ldrb	r3, [r2, r3]
 8003060:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a0d      	ldr	r2, [pc, #52]	; (800309c <HAL_RCC_GetSysClockFreq+0x98>)
 8003066:	fb03 f202 	mul.w	r2, r3, r2
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003070:	617b      	str	r3, [r7, #20]
 8003072:	e004      	b.n	800307e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a0c      	ldr	r2, [pc, #48]	; (80030a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003078:	fb02 f303 	mul.w	r3, r2, r3
 800307c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	613b      	str	r3, [r7, #16]
      break;
 8003082:	e002      	b.n	800308a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003084:	4b05      	ldr	r3, [pc, #20]	; (800309c <HAL_RCC_GetSysClockFreq+0x98>)
 8003086:	613b      	str	r3, [r7, #16]
      break;
 8003088:	bf00      	nop
    }
  }
  return sysclockfreq;
 800308a:	693b      	ldr	r3, [r7, #16]
}
 800308c:	4618      	mov	r0, r3
 800308e:	371c      	adds	r7, #28
 8003090:	46bd      	mov	sp, r7
 8003092:	bc80      	pop	{r7}
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	40021000 	.word	0x40021000
 800309c:	007a1200 	.word	0x007a1200
 80030a0:	08005b3c 	.word	0x08005b3c
 80030a4:	08005b4c 	.word	0x08005b4c
 80030a8:	003d0900 	.word	0x003d0900

080030ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030b0:	4b02      	ldr	r3, [pc, #8]	; (80030bc <HAL_RCC_GetHCLKFreq+0x10>)
 80030b2:	681b      	ldr	r3, [r3, #0]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr
 80030bc:	200000d4 	.word	0x200000d4

080030c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030c4:	f7ff fff2 	bl	80030ac <HAL_RCC_GetHCLKFreq>
 80030c8:	4602      	mov	r2, r0
 80030ca:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	0a1b      	lsrs	r3, r3, #8
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	4903      	ldr	r1, [pc, #12]	; (80030e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030d6:	5ccb      	ldrb	r3, [r1, r3]
 80030d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030dc:	4618      	mov	r0, r3
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40021000 	.word	0x40021000
 80030e4:	08005b34 	.word	0x08005b34

080030e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030ec:	f7ff ffde 	bl	80030ac <HAL_RCC_GetHCLKFreq>
 80030f0:	4602      	mov	r2, r0
 80030f2:	4b05      	ldr	r3, [pc, #20]	; (8003108 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	0adb      	lsrs	r3, r3, #11
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	4903      	ldr	r1, [pc, #12]	; (800310c <HAL_RCC_GetPCLK2Freq+0x24>)
 80030fe:	5ccb      	ldrb	r3, [r1, r3]
 8003100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003104:	4618      	mov	r0, r3
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40021000 	.word	0x40021000
 800310c:	08005b34 	.word	0x08005b34

08003110 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003118:	4b0a      	ldr	r3, [pc, #40]	; (8003144 <RCC_Delay+0x34>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a0a      	ldr	r2, [pc, #40]	; (8003148 <RCC_Delay+0x38>)
 800311e:	fba2 2303 	umull	r2, r3, r2, r3
 8003122:	0a5b      	lsrs	r3, r3, #9
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	fb02 f303 	mul.w	r3, r2, r3
 800312a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800312c:	bf00      	nop
  }
  while (Delay --);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	1e5a      	subs	r2, r3, #1
 8003132:	60fa      	str	r2, [r7, #12]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1f9      	bne.n	800312c <RCC_Delay+0x1c>
}
 8003138:	bf00      	nop
 800313a:	bf00      	nop
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	bc80      	pop	{r7}
 8003142:	4770      	bx	lr
 8003144:	200000d4 	.word	0x200000d4
 8003148:	10624dd3 	.word	0x10624dd3

0800314c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e041      	b.n	80031e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d106      	bne.n	8003178 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7fe fdd8 	bl	8001d28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2202      	movs	r2, #2
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	3304      	adds	r3, #4
 8003188:	4619      	mov	r1, r3
 800318a:	4610      	mov	r0, r2
 800318c:	f000 fdd2 	bl	8003d34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
	...

080031ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d001      	beq.n	8003204 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e03a      	b.n	800327a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2202      	movs	r2, #2
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0201 	orr.w	r2, r2, #1
 800321a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a18      	ldr	r2, [pc, #96]	; (8003284 <HAL_TIM_Base_Start_IT+0x98>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d00e      	beq.n	8003244 <HAL_TIM_Base_Start_IT+0x58>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800322e:	d009      	beq.n	8003244 <HAL_TIM_Base_Start_IT+0x58>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a14      	ldr	r2, [pc, #80]	; (8003288 <HAL_TIM_Base_Start_IT+0x9c>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d004      	beq.n	8003244 <HAL_TIM_Base_Start_IT+0x58>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a13      	ldr	r2, [pc, #76]	; (800328c <HAL_TIM_Base_Start_IT+0xa0>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d111      	bne.n	8003268 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 0307 	and.w	r3, r3, #7
 800324e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2b06      	cmp	r3, #6
 8003254:	d010      	beq.n	8003278 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f042 0201 	orr.w	r2, r2, #1
 8003264:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003266:	e007      	b.n	8003278 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f042 0201 	orr.w	r2, r2, #1
 8003276:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr
 8003284:	40012c00 	.word	0x40012c00
 8003288:	40000400 	.word	0x40000400
 800328c:	40000800 	.word	0x40000800

08003290 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e041      	b.n	8003326 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d106      	bne.n	80032bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f839 	bl	800332e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2202      	movs	r2, #2
 80032c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3304      	adds	r3, #4
 80032cc:	4619      	mov	r1, r3
 80032ce:	4610      	mov	r0, r2
 80032d0:	f000 fd30 	bl	8003d34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr

08003340 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d109      	bne.n	8003364 <HAL_TIM_PWM_Start+0x24>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b01      	cmp	r3, #1
 800335a:	bf14      	ite	ne
 800335c:	2301      	movne	r3, #1
 800335e:	2300      	moveq	r3, #0
 8003360:	b2db      	uxtb	r3, r3
 8003362:	e022      	b.n	80033aa <HAL_TIM_PWM_Start+0x6a>
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	2b04      	cmp	r3, #4
 8003368:	d109      	bne.n	800337e <HAL_TIM_PWM_Start+0x3e>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b01      	cmp	r3, #1
 8003374:	bf14      	ite	ne
 8003376:	2301      	movne	r3, #1
 8003378:	2300      	moveq	r3, #0
 800337a:	b2db      	uxtb	r3, r3
 800337c:	e015      	b.n	80033aa <HAL_TIM_PWM_Start+0x6a>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	2b08      	cmp	r3, #8
 8003382:	d109      	bne.n	8003398 <HAL_TIM_PWM_Start+0x58>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b01      	cmp	r3, #1
 800338e:	bf14      	ite	ne
 8003390:	2301      	movne	r3, #1
 8003392:	2300      	moveq	r3, #0
 8003394:	b2db      	uxtb	r3, r3
 8003396:	e008      	b.n	80033aa <HAL_TIM_PWM_Start+0x6a>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	bf14      	ite	ne
 80033a4:	2301      	movne	r3, #1
 80033a6:	2300      	moveq	r3, #0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e05e      	b.n	8003470 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d104      	bne.n	80033c2 <HAL_TIM_PWM_Start+0x82>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2202      	movs	r2, #2
 80033bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033c0:	e013      	b.n	80033ea <HAL_TIM_PWM_Start+0xaa>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d104      	bne.n	80033d2 <HAL_TIM_PWM_Start+0x92>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2202      	movs	r2, #2
 80033cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033d0:	e00b      	b.n	80033ea <HAL_TIM_PWM_Start+0xaa>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	2b08      	cmp	r3, #8
 80033d6:	d104      	bne.n	80033e2 <HAL_TIM_PWM_Start+0xa2>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2202      	movs	r2, #2
 80033dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033e0:	e003      	b.n	80033ea <HAL_TIM_PWM_Start+0xaa>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2202      	movs	r2, #2
 80033e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2201      	movs	r2, #1
 80033f0:	6839      	ldr	r1, [r7, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 ff1e 	bl	8004234 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a1e      	ldr	r2, [pc, #120]	; (8003478 <HAL_TIM_PWM_Start+0x138>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d107      	bne.n	8003412 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003410:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a18      	ldr	r2, [pc, #96]	; (8003478 <HAL_TIM_PWM_Start+0x138>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d00e      	beq.n	800343a <HAL_TIM_PWM_Start+0xfa>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003424:	d009      	beq.n	800343a <HAL_TIM_PWM_Start+0xfa>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a14      	ldr	r2, [pc, #80]	; (800347c <HAL_TIM_PWM_Start+0x13c>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d004      	beq.n	800343a <HAL_TIM_PWM_Start+0xfa>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a12      	ldr	r2, [pc, #72]	; (8003480 <HAL_TIM_PWM_Start+0x140>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d111      	bne.n	800345e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f003 0307 	and.w	r3, r3, #7
 8003444:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2b06      	cmp	r3, #6
 800344a:	d010      	beq.n	800346e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 0201 	orr.w	r2, r2, #1
 800345a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800345c:	e007      	b.n	800346e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f042 0201 	orr.w	r2, r2, #1
 800346c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40012c00 	.word	0x40012c00
 800347c:	40000400 	.word	0x40000400
 8003480:	40000800 	.word	0x40000800

08003484 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800348e:	2300      	movs	r3, #0
 8003490:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d109      	bne.n	80034ac <HAL_TIM_PWM_Start_IT+0x28>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	bf14      	ite	ne
 80034a4:	2301      	movne	r3, #1
 80034a6:	2300      	moveq	r3, #0
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	e022      	b.n	80034f2 <HAL_TIM_PWM_Start_IT+0x6e>
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d109      	bne.n	80034c6 <HAL_TIM_PWM_Start_IT+0x42>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	bf14      	ite	ne
 80034be:	2301      	movne	r3, #1
 80034c0:	2300      	moveq	r3, #0
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	e015      	b.n	80034f2 <HAL_TIM_PWM_Start_IT+0x6e>
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d109      	bne.n	80034e0 <HAL_TIM_PWM_Start_IT+0x5c>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	bf14      	ite	ne
 80034d8:	2301      	movne	r3, #1
 80034da:	2300      	moveq	r3, #0
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	e008      	b.n	80034f2 <HAL_TIM_PWM_Start_IT+0x6e>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	bf14      	ite	ne
 80034ec:	2301      	movne	r3, #1
 80034ee:	2300      	moveq	r3, #0
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e0a9      	b.n	800364e <HAL_TIM_PWM_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d104      	bne.n	800350a <HAL_TIM_PWM_Start_IT+0x86>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003508:	e013      	b.n	8003532 <HAL_TIM_PWM_Start_IT+0xae>
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b04      	cmp	r3, #4
 800350e:	d104      	bne.n	800351a <HAL_TIM_PWM_Start_IT+0x96>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2202      	movs	r2, #2
 8003514:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003518:	e00b      	b.n	8003532 <HAL_TIM_PWM_Start_IT+0xae>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2b08      	cmp	r3, #8
 800351e:	d104      	bne.n	800352a <HAL_TIM_PWM_Start_IT+0xa6>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003528:	e003      	b.n	8003532 <HAL_TIM_PWM_Start_IT+0xae>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2202      	movs	r2, #2
 800352e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b0c      	cmp	r3, #12
 8003536:	d841      	bhi.n	80035bc <HAL_TIM_PWM_Start_IT+0x138>
 8003538:	a201      	add	r2, pc, #4	; (adr r2, 8003540 <HAL_TIM_PWM_Start_IT+0xbc>)
 800353a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800353e:	bf00      	nop
 8003540:	08003575 	.word	0x08003575
 8003544:	080035bd 	.word	0x080035bd
 8003548:	080035bd 	.word	0x080035bd
 800354c:	080035bd 	.word	0x080035bd
 8003550:	08003587 	.word	0x08003587
 8003554:	080035bd 	.word	0x080035bd
 8003558:	080035bd 	.word	0x080035bd
 800355c:	080035bd 	.word	0x080035bd
 8003560:	08003599 	.word	0x08003599
 8003564:	080035bd 	.word	0x080035bd
 8003568:	080035bd 	.word	0x080035bd
 800356c:	080035bd 	.word	0x080035bd
 8003570:	080035ab 	.word	0x080035ab
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68da      	ldr	r2, [r3, #12]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0202 	orr.w	r2, r2, #2
 8003582:	60da      	str	r2, [r3, #12]
      break;
 8003584:	e01d      	b.n	80035c2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68da      	ldr	r2, [r3, #12]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f042 0204 	orr.w	r2, r2, #4
 8003594:	60da      	str	r2, [r3, #12]
      break;
 8003596:	e014      	b.n	80035c2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f042 0208 	orr.w	r2, r2, #8
 80035a6:	60da      	str	r2, [r3, #12]
      break;
 80035a8:	e00b      	b.n	80035c2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68da      	ldr	r2, [r3, #12]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f042 0210 	orr.w	r2, r2, #16
 80035b8:	60da      	str	r2, [r3, #12]
      break;
 80035ba:	e002      	b.n	80035c2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	73fb      	strb	r3, [r7, #15]
      break;
 80035c0:	bf00      	nop
  }

  if (status == HAL_OK)
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d141      	bne.n	800364c <HAL_TIM_PWM_Start_IT+0x1c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2201      	movs	r2, #1
 80035ce:	6839      	ldr	r1, [r7, #0]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 fe2f 	bl	8004234 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a1f      	ldr	r2, [pc, #124]	; (8003658 <HAL_TIM_PWM_Start_IT+0x1d4>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d107      	bne.n	80035f0 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035ee:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a18      	ldr	r2, [pc, #96]	; (8003658 <HAL_TIM_PWM_Start_IT+0x1d4>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d00e      	beq.n	8003618 <HAL_TIM_PWM_Start_IT+0x194>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003602:	d009      	beq.n	8003618 <HAL_TIM_PWM_Start_IT+0x194>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a14      	ldr	r2, [pc, #80]	; (800365c <HAL_TIM_PWM_Start_IT+0x1d8>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d004      	beq.n	8003618 <HAL_TIM_PWM_Start_IT+0x194>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a13      	ldr	r2, [pc, #76]	; (8003660 <HAL_TIM_PWM_Start_IT+0x1dc>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d111      	bne.n	800363c <HAL_TIM_PWM_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 0307 	and.w	r3, r3, #7
 8003622:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2b06      	cmp	r3, #6
 8003628:	d010      	beq.n	800364c <HAL_TIM_PWM_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f042 0201 	orr.w	r2, r2, #1
 8003638:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800363a:	e007      	b.n	800364c <HAL_TIM_PWM_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 0201 	orr.w	r2, r2, #1
 800364a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800364c:	7bfb      	ldrb	r3, [r7, #15]
}
 800364e:	4618      	mov	r0, r3
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	40012c00 	.word	0x40012c00
 800365c:	40000400 	.word	0x40000400
 8003660:	40000800 	.word	0x40000800

08003664 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800366e:	2300      	movs	r3, #0
 8003670:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	2b0c      	cmp	r3, #12
 8003676:	d841      	bhi.n	80036fc <HAL_TIM_PWM_Stop_IT+0x98>
 8003678:	a201      	add	r2, pc, #4	; (adr r2, 8003680 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800367a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800367e:	bf00      	nop
 8003680:	080036b5 	.word	0x080036b5
 8003684:	080036fd 	.word	0x080036fd
 8003688:	080036fd 	.word	0x080036fd
 800368c:	080036fd 	.word	0x080036fd
 8003690:	080036c7 	.word	0x080036c7
 8003694:	080036fd 	.word	0x080036fd
 8003698:	080036fd 	.word	0x080036fd
 800369c:	080036fd 	.word	0x080036fd
 80036a0:	080036d9 	.word	0x080036d9
 80036a4:	080036fd 	.word	0x080036fd
 80036a8:	080036fd 	.word	0x080036fd
 80036ac:	080036fd 	.word	0x080036fd
 80036b0:	080036eb 	.word	0x080036eb
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68da      	ldr	r2, [r3, #12]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0202 	bic.w	r2, r2, #2
 80036c2:	60da      	str	r2, [r3, #12]
      break;
 80036c4:	e01d      	b.n	8003702 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68da      	ldr	r2, [r3, #12]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 0204 	bic.w	r2, r2, #4
 80036d4:	60da      	str	r2, [r3, #12]
      break;
 80036d6:	e014      	b.n	8003702 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68da      	ldr	r2, [r3, #12]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 0208 	bic.w	r2, r2, #8
 80036e6:	60da      	str	r2, [r3, #12]
      break;
 80036e8:	e00b      	b.n	8003702 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68da      	ldr	r2, [r3, #12]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 0210 	bic.w	r2, r2, #16
 80036f8:	60da      	str	r2, [r3, #12]
      break;
 80036fa:	e002      	b.n	8003702 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003700:	bf00      	nop
  }

  if (status == HAL_OK)
 8003702:	7bfb      	ldrb	r3, [r7, #15]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d157      	bne.n	80037b8 <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2200      	movs	r2, #0
 800370e:	6839      	ldr	r1, [r7, #0]
 8003710:	4618      	mov	r0, r3
 8003712:	f000 fd8f 	bl	8004234 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a2a      	ldr	r2, [pc, #168]	; (80037c4 <HAL_TIM_PWM_Stop_IT+0x160>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d117      	bne.n	8003750 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6a1a      	ldr	r2, [r3, #32]
 8003726:	f241 1311 	movw	r3, #4369	; 0x1111
 800372a:	4013      	ands	r3, r2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10f      	bne.n	8003750 <HAL_TIM_PWM_Stop_IT+0xec>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6a1a      	ldr	r2, [r3, #32]
 8003736:	f240 4344 	movw	r3, #1092	; 0x444
 800373a:	4013      	ands	r3, r2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d107      	bne.n	8003750 <HAL_TIM_PWM_Stop_IT+0xec>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800374e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6a1a      	ldr	r2, [r3, #32]
 8003756:	f241 1311 	movw	r3, #4369	; 0x1111
 800375a:	4013      	ands	r3, r2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10f      	bne.n	8003780 <HAL_TIM_PWM_Stop_IT+0x11c>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6a1a      	ldr	r2, [r3, #32]
 8003766:	f240 4344 	movw	r3, #1092	; 0x444
 800376a:	4013      	ands	r3, r2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d107      	bne.n	8003780 <HAL_TIM_PWM_Stop_IT+0x11c>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 0201 	bic.w	r2, r2, #1
 800377e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d104      	bne.n	8003790 <HAL_TIM_PWM_Stop_IT+0x12c>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800378e:	e013      	b.n	80037b8 <HAL_TIM_PWM_Stop_IT+0x154>
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	2b04      	cmp	r3, #4
 8003794:	d104      	bne.n	80037a0 <HAL_TIM_PWM_Stop_IT+0x13c>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800379e:	e00b      	b.n	80037b8 <HAL_TIM_PWM_Stop_IT+0x154>
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	2b08      	cmp	r3, #8
 80037a4:	d104      	bne.n	80037b0 <HAL_TIM_PWM_Stop_IT+0x14c>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037ae:	e003      	b.n	80037b8 <HAL_TIM_PWM_Stop_IT+0x154>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80037b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	40012c00 	.word	0x40012c00

080037c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d122      	bne.n	8003824 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d11b      	bne.n	8003824 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f06f 0202 	mvn.w	r2, #2
 80037f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 fa76 	bl	8003cfc <HAL_TIM_IC_CaptureCallback>
 8003810:	e005      	b.n	800381e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 fa69 	bl	8003cea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 fa78 	bl	8003d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	f003 0304 	and.w	r3, r3, #4
 800382e:	2b04      	cmp	r3, #4
 8003830:	d122      	bne.n	8003878 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b04      	cmp	r3, #4
 800383e:	d11b      	bne.n	8003878 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f06f 0204 	mvn.w	r2, #4
 8003848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2202      	movs	r2, #2
 800384e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 fa4c 	bl	8003cfc <HAL_TIM_IC_CaptureCallback>
 8003864:	e005      	b.n	8003872 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 fa3f 	bl	8003cea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 fa4e 	bl	8003d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	f003 0308 	and.w	r3, r3, #8
 8003882:	2b08      	cmp	r3, #8
 8003884:	d122      	bne.n	80038cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f003 0308 	and.w	r3, r3, #8
 8003890:	2b08      	cmp	r3, #8
 8003892:	d11b      	bne.n	80038cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f06f 0208 	mvn.w	r2, #8
 800389c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2204      	movs	r2, #4
 80038a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	f003 0303 	and.w	r3, r3, #3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 fa22 	bl	8003cfc <HAL_TIM_IC_CaptureCallback>
 80038b8:	e005      	b.n	80038c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 fa15 	bl	8003cea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 fa24 	bl	8003d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	f003 0310 	and.w	r3, r3, #16
 80038d6:	2b10      	cmp	r3, #16
 80038d8:	d122      	bne.n	8003920 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	f003 0310 	and.w	r3, r3, #16
 80038e4:	2b10      	cmp	r3, #16
 80038e6:	d11b      	bne.n	8003920 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f06f 0210 	mvn.w	r2, #16
 80038f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2208      	movs	r2, #8
 80038f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f9f8 	bl	8003cfc <HAL_TIM_IC_CaptureCallback>
 800390c:	e005      	b.n	800391a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f9eb 	bl	8003cea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 f9fa 	bl	8003d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b01      	cmp	r3, #1
 800392c:	d10e      	bne.n	800394c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b01      	cmp	r3, #1
 800393a:	d107      	bne.n	800394c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f06f 0201 	mvn.w	r2, #1
 8003944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7fc fc16 	bl	8000178 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003956:	2b80      	cmp	r3, #128	; 0x80
 8003958:	d10e      	bne.n	8003978 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003964:	2b80      	cmp	r3, #128	; 0x80
 8003966:	d107      	bne.n	8003978 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 fce9 	bl	800434a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003982:	2b40      	cmp	r3, #64	; 0x40
 8003984:	d10e      	bne.n	80039a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003990:	2b40      	cmp	r3, #64	; 0x40
 8003992:	d107      	bne.n	80039a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800399c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f9be 	bl	8003d20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	f003 0320 	and.w	r3, r3, #32
 80039ae:	2b20      	cmp	r3, #32
 80039b0:	d10e      	bne.n	80039d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	f003 0320 	and.w	r3, r3, #32
 80039bc:	2b20      	cmp	r3, #32
 80039be:	d107      	bne.n	80039d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f06f 0220 	mvn.w	r2, #32
 80039c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 fcb4 	bl	8004338 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039d0:	bf00      	nop
 80039d2:	3708      	adds	r7, #8
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039e4:	2300      	movs	r3, #0
 80039e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d101      	bne.n	80039f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039f2:	2302      	movs	r3, #2
 80039f4:	e0ae      	b.n	8003b54 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b0c      	cmp	r3, #12
 8003a02:	f200 809f 	bhi.w	8003b44 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a06:	a201      	add	r2, pc, #4	; (adr r2, 8003a0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a0c:	08003a41 	.word	0x08003a41
 8003a10:	08003b45 	.word	0x08003b45
 8003a14:	08003b45 	.word	0x08003b45
 8003a18:	08003b45 	.word	0x08003b45
 8003a1c:	08003a81 	.word	0x08003a81
 8003a20:	08003b45 	.word	0x08003b45
 8003a24:	08003b45 	.word	0x08003b45
 8003a28:	08003b45 	.word	0x08003b45
 8003a2c:	08003ac3 	.word	0x08003ac3
 8003a30:	08003b45 	.word	0x08003b45
 8003a34:	08003b45 	.word	0x08003b45
 8003a38:	08003b45 	.word	0x08003b45
 8003a3c:	08003b03 	.word	0x08003b03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68b9      	ldr	r1, [r7, #8]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 f9d6 	bl	8003df8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	699a      	ldr	r2, [r3, #24]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f042 0208 	orr.w	r2, r2, #8
 8003a5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	699a      	ldr	r2, [r3, #24]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 0204 	bic.w	r2, r2, #4
 8003a6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6999      	ldr	r1, [r3, #24]
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	691a      	ldr	r2, [r3, #16]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	619a      	str	r2, [r3, #24]
      break;
 8003a7e:	e064      	b.n	8003b4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68b9      	ldr	r1, [r7, #8]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 fa1c 	bl	8003ec4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	699a      	ldr	r2, [r3, #24]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	699a      	ldr	r2, [r3, #24]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6999      	ldr	r1, [r3, #24]
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	021a      	lsls	r2, r3, #8
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	619a      	str	r2, [r3, #24]
      break;
 8003ac0:	e043      	b.n	8003b4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68b9      	ldr	r1, [r7, #8]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f000 fa65 	bl	8003f98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	69da      	ldr	r2, [r3, #28]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f042 0208 	orr.w	r2, r2, #8
 8003adc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	69da      	ldr	r2, [r3, #28]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 0204 	bic.w	r2, r2, #4
 8003aec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	69d9      	ldr	r1, [r3, #28]
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	691a      	ldr	r2, [r3, #16]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	61da      	str	r2, [r3, #28]
      break;
 8003b00:	e023      	b.n	8003b4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68b9      	ldr	r1, [r7, #8]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f000 faaf 	bl	800406c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	69da      	ldr	r2, [r3, #28]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	69da      	ldr	r2, [r3, #28]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	69d9      	ldr	r1, [r3, #28]
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	021a      	lsls	r2, r3, #8
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	61da      	str	r2, [r3, #28]
      break;
 8003b42:	e002      	b.n	8003b4a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	75fb      	strb	r3, [r7, #23]
      break;
 8003b48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3718      	adds	r7, #24
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b66:	2300      	movs	r3, #0
 8003b68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d101      	bne.n	8003b78 <HAL_TIM_ConfigClockSource+0x1c>
 8003b74:	2302      	movs	r3, #2
 8003b76:	e0b4      	b.n	8003ce2 <HAL_TIM_ConfigClockSource+0x186>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2202      	movs	r2, #2
 8003b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68ba      	ldr	r2, [r7, #8]
 8003ba6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bb0:	d03e      	beq.n	8003c30 <HAL_TIM_ConfigClockSource+0xd4>
 8003bb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bb6:	f200 8087 	bhi.w	8003cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bbe:	f000 8086 	beq.w	8003cce <HAL_TIM_ConfigClockSource+0x172>
 8003bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc6:	d87f      	bhi.n	8003cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc8:	2b70      	cmp	r3, #112	; 0x70
 8003bca:	d01a      	beq.n	8003c02 <HAL_TIM_ConfigClockSource+0xa6>
 8003bcc:	2b70      	cmp	r3, #112	; 0x70
 8003bce:	d87b      	bhi.n	8003cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd0:	2b60      	cmp	r3, #96	; 0x60
 8003bd2:	d050      	beq.n	8003c76 <HAL_TIM_ConfigClockSource+0x11a>
 8003bd4:	2b60      	cmp	r3, #96	; 0x60
 8003bd6:	d877      	bhi.n	8003cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd8:	2b50      	cmp	r3, #80	; 0x50
 8003bda:	d03c      	beq.n	8003c56 <HAL_TIM_ConfigClockSource+0xfa>
 8003bdc:	2b50      	cmp	r3, #80	; 0x50
 8003bde:	d873      	bhi.n	8003cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003be0:	2b40      	cmp	r3, #64	; 0x40
 8003be2:	d058      	beq.n	8003c96 <HAL_TIM_ConfigClockSource+0x13a>
 8003be4:	2b40      	cmp	r3, #64	; 0x40
 8003be6:	d86f      	bhi.n	8003cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003be8:	2b30      	cmp	r3, #48	; 0x30
 8003bea:	d064      	beq.n	8003cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8003bec:	2b30      	cmp	r3, #48	; 0x30
 8003bee:	d86b      	bhi.n	8003cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bf0:	2b20      	cmp	r3, #32
 8003bf2:	d060      	beq.n	8003cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8003bf4:	2b20      	cmp	r3, #32
 8003bf6:	d867      	bhi.n	8003cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d05c      	beq.n	8003cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8003bfc:	2b10      	cmp	r3, #16
 8003bfe:	d05a      	beq.n	8003cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8003c00:	e062      	b.n	8003cc8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c12:	f000 faf0 	bl	80041f6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	609a      	str	r2, [r3, #8]
      break;
 8003c2e:	e04f      	b.n	8003cd0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c40:	f000 fad9 	bl	80041f6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689a      	ldr	r2, [r3, #8]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c52:	609a      	str	r2, [r3, #8]
      break;
 8003c54:	e03c      	b.n	8003cd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c62:	461a      	mov	r2, r3
 8003c64:	f000 fa50 	bl	8004108 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2150      	movs	r1, #80	; 0x50
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 faa7 	bl	80041c2 <TIM_ITRx_SetConfig>
      break;
 8003c74:	e02c      	b.n	8003cd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c82:	461a      	mov	r2, r3
 8003c84:	f000 fa6e 	bl	8004164 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2160      	movs	r1, #96	; 0x60
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 fa97 	bl	80041c2 <TIM_ITRx_SetConfig>
      break;
 8003c94:	e01c      	b.n	8003cd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	f000 fa30 	bl	8004108 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2140      	movs	r1, #64	; 0x40
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 fa87 	bl	80041c2 <TIM_ITRx_SetConfig>
      break;
 8003cb4:	e00c      	b.n	8003cd0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4610      	mov	r0, r2
 8003cc2:	f000 fa7e 	bl	80041c2 <TIM_ITRx_SetConfig>
      break;
 8003cc6:	e003      	b.n	8003cd0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	73fb      	strb	r3, [r7, #15]
      break;
 8003ccc:	e000      	b.n	8003cd0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003cce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b083      	sub	sp, #12
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bc80      	pop	{r7}
 8003cfa:	4770      	bx	lr

08003cfc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bc80      	pop	{r7}
 8003d0c:	4770      	bx	lr

08003d0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b083      	sub	sp, #12
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bc80      	pop	{r7}
 8003d1e:	4770      	bx	lr

08003d20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bc80      	pop	{r7}
 8003d30:	4770      	bx	lr
	...

08003d34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a29      	ldr	r2, [pc, #164]	; (8003dec <TIM_Base_SetConfig+0xb8>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d00b      	beq.n	8003d64 <TIM_Base_SetConfig+0x30>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d52:	d007      	beq.n	8003d64 <TIM_Base_SetConfig+0x30>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a26      	ldr	r2, [pc, #152]	; (8003df0 <TIM_Base_SetConfig+0xbc>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d003      	beq.n	8003d64 <TIM_Base_SetConfig+0x30>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a25      	ldr	r2, [pc, #148]	; (8003df4 <TIM_Base_SetConfig+0xc0>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d108      	bne.n	8003d76 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a1c      	ldr	r2, [pc, #112]	; (8003dec <TIM_Base_SetConfig+0xb8>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d00b      	beq.n	8003d96 <TIM_Base_SetConfig+0x62>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d84:	d007      	beq.n	8003d96 <TIM_Base_SetConfig+0x62>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a19      	ldr	r2, [pc, #100]	; (8003df0 <TIM_Base_SetConfig+0xbc>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d003      	beq.n	8003d96 <TIM_Base_SetConfig+0x62>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a18      	ldr	r2, [pc, #96]	; (8003df4 <TIM_Base_SetConfig+0xc0>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d108      	bne.n	8003da8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a07      	ldr	r2, [pc, #28]	; (8003dec <TIM_Base_SetConfig+0xb8>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d103      	bne.n	8003ddc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	691a      	ldr	r2, [r3, #16]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	615a      	str	r2, [r3, #20]
}
 8003de2:	bf00      	nop
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bc80      	pop	{r7}
 8003dea:	4770      	bx	lr
 8003dec:	40012c00 	.word	0x40012c00
 8003df0:	40000400 	.word	0x40000400
 8003df4:	40000800 	.word	0x40000800

08003df8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b087      	sub	sp, #28
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	f023 0201 	bic.w	r2, r3, #1
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f023 0303 	bic.w	r3, r3, #3
 8003e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f023 0302 	bic.w	r3, r3, #2
 8003e40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a1c      	ldr	r2, [pc, #112]	; (8003ec0 <TIM_OC1_SetConfig+0xc8>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d10c      	bne.n	8003e6e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	f023 0308 	bic.w	r3, r3, #8
 8003e5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f023 0304 	bic.w	r3, r3, #4
 8003e6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a13      	ldr	r2, [pc, #76]	; (8003ec0 <TIM_OC1_SetConfig+0xc8>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d111      	bne.n	8003e9a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685a      	ldr	r2, [r3, #4]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	621a      	str	r2, [r3, #32]
}
 8003eb4:	bf00      	nop
 8003eb6:	371c      	adds	r7, #28
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bc80      	pop	{r7}
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	40012c00 	.word	0x40012c00

08003ec4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b087      	sub	sp, #28
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	f023 0210 	bic.w	r2, r3, #16
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003efa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	021b      	lsls	r3, r3, #8
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	f023 0320 	bic.w	r3, r3, #32
 8003f0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	011b      	lsls	r3, r3, #4
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a1d      	ldr	r2, [pc, #116]	; (8003f94 <TIM_OC2_SetConfig+0xd0>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d10d      	bne.n	8003f40 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	011b      	lsls	r3, r3, #4
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a14      	ldr	r2, [pc, #80]	; (8003f94 <TIM_OC2_SetConfig+0xd0>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d113      	bne.n	8003f70 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	621a      	str	r2, [r3, #32]
}
 8003f8a:	bf00      	nop
 8003f8c:	371c      	adds	r7, #28
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bc80      	pop	{r7}
 8003f92:	4770      	bx	lr
 8003f94:	40012c00 	.word	0x40012c00

08003f98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b087      	sub	sp, #28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	69db      	ldr	r3, [r3, #28]
 8003fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f023 0303 	bic.w	r3, r3, #3
 8003fce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fe0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	021b      	lsls	r3, r3, #8
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a1d      	ldr	r2, [pc, #116]	; (8004068 <TIM_OC3_SetConfig+0xd0>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d10d      	bne.n	8004012 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ffc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	021b      	lsls	r3, r3, #8
 8004004:	697a      	ldr	r2, [r7, #20]
 8004006:	4313      	orrs	r3, r2
 8004008:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004010:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a14      	ldr	r2, [pc, #80]	; (8004068 <TIM_OC3_SetConfig+0xd0>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d113      	bne.n	8004042 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004020:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004028:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	011b      	lsls	r3, r3, #4
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	4313      	orrs	r3, r2
 8004034:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	011b      	lsls	r3, r3, #4
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	4313      	orrs	r3, r2
 8004040:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685a      	ldr	r2, [r3, #4]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	621a      	str	r2, [r3, #32]
}
 800405c:	bf00      	nop
 800405e:	371c      	adds	r7, #28
 8004060:	46bd      	mov	sp, r7
 8004062:	bc80      	pop	{r7}
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	40012c00 	.word	0x40012c00

0800406c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800406c:	b480      	push	{r7}
 800406e:	b087      	sub	sp, #28
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800409a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	021b      	lsls	r3, r3, #8
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	031b      	lsls	r3, r3, #12
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a0f      	ldr	r2, [pc, #60]	; (8004104 <TIM_OC4_SetConfig+0x98>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d109      	bne.n	80040e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	019b      	lsls	r3, r3, #6
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	4313      	orrs	r3, r2
 80040de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	621a      	str	r2, [r3, #32]
}
 80040fa:	bf00      	nop
 80040fc:	371c      	adds	r7, #28
 80040fe:	46bd      	mov	sp, r7
 8004100:	bc80      	pop	{r7}
 8004102:	4770      	bx	lr
 8004104:	40012c00 	.word	0x40012c00

08004108 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004108:	b480      	push	{r7}
 800410a:	b087      	sub	sp, #28
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	f023 0201 	bic.w	r2, r3, #1
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004132:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	011b      	lsls	r3, r3, #4
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	4313      	orrs	r3, r2
 800413c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f023 030a 	bic.w	r3, r3, #10
 8004144:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	4313      	orrs	r3, r2
 800414c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	621a      	str	r2, [r3, #32]
}
 800415a:	bf00      	nop
 800415c:	371c      	adds	r7, #28
 800415e:	46bd      	mov	sp, r7
 8004160:	bc80      	pop	{r7}
 8004162:	4770      	bx	lr

08004164 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004164:	b480      	push	{r7}
 8004166:	b087      	sub	sp, #28
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	f023 0210 	bic.w	r2, r3, #16
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800418e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	031b      	lsls	r3, r3, #12
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	4313      	orrs	r3, r2
 8004198:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041a0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	011b      	lsls	r3, r3, #4
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	621a      	str	r2, [r3, #32]
}
 80041b8:	bf00      	nop
 80041ba:	371c      	adds	r7, #28
 80041bc:	46bd      	mov	sp, r7
 80041be:	bc80      	pop	{r7}
 80041c0:	4770      	bx	lr

080041c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b085      	sub	sp, #20
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
 80041ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041da:	683a      	ldr	r2, [r7, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	4313      	orrs	r3, r2
 80041e0:	f043 0307 	orr.w	r3, r3, #7
 80041e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	609a      	str	r2, [r3, #8]
}
 80041ec:	bf00      	nop
 80041ee:	3714      	adds	r7, #20
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bc80      	pop	{r7}
 80041f4:	4770      	bx	lr

080041f6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b087      	sub	sp, #28
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	60f8      	str	r0, [r7, #12]
 80041fe:	60b9      	str	r1, [r7, #8]
 8004200:	607a      	str	r2, [r7, #4]
 8004202:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004210:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	021a      	lsls	r2, r3, #8
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	431a      	orrs	r2, r3
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	4313      	orrs	r3, r2
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	4313      	orrs	r3, r2
 8004222:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	609a      	str	r2, [r3, #8]
}
 800422a:	bf00      	nop
 800422c:	371c      	adds	r7, #28
 800422e:	46bd      	mov	sp, r7
 8004230:	bc80      	pop	{r7}
 8004232:	4770      	bx	lr

08004234 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004234:	b480      	push	{r7}
 8004236:	b087      	sub	sp, #28
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	f003 031f 	and.w	r3, r3, #31
 8004246:	2201      	movs	r2, #1
 8004248:	fa02 f303 	lsl.w	r3, r2, r3
 800424c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6a1a      	ldr	r2, [r3, #32]
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	43db      	mvns	r3, r3
 8004256:	401a      	ands	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6a1a      	ldr	r2, [r3, #32]
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	f003 031f 	and.w	r3, r3, #31
 8004266:	6879      	ldr	r1, [r7, #4]
 8004268:	fa01 f303 	lsl.w	r3, r1, r3
 800426c:	431a      	orrs	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	621a      	str	r2, [r3, #32]
}
 8004272:	bf00      	nop
 8004274:	371c      	adds	r7, #28
 8004276:	46bd      	mov	sp, r7
 8004278:	bc80      	pop	{r7}
 800427a:	4770      	bx	lr

0800427c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800428c:	2b01      	cmp	r3, #1
 800428e:	d101      	bne.n	8004294 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004290:	2302      	movs	r3, #2
 8004292:	e046      	b.n	8004322 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2202      	movs	r2, #2
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a16      	ldr	r2, [pc, #88]	; (800432c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d00e      	beq.n	80042f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042e0:	d009      	beq.n	80042f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a12      	ldr	r2, [pc, #72]	; (8004330 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d004      	beq.n	80042f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a10      	ldr	r2, [pc, #64]	; (8004334 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d10c      	bne.n	8004310 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	4313      	orrs	r3, r2
 8004306:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68ba      	ldr	r2, [r7, #8]
 800430e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3714      	adds	r7, #20
 8004326:	46bd      	mov	sp, r7
 8004328:	bc80      	pop	{r7}
 800432a:	4770      	bx	lr
 800432c:	40012c00 	.word	0x40012c00
 8004330:	40000400 	.word	0x40000400
 8004334:	40000800 	.word	0x40000800

08004338 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	bc80      	pop	{r7}
 8004348:	4770      	bx	lr

0800434a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800434a:	b480      	push	{r7}
 800434c:	b083      	sub	sp, #12
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004352:	bf00      	nop
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	bc80      	pop	{r7}
 800435a:	4770      	bx	lr

0800435c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e042      	b.n	80043f4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d106      	bne.n	8004388 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7fd fd76 	bl	8001e74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2224      	movs	r2, #36	; 0x24
 800438c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68da      	ldr	r2, [r3, #12]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800439e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 fdc5 	bl	8004f30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	691a      	ldr	r2, [r3, #16]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	695a      	ldr	r2, [r3, #20]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68da      	ldr	r2, [r3, #12]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2220      	movs	r2, #32
 80043e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2220      	movs	r2, #32
 80043e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3708      	adds	r7, #8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b08a      	sub	sp, #40	; 0x28
 8004400:	af02      	add	r7, sp, #8
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	603b      	str	r3, [r7, #0]
 8004408:	4613      	mov	r3, r2
 800440a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800440c:	2300      	movs	r3, #0
 800440e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b20      	cmp	r3, #32
 800441a:	d16d      	bne.n	80044f8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d002      	beq.n	8004428 <HAL_UART_Transmit+0x2c>
 8004422:	88fb      	ldrh	r3, [r7, #6]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e066      	b.n	80044fa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2221      	movs	r2, #33	; 0x21
 8004436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800443a:	f7fd fed5 	bl	80021e8 <HAL_GetTick>
 800443e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	88fa      	ldrh	r2, [r7, #6]
 8004444:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	88fa      	ldrh	r2, [r7, #6]
 800444a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004454:	d108      	bne.n	8004468 <HAL_UART_Transmit+0x6c>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d104      	bne.n	8004468 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800445e:	2300      	movs	r3, #0
 8004460:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	61bb      	str	r3, [r7, #24]
 8004466:	e003      	b.n	8004470 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800446c:	2300      	movs	r3, #0
 800446e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004470:	e02a      	b.n	80044c8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	2200      	movs	r2, #0
 800447a:	2180      	movs	r1, #128	; 0x80
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f000 fb14 	bl	8004aaa <UART_WaitOnFlagUntilTimeout>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d001      	beq.n	800448c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e036      	b.n	80044fa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10b      	bne.n	80044aa <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	461a      	mov	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	3302      	adds	r3, #2
 80044a6:	61bb      	str	r3, [r7, #24]
 80044a8:	e007      	b.n	80044ba <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	781a      	ldrb	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	3301      	adds	r3, #1
 80044b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044be:	b29b      	uxth	r3, r3
 80044c0:	3b01      	subs	r3, #1
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1cf      	bne.n	8004472 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	2200      	movs	r2, #0
 80044da:	2140      	movs	r1, #64	; 0x40
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f000 fae4 	bl	8004aaa <UART_WaitOnFlagUntilTimeout>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e006      	b.n	80044fa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2220      	movs	r2, #32
 80044f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80044f4:	2300      	movs	r3, #0
 80044f6:	e000      	b.n	80044fa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80044f8:	2302      	movs	r3, #2
  }
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3720      	adds	r7, #32
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b084      	sub	sp, #16
 8004506:	af00      	add	r7, sp, #0
 8004508:	60f8      	str	r0, [r7, #12]
 800450a:	60b9      	str	r1, [r7, #8]
 800450c:	4613      	mov	r3, r2
 800450e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b20      	cmp	r3, #32
 800451a:	d112      	bne.n	8004542 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d002      	beq.n	8004528 <HAL_UART_Receive_IT+0x26>
 8004522:	88fb      	ldrh	r3, [r7, #6]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d101      	bne.n	800452c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e00b      	b.n	8004544 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004532:	88fb      	ldrh	r3, [r7, #6]
 8004534:	461a      	mov	r2, r3
 8004536:	68b9      	ldr	r1, [r7, #8]
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f000 fb24 	bl	8004b86 <UART_Start_Receive_IT>
 800453e:	4603      	mov	r3, r0
 8004540:	e000      	b.n	8004544 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004542:	2302      	movs	r3, #2
  }
}
 8004544:	4618      	mov	r0, r3
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b0ba      	sub	sp, #232	; 0xe8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004572:	2300      	movs	r3, #0
 8004574:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004578:	2300      	movs	r3, #0
 800457a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800457e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004582:	f003 030f 	and.w	r3, r3, #15
 8004586:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800458a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10f      	bne.n	80045b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004596:	f003 0320 	and.w	r3, r3, #32
 800459a:	2b00      	cmp	r3, #0
 800459c:	d009      	beq.n	80045b2 <HAL_UART_IRQHandler+0x66>
 800459e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045a2:	f003 0320 	and.w	r3, r3, #32
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 fc01 	bl	8004db2 <UART_Receive_IT>
      return;
 80045b0:	e25b      	b.n	8004a6a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80045b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f000 80de 	beq.w	8004778 <HAL_UART_IRQHandler+0x22c>
 80045bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d106      	bne.n	80045d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80045c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f000 80d1 	beq.w	8004778 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00b      	beq.n	80045fa <HAL_UART_IRQHandler+0xae>
 80045e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d005      	beq.n	80045fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f2:	f043 0201 	orr.w	r2, r3, #1
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045fe:	f003 0304 	and.w	r3, r3, #4
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00b      	beq.n	800461e <HAL_UART_IRQHandler+0xd2>
 8004606:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	d005      	beq.n	800461e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004616:	f043 0202 	orr.w	r2, r3, #2
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800461e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00b      	beq.n	8004642 <HAL_UART_IRQHandler+0xf6>
 800462a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	d005      	beq.n	8004642 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463a:	f043 0204 	orr.w	r2, r3, #4
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004646:	f003 0308 	and.w	r3, r3, #8
 800464a:	2b00      	cmp	r3, #0
 800464c:	d011      	beq.n	8004672 <HAL_UART_IRQHandler+0x126>
 800464e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004652:	f003 0320 	and.w	r3, r3, #32
 8004656:	2b00      	cmp	r3, #0
 8004658:	d105      	bne.n	8004666 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800465a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d005      	beq.n	8004672 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466a:	f043 0208 	orr.w	r2, r3, #8
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 81f2 	beq.w	8004a60 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800467c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004680:	f003 0320 	and.w	r3, r3, #32
 8004684:	2b00      	cmp	r3, #0
 8004686:	d008      	beq.n	800469a <HAL_UART_IRQHandler+0x14e>
 8004688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800468c:	f003 0320 	and.w	r3, r3, #32
 8004690:	2b00      	cmp	r3, #0
 8004692:	d002      	beq.n	800469a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 fb8c 	bl	8004db2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	bf14      	ite	ne
 80046a8:	2301      	movne	r3, #1
 80046aa:	2300      	moveq	r3, #0
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b6:	f003 0308 	and.w	r3, r3, #8
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d103      	bne.n	80046c6 <HAL_UART_IRQHandler+0x17a>
 80046be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d04f      	beq.n	8004766 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 fa96 	bl	8004bf8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d041      	beq.n	800475e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	3314      	adds	r3, #20
 80046e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046e8:	e853 3f00 	ldrex	r3, [r3]
 80046ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80046f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	3314      	adds	r3, #20
 8004702:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004706:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800470a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004712:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004716:	e841 2300 	strex	r3, r2, [r1]
 800471a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800471e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1d9      	bne.n	80046da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800472a:	2b00      	cmp	r3, #0
 800472c:	d013      	beq.n	8004756 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004732:	4a7e      	ldr	r2, [pc, #504]	; (800492c <HAL_UART_IRQHandler+0x3e0>)
 8004734:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800473a:	4618      	mov	r0, r3
 800473c:	f7fd feca 	bl	80024d4 <HAL_DMA_Abort_IT>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d016      	beq.n	8004774 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800474a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004750:	4610      	mov	r0, r2
 8004752:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004754:	e00e      	b.n	8004774 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f993 	bl	8004a82 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800475c:	e00a      	b.n	8004774 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f98f 	bl	8004a82 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004764:	e006      	b.n	8004774 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f98b 	bl	8004a82 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004772:	e175      	b.n	8004a60 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004774:	bf00      	nop
    return;
 8004776:	e173      	b.n	8004a60 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477c:	2b01      	cmp	r3, #1
 800477e:	f040 814f 	bne.w	8004a20 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004786:	f003 0310 	and.w	r3, r3, #16
 800478a:	2b00      	cmp	r3, #0
 800478c:	f000 8148 	beq.w	8004a20 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004794:	f003 0310 	and.w	r3, r3, #16
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 8141 	beq.w	8004a20 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800479e:	2300      	movs	r3, #0
 80047a0:	60bb      	str	r3, [r7, #8]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	60bb      	str	r3, [r7, #8]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	60bb      	str	r3, [r7, #8]
 80047b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f000 80b6 	beq.w	8004930 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f000 8145 	beq.w	8004a64 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047e2:	429a      	cmp	r2, r3
 80047e4:	f080 813e 	bcs.w	8004a64 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047ee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	2b20      	cmp	r3, #32
 80047f8:	f000 8088 	beq.w	800490c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	330c      	adds	r3, #12
 8004802:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004806:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800480a:	e853 3f00 	ldrex	r3, [r3]
 800480e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004812:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004816:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800481a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	330c      	adds	r3, #12
 8004824:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004828:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800482c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004830:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004834:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004838:	e841 2300 	strex	r3, r2, [r1]
 800483c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004840:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1d9      	bne.n	80047fc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3314      	adds	r3, #20
 800484e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004850:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004852:	e853 3f00 	ldrex	r3, [r3]
 8004856:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004858:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800485a:	f023 0301 	bic.w	r3, r3, #1
 800485e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	3314      	adds	r3, #20
 8004868:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800486c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004870:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004872:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004874:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004878:	e841 2300 	strex	r3, r2, [r1]
 800487c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800487e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1e1      	bne.n	8004848 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	3314      	adds	r3, #20
 800488a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800488e:	e853 3f00 	ldrex	r3, [r3]
 8004892:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004894:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004896:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800489a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	3314      	adds	r3, #20
 80048a4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80048a8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80048aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80048ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80048b0:	e841 2300 	strex	r3, r2, [r1]
 80048b4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80048b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1e3      	bne.n	8004884 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2220      	movs	r2, #32
 80048c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	330c      	adds	r3, #12
 80048d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048d4:	e853 3f00 	ldrex	r3, [r3]
 80048d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80048da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048dc:	f023 0310 	bic.w	r3, r3, #16
 80048e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	330c      	adds	r3, #12
 80048ea:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80048ee:	65ba      	str	r2, [r7, #88]	; 0x58
 80048f0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80048f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048f6:	e841 2300 	strex	r3, r2, [r1]
 80048fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80048fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1e3      	bne.n	80048ca <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004906:	4618      	mov	r0, r3
 8004908:	f7fd fda9 	bl	800245e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2202      	movs	r2, #2
 8004910:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800491a:	b29b      	uxth	r3, r3
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	b29b      	uxth	r3, r3
 8004920:	4619      	mov	r1, r3
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f8b6 	bl	8004a94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004928:	e09c      	b.n	8004a64 <HAL_UART_IRQHandler+0x518>
 800492a:	bf00      	nop
 800492c:	08004cbd 	.word	0x08004cbd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004938:	b29b      	uxth	r3, r3
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004944:	b29b      	uxth	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	f000 808e 	beq.w	8004a68 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800494c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 8089 	beq.w	8004a68 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	330c      	adds	r3, #12
 800495c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004960:	e853 3f00 	ldrex	r3, [r3]
 8004964:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004968:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800496c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	330c      	adds	r3, #12
 8004976:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800497a:	647a      	str	r2, [r7, #68]	; 0x44
 800497c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004980:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004982:	e841 2300 	strex	r3, r2, [r1]
 8004986:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1e3      	bne.n	8004956 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	3314      	adds	r3, #20
 8004994:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004998:	e853 3f00 	ldrex	r3, [r3]
 800499c:	623b      	str	r3, [r7, #32]
   return(result);
 800499e:	6a3b      	ldr	r3, [r7, #32]
 80049a0:	f023 0301 	bic.w	r3, r3, #1
 80049a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	3314      	adds	r3, #20
 80049ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80049b2:	633a      	str	r2, [r7, #48]	; 0x30
 80049b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049ba:	e841 2300 	strex	r3, r2, [r1]
 80049be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80049c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1e3      	bne.n	800498e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2220      	movs	r2, #32
 80049ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	330c      	adds	r3, #12
 80049da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	e853 3f00 	ldrex	r3, [r3]
 80049e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f023 0310 	bic.w	r3, r3, #16
 80049ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	330c      	adds	r3, #12
 80049f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80049f8:	61fa      	str	r2, [r7, #28]
 80049fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fc:	69b9      	ldr	r1, [r7, #24]
 80049fe:	69fa      	ldr	r2, [r7, #28]
 8004a00:	e841 2300 	strex	r3, r2, [r1]
 8004a04:	617b      	str	r3, [r7, #20]
   return(result);
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1e3      	bne.n	80049d4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2202      	movs	r2, #2
 8004a10:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a16:	4619      	mov	r1, r3
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 f83b 	bl	8004a94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a1e:	e023      	b.n	8004a68 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d009      	beq.n	8004a40 <HAL_UART_IRQHandler+0x4f4>
 8004a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d003      	beq.n	8004a40 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 f953 	bl	8004ce4 <UART_Transmit_IT>
    return;
 8004a3e:	e014      	b.n	8004a6a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00e      	beq.n	8004a6a <HAL_UART_IRQHandler+0x51e>
 8004a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d008      	beq.n	8004a6a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 f992 	bl	8004d82 <UART_EndTransmit_IT>
    return;
 8004a5e:	e004      	b.n	8004a6a <HAL_UART_IRQHandler+0x51e>
    return;
 8004a60:	bf00      	nop
 8004a62:	e002      	b.n	8004a6a <HAL_UART_IRQHandler+0x51e>
      return;
 8004a64:	bf00      	nop
 8004a66:	e000      	b.n	8004a6a <HAL_UART_IRQHandler+0x51e>
      return;
 8004a68:	bf00      	nop
  }
}
 8004a6a:	37e8      	adds	r7, #232	; 0xe8
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bc80      	pop	{r7}
 8004a80:	4770      	bx	lr

08004a82 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a82:	b480      	push	{r7}
 8004a84:	b083      	sub	sp, #12
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a8a:	bf00      	nop
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bc80      	pop	{r7}
 8004a92:	4770      	bx	lr

08004a94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bc80      	pop	{r7}
 8004aa8:	4770      	bx	lr

08004aaa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b090      	sub	sp, #64	; 0x40
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	60f8      	str	r0, [r7, #12]
 8004ab2:	60b9      	str	r1, [r7, #8]
 8004ab4:	603b      	str	r3, [r7, #0]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aba:	e050      	b.n	8004b5e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004abc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac2:	d04c      	beq.n	8004b5e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ac4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d007      	beq.n	8004ada <UART_WaitOnFlagUntilTimeout+0x30>
 8004aca:	f7fd fb8d 	bl	80021e8 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d241      	bcs.n	8004b5e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	330c      	adds	r3, #12
 8004ae0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae4:	e853 3f00 	ldrex	r3, [r3]
 8004ae8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004af0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	330c      	adds	r3, #12
 8004af8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004afa:	637a      	str	r2, [r7, #52]	; 0x34
 8004afc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b02:	e841 2300 	strex	r3, r2, [r1]
 8004b06:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1e5      	bne.n	8004ada <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	3314      	adds	r3, #20
 8004b14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	e853 3f00 	ldrex	r3, [r3]
 8004b1c:	613b      	str	r3, [r7, #16]
   return(result);
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	f023 0301 	bic.w	r3, r3, #1
 8004b24:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	3314      	adds	r3, #20
 8004b2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b2e:	623a      	str	r2, [r7, #32]
 8004b30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b32:	69f9      	ldr	r1, [r7, #28]
 8004b34:	6a3a      	ldr	r2, [r7, #32]
 8004b36:	e841 2300 	strex	r3, r2, [r1]
 8004b3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1e5      	bne.n	8004b0e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2220      	movs	r2, #32
 8004b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e00f      	b.n	8004b7e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	4013      	ands	r3, r2
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	bf0c      	ite	eq
 8004b6e:	2301      	moveq	r3, #1
 8004b70:	2300      	movne	r3, #0
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	461a      	mov	r2, r3
 8004b76:	79fb      	ldrb	r3, [r7, #7]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d09f      	beq.n	8004abc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3740      	adds	r7, #64	; 0x40
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b085      	sub	sp, #20
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	60f8      	str	r0, [r7, #12]
 8004b8e:	60b9      	str	r1, [r7, #8]
 8004b90:	4613      	mov	r3, r2
 8004b92:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	88fa      	ldrh	r2, [r7, #6]
 8004b9e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	88fa      	ldrh	r2, [r7, #6]
 8004ba4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2222      	movs	r2, #34	; 0x22
 8004bb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d007      	beq.n	8004bcc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68da      	ldr	r2, [r3, #12]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bca:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	695a      	ldr	r2, [r3, #20]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f042 0201 	orr.w	r2, r2, #1
 8004bda:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68da      	ldr	r2, [r3, #12]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f042 0220 	orr.w	r2, r2, #32
 8004bea:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3714      	adds	r7, #20
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bc80      	pop	{r7}
 8004bf6:	4770      	bx	lr

08004bf8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b095      	sub	sp, #84	; 0x54
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	330c      	adds	r3, #12
 8004c06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c0a:	e853 3f00 	ldrex	r3, [r3]
 8004c0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	330c      	adds	r3, #12
 8004c1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c20:	643a      	str	r2, [r7, #64]	; 0x40
 8004c22:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c28:	e841 2300 	strex	r3, r2, [r1]
 8004c2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1e5      	bne.n	8004c00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	3314      	adds	r3, #20
 8004c3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3c:	6a3b      	ldr	r3, [r7, #32]
 8004c3e:	e853 3f00 	ldrex	r3, [r3]
 8004c42:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	f023 0301 	bic.w	r3, r3, #1
 8004c4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	3314      	adds	r3, #20
 8004c52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c5c:	e841 2300 	strex	r3, r2, [r1]
 8004c60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1e5      	bne.n	8004c34 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d119      	bne.n	8004ca4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	330c      	adds	r3, #12
 8004c76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	e853 3f00 	ldrex	r3, [r3]
 8004c7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	f023 0310 	bic.w	r3, r3, #16
 8004c86:	647b      	str	r3, [r7, #68]	; 0x44
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	330c      	adds	r3, #12
 8004c8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c90:	61ba      	str	r2, [r7, #24]
 8004c92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c94:	6979      	ldr	r1, [r7, #20]
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	e841 2300 	strex	r3, r2, [r1]
 8004c9c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1e5      	bne.n	8004c70 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004cb2:	bf00      	nop
 8004cb4:	3754      	adds	r7, #84	; 0x54
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bc80      	pop	{r7}
 8004cba:	4770      	bx	lr

08004cbc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f7ff fed3 	bl	8004a82 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cdc:	bf00      	nop
 8004cde:	3710      	adds	r7, #16
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	2b21      	cmp	r3, #33	; 0x21
 8004cf6:	d13e      	bne.n	8004d76 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d00:	d114      	bne.n	8004d2c <UART_Transmit_IT+0x48>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d110      	bne.n	8004d2c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	881b      	ldrh	r3, [r3, #0]
 8004d14:	461a      	mov	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d1e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a1b      	ldr	r3, [r3, #32]
 8004d24:	1c9a      	adds	r2, r3, #2
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	621a      	str	r2, [r3, #32]
 8004d2a:	e008      	b.n	8004d3e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	1c59      	adds	r1, r3, #1
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	6211      	str	r1, [r2, #32]
 8004d36:	781a      	ldrb	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	3b01      	subs	r3, #1
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10f      	bne.n	8004d72 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68da      	ldr	r2, [r3, #12]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d60:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68da      	ldr	r2, [r3, #12]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d70:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d72:	2300      	movs	r3, #0
 8004d74:	e000      	b.n	8004d78 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d76:	2302      	movs	r3, #2
  }
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3714      	adds	r7, #20
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bc80      	pop	{r7}
 8004d80:	4770      	bx	lr

08004d82 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b082      	sub	sp, #8
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68da      	ldr	r2, [r3, #12]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d98:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f7ff fe64 	bl	8004a70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b08c      	sub	sp, #48	; 0x30
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b22      	cmp	r3, #34	; 0x22
 8004dc4:	f040 80ae 	bne.w	8004f24 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dd0:	d117      	bne.n	8004e02 <UART_Receive_IT+0x50>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d113      	bne.n	8004e02 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfa:	1c9a      	adds	r2, r3, #2
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	629a      	str	r2, [r3, #40]	; 0x28
 8004e00:	e026      	b.n	8004e50 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e06:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e14:	d007      	beq.n	8004e26 <UART_Receive_IT+0x74>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10a      	bne.n	8004e34 <UART_Receive_IT+0x82>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d106      	bne.n	8004e34 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	b2da      	uxtb	r2, r3
 8004e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e30:	701a      	strb	r2, [r3, #0]
 8004e32:	e008      	b.n	8004e46 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e40:	b2da      	uxtb	r2, r3
 8004e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e44:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4a:	1c5a      	adds	r2, r3, #1
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	3b01      	subs	r3, #1
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d15d      	bne.n	8004f20 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68da      	ldr	r2, [r3, #12]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 0220 	bic.w	r2, r2, #32
 8004e72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	695a      	ldr	r2, [r3, #20]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f022 0201 	bic.w	r2, r2, #1
 8004e92:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2220      	movs	r2, #32
 8004e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d135      	bne.n	8004f16 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	330c      	adds	r3, #12
 8004eb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	e853 3f00 	ldrex	r3, [r3]
 8004ebe:	613b      	str	r3, [r7, #16]
   return(result);
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	f023 0310 	bic.w	r3, r3, #16
 8004ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	330c      	adds	r3, #12
 8004ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ed0:	623a      	str	r2, [r7, #32]
 8004ed2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed4:	69f9      	ldr	r1, [r7, #28]
 8004ed6:	6a3a      	ldr	r2, [r7, #32]
 8004ed8:	e841 2300 	strex	r3, r2, [r1]
 8004edc:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1e5      	bne.n	8004eb0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0310 	and.w	r3, r3, #16
 8004eee:	2b10      	cmp	r3, #16
 8004ef0:	d10a      	bne.n	8004f08 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	60fb      	str	r3, [r7, #12]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	60fb      	str	r3, [r7, #12]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	60fb      	str	r3, [r7, #12]
 8004f06:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f7ff fdc0 	bl	8004a94 <HAL_UARTEx_RxEventCallback>
 8004f14:	e002      	b.n	8004f1c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7fb fe22 	bl	8000b60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	e002      	b.n	8004f26 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004f20:	2300      	movs	r3, #0
 8004f22:	e000      	b.n	8004f26 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004f24:	2302      	movs	r3, #2
  }
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3730      	adds	r7, #48	; 0x30
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
	...

08004f30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68da      	ldr	r2, [r3, #12]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	689a      	ldr	r2, [r3, #8]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	431a      	orrs	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004f6a:	f023 030c 	bic.w	r3, r3, #12
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	6812      	ldr	r2, [r2, #0]
 8004f72:	68b9      	ldr	r1, [r7, #8]
 8004f74:	430b      	orrs	r3, r1
 8004f76:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	699a      	ldr	r2, [r3, #24]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a2c      	ldr	r2, [pc, #176]	; (8005044 <UART_SetConfig+0x114>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d103      	bne.n	8004fa0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004f98:	f7fe f8a6 	bl	80030e8 <HAL_RCC_GetPCLK2Freq>
 8004f9c:	60f8      	str	r0, [r7, #12]
 8004f9e:	e002      	b.n	8004fa6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004fa0:	f7fe f88e 	bl	80030c0 <HAL_RCC_GetPCLK1Freq>
 8004fa4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	4413      	add	r3, r2
 8004fae:	009a      	lsls	r2, r3, #2
 8004fb0:	441a      	add	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fbc:	4a22      	ldr	r2, [pc, #136]	; (8005048 <UART_SetConfig+0x118>)
 8004fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc2:	095b      	lsrs	r3, r3, #5
 8004fc4:	0119      	lsls	r1, r3, #4
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	4413      	add	r3, r2
 8004fce:	009a      	lsls	r2, r3, #2
 8004fd0:	441a      	add	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fdc:	4b1a      	ldr	r3, [pc, #104]	; (8005048 <UART_SetConfig+0x118>)
 8004fde:	fba3 0302 	umull	r0, r3, r3, r2
 8004fe2:	095b      	lsrs	r3, r3, #5
 8004fe4:	2064      	movs	r0, #100	; 0x64
 8004fe6:	fb00 f303 	mul.w	r3, r0, r3
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	011b      	lsls	r3, r3, #4
 8004fee:	3332      	adds	r3, #50	; 0x32
 8004ff0:	4a15      	ldr	r2, [pc, #84]	; (8005048 <UART_SetConfig+0x118>)
 8004ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff6:	095b      	lsrs	r3, r3, #5
 8004ff8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ffc:	4419      	add	r1, r3
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	4613      	mov	r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4413      	add	r3, r2
 8005006:	009a      	lsls	r2, r3, #2
 8005008:	441a      	add	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	fbb2 f2f3 	udiv	r2, r2, r3
 8005014:	4b0c      	ldr	r3, [pc, #48]	; (8005048 <UART_SetConfig+0x118>)
 8005016:	fba3 0302 	umull	r0, r3, r3, r2
 800501a:	095b      	lsrs	r3, r3, #5
 800501c:	2064      	movs	r0, #100	; 0x64
 800501e:	fb00 f303 	mul.w	r3, r0, r3
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	011b      	lsls	r3, r3, #4
 8005026:	3332      	adds	r3, #50	; 0x32
 8005028:	4a07      	ldr	r2, [pc, #28]	; (8005048 <UART_SetConfig+0x118>)
 800502a:	fba2 2303 	umull	r2, r3, r2, r3
 800502e:	095b      	lsrs	r3, r3, #5
 8005030:	f003 020f 	and.w	r2, r3, #15
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	440a      	add	r2, r1
 800503a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800503c:	bf00      	nop
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	40013800 	.word	0x40013800
 8005048:	51eb851f 	.word	0x51eb851f

0800504c <std>:
 800504c:	2300      	movs	r3, #0
 800504e:	b510      	push	{r4, lr}
 8005050:	4604      	mov	r4, r0
 8005052:	e9c0 3300 	strd	r3, r3, [r0]
 8005056:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800505a:	6083      	str	r3, [r0, #8]
 800505c:	8181      	strh	r1, [r0, #12]
 800505e:	6643      	str	r3, [r0, #100]	; 0x64
 8005060:	81c2      	strh	r2, [r0, #14]
 8005062:	6183      	str	r3, [r0, #24]
 8005064:	4619      	mov	r1, r3
 8005066:	2208      	movs	r2, #8
 8005068:	305c      	adds	r0, #92	; 0x5c
 800506a:	f000 f9e5 	bl	8005438 <memset>
 800506e:	4b0d      	ldr	r3, [pc, #52]	; (80050a4 <std+0x58>)
 8005070:	6224      	str	r4, [r4, #32]
 8005072:	6263      	str	r3, [r4, #36]	; 0x24
 8005074:	4b0c      	ldr	r3, [pc, #48]	; (80050a8 <std+0x5c>)
 8005076:	62a3      	str	r3, [r4, #40]	; 0x28
 8005078:	4b0c      	ldr	r3, [pc, #48]	; (80050ac <std+0x60>)
 800507a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800507c:	4b0c      	ldr	r3, [pc, #48]	; (80050b0 <std+0x64>)
 800507e:	6323      	str	r3, [r4, #48]	; 0x30
 8005080:	4b0c      	ldr	r3, [pc, #48]	; (80050b4 <std+0x68>)
 8005082:	429c      	cmp	r4, r3
 8005084:	d006      	beq.n	8005094 <std+0x48>
 8005086:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800508a:	4294      	cmp	r4, r2
 800508c:	d002      	beq.n	8005094 <std+0x48>
 800508e:	33d0      	adds	r3, #208	; 0xd0
 8005090:	429c      	cmp	r4, r3
 8005092:	d105      	bne.n	80050a0 <std+0x54>
 8005094:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800509c:	f000 ba56 	b.w	800554c <__retarget_lock_init_recursive>
 80050a0:	bd10      	pop	{r4, pc}
 80050a2:	bf00      	nop
 80050a4:	08005289 	.word	0x08005289
 80050a8:	080052ab 	.word	0x080052ab
 80050ac:	080052e3 	.word	0x080052e3
 80050b0:	08005307 	.word	0x08005307
 80050b4:	20000dbc 	.word	0x20000dbc

080050b8 <stdio_exit_handler>:
 80050b8:	4a02      	ldr	r2, [pc, #8]	; (80050c4 <stdio_exit_handler+0xc>)
 80050ba:	4903      	ldr	r1, [pc, #12]	; (80050c8 <stdio_exit_handler+0x10>)
 80050bc:	4803      	ldr	r0, [pc, #12]	; (80050cc <stdio_exit_handler+0x14>)
 80050be:	f000 b869 	b.w	8005194 <_fwalk_sglue>
 80050c2:	bf00      	nop
 80050c4:	200000e0 	.word	0x200000e0
 80050c8:	08005841 	.word	0x08005841
 80050cc:	200000ec 	.word	0x200000ec

080050d0 <cleanup_stdio>:
 80050d0:	6841      	ldr	r1, [r0, #4]
 80050d2:	4b0c      	ldr	r3, [pc, #48]	; (8005104 <cleanup_stdio+0x34>)
 80050d4:	b510      	push	{r4, lr}
 80050d6:	4299      	cmp	r1, r3
 80050d8:	4604      	mov	r4, r0
 80050da:	d001      	beq.n	80050e0 <cleanup_stdio+0x10>
 80050dc:	f000 fbb0 	bl	8005840 <_fflush_r>
 80050e0:	68a1      	ldr	r1, [r4, #8]
 80050e2:	4b09      	ldr	r3, [pc, #36]	; (8005108 <cleanup_stdio+0x38>)
 80050e4:	4299      	cmp	r1, r3
 80050e6:	d002      	beq.n	80050ee <cleanup_stdio+0x1e>
 80050e8:	4620      	mov	r0, r4
 80050ea:	f000 fba9 	bl	8005840 <_fflush_r>
 80050ee:	68e1      	ldr	r1, [r4, #12]
 80050f0:	4b06      	ldr	r3, [pc, #24]	; (800510c <cleanup_stdio+0x3c>)
 80050f2:	4299      	cmp	r1, r3
 80050f4:	d004      	beq.n	8005100 <cleanup_stdio+0x30>
 80050f6:	4620      	mov	r0, r4
 80050f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050fc:	f000 bba0 	b.w	8005840 <_fflush_r>
 8005100:	bd10      	pop	{r4, pc}
 8005102:	bf00      	nop
 8005104:	20000dbc 	.word	0x20000dbc
 8005108:	20000e24 	.word	0x20000e24
 800510c:	20000e8c 	.word	0x20000e8c

08005110 <global_stdio_init.part.0>:
 8005110:	b510      	push	{r4, lr}
 8005112:	4b0b      	ldr	r3, [pc, #44]	; (8005140 <global_stdio_init.part.0+0x30>)
 8005114:	4c0b      	ldr	r4, [pc, #44]	; (8005144 <global_stdio_init.part.0+0x34>)
 8005116:	4a0c      	ldr	r2, [pc, #48]	; (8005148 <global_stdio_init.part.0+0x38>)
 8005118:	4620      	mov	r0, r4
 800511a:	601a      	str	r2, [r3, #0]
 800511c:	2104      	movs	r1, #4
 800511e:	2200      	movs	r2, #0
 8005120:	f7ff ff94 	bl	800504c <std>
 8005124:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005128:	2201      	movs	r2, #1
 800512a:	2109      	movs	r1, #9
 800512c:	f7ff ff8e 	bl	800504c <std>
 8005130:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005134:	2202      	movs	r2, #2
 8005136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800513a:	2112      	movs	r1, #18
 800513c:	f7ff bf86 	b.w	800504c <std>
 8005140:	20000ef4 	.word	0x20000ef4
 8005144:	20000dbc 	.word	0x20000dbc
 8005148:	080050b9 	.word	0x080050b9

0800514c <__sfp_lock_acquire>:
 800514c:	4801      	ldr	r0, [pc, #4]	; (8005154 <__sfp_lock_acquire+0x8>)
 800514e:	f000 b9fe 	b.w	800554e <__retarget_lock_acquire_recursive>
 8005152:	bf00      	nop
 8005154:	20000efd 	.word	0x20000efd

08005158 <__sfp_lock_release>:
 8005158:	4801      	ldr	r0, [pc, #4]	; (8005160 <__sfp_lock_release+0x8>)
 800515a:	f000 b9f9 	b.w	8005550 <__retarget_lock_release_recursive>
 800515e:	bf00      	nop
 8005160:	20000efd 	.word	0x20000efd

08005164 <__sinit>:
 8005164:	b510      	push	{r4, lr}
 8005166:	4604      	mov	r4, r0
 8005168:	f7ff fff0 	bl	800514c <__sfp_lock_acquire>
 800516c:	6a23      	ldr	r3, [r4, #32]
 800516e:	b11b      	cbz	r3, 8005178 <__sinit+0x14>
 8005170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005174:	f7ff bff0 	b.w	8005158 <__sfp_lock_release>
 8005178:	4b04      	ldr	r3, [pc, #16]	; (800518c <__sinit+0x28>)
 800517a:	6223      	str	r3, [r4, #32]
 800517c:	4b04      	ldr	r3, [pc, #16]	; (8005190 <__sinit+0x2c>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1f5      	bne.n	8005170 <__sinit+0xc>
 8005184:	f7ff ffc4 	bl	8005110 <global_stdio_init.part.0>
 8005188:	e7f2      	b.n	8005170 <__sinit+0xc>
 800518a:	bf00      	nop
 800518c:	080050d1 	.word	0x080050d1
 8005190:	20000ef4 	.word	0x20000ef4

08005194 <_fwalk_sglue>:
 8005194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005198:	4607      	mov	r7, r0
 800519a:	4688      	mov	r8, r1
 800519c:	4614      	mov	r4, r2
 800519e:	2600      	movs	r6, #0
 80051a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051a4:	f1b9 0901 	subs.w	r9, r9, #1
 80051a8:	d505      	bpl.n	80051b6 <_fwalk_sglue+0x22>
 80051aa:	6824      	ldr	r4, [r4, #0]
 80051ac:	2c00      	cmp	r4, #0
 80051ae:	d1f7      	bne.n	80051a0 <_fwalk_sglue+0xc>
 80051b0:	4630      	mov	r0, r6
 80051b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051b6:	89ab      	ldrh	r3, [r5, #12]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d907      	bls.n	80051cc <_fwalk_sglue+0x38>
 80051bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051c0:	3301      	adds	r3, #1
 80051c2:	d003      	beq.n	80051cc <_fwalk_sglue+0x38>
 80051c4:	4629      	mov	r1, r5
 80051c6:	4638      	mov	r0, r7
 80051c8:	47c0      	blx	r8
 80051ca:	4306      	orrs	r6, r0
 80051cc:	3568      	adds	r5, #104	; 0x68
 80051ce:	e7e9      	b.n	80051a4 <_fwalk_sglue+0x10>

080051d0 <_puts_r>:
 80051d0:	6a03      	ldr	r3, [r0, #32]
 80051d2:	b570      	push	{r4, r5, r6, lr}
 80051d4:	4605      	mov	r5, r0
 80051d6:	460e      	mov	r6, r1
 80051d8:	6884      	ldr	r4, [r0, #8]
 80051da:	b90b      	cbnz	r3, 80051e0 <_puts_r+0x10>
 80051dc:	f7ff ffc2 	bl	8005164 <__sinit>
 80051e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051e2:	07db      	lsls	r3, r3, #31
 80051e4:	d405      	bmi.n	80051f2 <_puts_r+0x22>
 80051e6:	89a3      	ldrh	r3, [r4, #12]
 80051e8:	0598      	lsls	r0, r3, #22
 80051ea:	d402      	bmi.n	80051f2 <_puts_r+0x22>
 80051ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051ee:	f000 f9ae 	bl	800554e <__retarget_lock_acquire_recursive>
 80051f2:	89a3      	ldrh	r3, [r4, #12]
 80051f4:	0719      	lsls	r1, r3, #28
 80051f6:	d513      	bpl.n	8005220 <_puts_r+0x50>
 80051f8:	6923      	ldr	r3, [r4, #16]
 80051fa:	b18b      	cbz	r3, 8005220 <_puts_r+0x50>
 80051fc:	3e01      	subs	r6, #1
 80051fe:	68a3      	ldr	r3, [r4, #8]
 8005200:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005204:	3b01      	subs	r3, #1
 8005206:	60a3      	str	r3, [r4, #8]
 8005208:	b9e9      	cbnz	r1, 8005246 <_puts_r+0x76>
 800520a:	2b00      	cmp	r3, #0
 800520c:	da2e      	bge.n	800526c <_puts_r+0x9c>
 800520e:	4622      	mov	r2, r4
 8005210:	210a      	movs	r1, #10
 8005212:	4628      	mov	r0, r5
 8005214:	f000 f87b 	bl	800530e <__swbuf_r>
 8005218:	3001      	adds	r0, #1
 800521a:	d007      	beq.n	800522c <_puts_r+0x5c>
 800521c:	250a      	movs	r5, #10
 800521e:	e007      	b.n	8005230 <_puts_r+0x60>
 8005220:	4621      	mov	r1, r4
 8005222:	4628      	mov	r0, r5
 8005224:	f000 f8b0 	bl	8005388 <__swsetup_r>
 8005228:	2800      	cmp	r0, #0
 800522a:	d0e7      	beq.n	80051fc <_puts_r+0x2c>
 800522c:	f04f 35ff 	mov.w	r5, #4294967295
 8005230:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005232:	07da      	lsls	r2, r3, #31
 8005234:	d405      	bmi.n	8005242 <_puts_r+0x72>
 8005236:	89a3      	ldrh	r3, [r4, #12]
 8005238:	059b      	lsls	r3, r3, #22
 800523a:	d402      	bmi.n	8005242 <_puts_r+0x72>
 800523c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800523e:	f000 f987 	bl	8005550 <__retarget_lock_release_recursive>
 8005242:	4628      	mov	r0, r5
 8005244:	bd70      	pop	{r4, r5, r6, pc}
 8005246:	2b00      	cmp	r3, #0
 8005248:	da04      	bge.n	8005254 <_puts_r+0x84>
 800524a:	69a2      	ldr	r2, [r4, #24]
 800524c:	429a      	cmp	r2, r3
 800524e:	dc06      	bgt.n	800525e <_puts_r+0x8e>
 8005250:	290a      	cmp	r1, #10
 8005252:	d004      	beq.n	800525e <_puts_r+0x8e>
 8005254:	6823      	ldr	r3, [r4, #0]
 8005256:	1c5a      	adds	r2, r3, #1
 8005258:	6022      	str	r2, [r4, #0]
 800525a:	7019      	strb	r1, [r3, #0]
 800525c:	e7cf      	b.n	80051fe <_puts_r+0x2e>
 800525e:	4622      	mov	r2, r4
 8005260:	4628      	mov	r0, r5
 8005262:	f000 f854 	bl	800530e <__swbuf_r>
 8005266:	3001      	adds	r0, #1
 8005268:	d1c9      	bne.n	80051fe <_puts_r+0x2e>
 800526a:	e7df      	b.n	800522c <_puts_r+0x5c>
 800526c:	250a      	movs	r5, #10
 800526e:	6823      	ldr	r3, [r4, #0]
 8005270:	1c5a      	adds	r2, r3, #1
 8005272:	6022      	str	r2, [r4, #0]
 8005274:	701d      	strb	r5, [r3, #0]
 8005276:	e7db      	b.n	8005230 <_puts_r+0x60>

08005278 <puts>:
 8005278:	4b02      	ldr	r3, [pc, #8]	; (8005284 <puts+0xc>)
 800527a:	4601      	mov	r1, r0
 800527c:	6818      	ldr	r0, [r3, #0]
 800527e:	f7ff bfa7 	b.w	80051d0 <_puts_r>
 8005282:	bf00      	nop
 8005284:	20000138 	.word	0x20000138

08005288 <__sread>:
 8005288:	b510      	push	{r4, lr}
 800528a:	460c      	mov	r4, r1
 800528c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005290:	f000 f90e 	bl	80054b0 <_read_r>
 8005294:	2800      	cmp	r0, #0
 8005296:	bfab      	itete	ge
 8005298:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800529a:	89a3      	ldrhlt	r3, [r4, #12]
 800529c:	181b      	addge	r3, r3, r0
 800529e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80052a2:	bfac      	ite	ge
 80052a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80052a6:	81a3      	strhlt	r3, [r4, #12]
 80052a8:	bd10      	pop	{r4, pc}

080052aa <__swrite>:
 80052aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052ae:	461f      	mov	r7, r3
 80052b0:	898b      	ldrh	r3, [r1, #12]
 80052b2:	4605      	mov	r5, r0
 80052b4:	05db      	lsls	r3, r3, #23
 80052b6:	460c      	mov	r4, r1
 80052b8:	4616      	mov	r6, r2
 80052ba:	d505      	bpl.n	80052c8 <__swrite+0x1e>
 80052bc:	2302      	movs	r3, #2
 80052be:	2200      	movs	r2, #0
 80052c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052c4:	f000 f8e2 	bl	800548c <_lseek_r>
 80052c8:	89a3      	ldrh	r3, [r4, #12]
 80052ca:	4632      	mov	r2, r6
 80052cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052d0:	81a3      	strh	r3, [r4, #12]
 80052d2:	4628      	mov	r0, r5
 80052d4:	463b      	mov	r3, r7
 80052d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052de:	f000 b8f9 	b.w	80054d4 <_write_r>

080052e2 <__sseek>:
 80052e2:	b510      	push	{r4, lr}
 80052e4:	460c      	mov	r4, r1
 80052e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052ea:	f000 f8cf 	bl	800548c <_lseek_r>
 80052ee:	1c43      	adds	r3, r0, #1
 80052f0:	89a3      	ldrh	r3, [r4, #12]
 80052f2:	bf15      	itete	ne
 80052f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80052f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80052fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80052fe:	81a3      	strheq	r3, [r4, #12]
 8005300:	bf18      	it	ne
 8005302:	81a3      	strhne	r3, [r4, #12]
 8005304:	bd10      	pop	{r4, pc}

08005306 <__sclose>:
 8005306:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800530a:	f000 b8af 	b.w	800546c <_close_r>

0800530e <__swbuf_r>:
 800530e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005310:	460e      	mov	r6, r1
 8005312:	4614      	mov	r4, r2
 8005314:	4605      	mov	r5, r0
 8005316:	b118      	cbz	r0, 8005320 <__swbuf_r+0x12>
 8005318:	6a03      	ldr	r3, [r0, #32]
 800531a:	b90b      	cbnz	r3, 8005320 <__swbuf_r+0x12>
 800531c:	f7ff ff22 	bl	8005164 <__sinit>
 8005320:	69a3      	ldr	r3, [r4, #24]
 8005322:	60a3      	str	r3, [r4, #8]
 8005324:	89a3      	ldrh	r3, [r4, #12]
 8005326:	071a      	lsls	r2, r3, #28
 8005328:	d525      	bpl.n	8005376 <__swbuf_r+0x68>
 800532a:	6923      	ldr	r3, [r4, #16]
 800532c:	b31b      	cbz	r3, 8005376 <__swbuf_r+0x68>
 800532e:	6823      	ldr	r3, [r4, #0]
 8005330:	6922      	ldr	r2, [r4, #16]
 8005332:	b2f6      	uxtb	r6, r6
 8005334:	1a98      	subs	r0, r3, r2
 8005336:	6963      	ldr	r3, [r4, #20]
 8005338:	4637      	mov	r7, r6
 800533a:	4283      	cmp	r3, r0
 800533c:	dc04      	bgt.n	8005348 <__swbuf_r+0x3a>
 800533e:	4621      	mov	r1, r4
 8005340:	4628      	mov	r0, r5
 8005342:	f000 fa7d 	bl	8005840 <_fflush_r>
 8005346:	b9e0      	cbnz	r0, 8005382 <__swbuf_r+0x74>
 8005348:	68a3      	ldr	r3, [r4, #8]
 800534a:	3b01      	subs	r3, #1
 800534c:	60a3      	str	r3, [r4, #8]
 800534e:	6823      	ldr	r3, [r4, #0]
 8005350:	1c5a      	adds	r2, r3, #1
 8005352:	6022      	str	r2, [r4, #0]
 8005354:	701e      	strb	r6, [r3, #0]
 8005356:	6962      	ldr	r2, [r4, #20]
 8005358:	1c43      	adds	r3, r0, #1
 800535a:	429a      	cmp	r2, r3
 800535c:	d004      	beq.n	8005368 <__swbuf_r+0x5a>
 800535e:	89a3      	ldrh	r3, [r4, #12]
 8005360:	07db      	lsls	r3, r3, #31
 8005362:	d506      	bpl.n	8005372 <__swbuf_r+0x64>
 8005364:	2e0a      	cmp	r6, #10
 8005366:	d104      	bne.n	8005372 <__swbuf_r+0x64>
 8005368:	4621      	mov	r1, r4
 800536a:	4628      	mov	r0, r5
 800536c:	f000 fa68 	bl	8005840 <_fflush_r>
 8005370:	b938      	cbnz	r0, 8005382 <__swbuf_r+0x74>
 8005372:	4638      	mov	r0, r7
 8005374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005376:	4621      	mov	r1, r4
 8005378:	4628      	mov	r0, r5
 800537a:	f000 f805 	bl	8005388 <__swsetup_r>
 800537e:	2800      	cmp	r0, #0
 8005380:	d0d5      	beq.n	800532e <__swbuf_r+0x20>
 8005382:	f04f 37ff 	mov.w	r7, #4294967295
 8005386:	e7f4      	b.n	8005372 <__swbuf_r+0x64>

08005388 <__swsetup_r>:
 8005388:	b538      	push	{r3, r4, r5, lr}
 800538a:	4b2a      	ldr	r3, [pc, #168]	; (8005434 <__swsetup_r+0xac>)
 800538c:	4605      	mov	r5, r0
 800538e:	6818      	ldr	r0, [r3, #0]
 8005390:	460c      	mov	r4, r1
 8005392:	b118      	cbz	r0, 800539c <__swsetup_r+0x14>
 8005394:	6a03      	ldr	r3, [r0, #32]
 8005396:	b90b      	cbnz	r3, 800539c <__swsetup_r+0x14>
 8005398:	f7ff fee4 	bl	8005164 <__sinit>
 800539c:	89a3      	ldrh	r3, [r4, #12]
 800539e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80053a2:	0718      	lsls	r0, r3, #28
 80053a4:	d422      	bmi.n	80053ec <__swsetup_r+0x64>
 80053a6:	06d9      	lsls	r1, r3, #27
 80053a8:	d407      	bmi.n	80053ba <__swsetup_r+0x32>
 80053aa:	2309      	movs	r3, #9
 80053ac:	602b      	str	r3, [r5, #0]
 80053ae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80053b2:	f04f 30ff 	mov.w	r0, #4294967295
 80053b6:	81a3      	strh	r3, [r4, #12]
 80053b8:	e034      	b.n	8005424 <__swsetup_r+0x9c>
 80053ba:	0758      	lsls	r0, r3, #29
 80053bc:	d512      	bpl.n	80053e4 <__swsetup_r+0x5c>
 80053be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053c0:	b141      	cbz	r1, 80053d4 <__swsetup_r+0x4c>
 80053c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053c6:	4299      	cmp	r1, r3
 80053c8:	d002      	beq.n	80053d0 <__swsetup_r+0x48>
 80053ca:	4628      	mov	r0, r5
 80053cc:	f000 f8c2 	bl	8005554 <_free_r>
 80053d0:	2300      	movs	r3, #0
 80053d2:	6363      	str	r3, [r4, #52]	; 0x34
 80053d4:	89a3      	ldrh	r3, [r4, #12]
 80053d6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80053da:	81a3      	strh	r3, [r4, #12]
 80053dc:	2300      	movs	r3, #0
 80053de:	6063      	str	r3, [r4, #4]
 80053e0:	6923      	ldr	r3, [r4, #16]
 80053e2:	6023      	str	r3, [r4, #0]
 80053e4:	89a3      	ldrh	r3, [r4, #12]
 80053e6:	f043 0308 	orr.w	r3, r3, #8
 80053ea:	81a3      	strh	r3, [r4, #12]
 80053ec:	6923      	ldr	r3, [r4, #16]
 80053ee:	b94b      	cbnz	r3, 8005404 <__swsetup_r+0x7c>
 80053f0:	89a3      	ldrh	r3, [r4, #12]
 80053f2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80053f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053fa:	d003      	beq.n	8005404 <__swsetup_r+0x7c>
 80053fc:	4621      	mov	r1, r4
 80053fe:	4628      	mov	r0, r5
 8005400:	f000 fa6b 	bl	80058da <__smakebuf_r>
 8005404:	89a0      	ldrh	r0, [r4, #12]
 8005406:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800540a:	f010 0301 	ands.w	r3, r0, #1
 800540e:	d00a      	beq.n	8005426 <__swsetup_r+0x9e>
 8005410:	2300      	movs	r3, #0
 8005412:	60a3      	str	r3, [r4, #8]
 8005414:	6963      	ldr	r3, [r4, #20]
 8005416:	425b      	negs	r3, r3
 8005418:	61a3      	str	r3, [r4, #24]
 800541a:	6923      	ldr	r3, [r4, #16]
 800541c:	b943      	cbnz	r3, 8005430 <__swsetup_r+0xa8>
 800541e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005422:	d1c4      	bne.n	80053ae <__swsetup_r+0x26>
 8005424:	bd38      	pop	{r3, r4, r5, pc}
 8005426:	0781      	lsls	r1, r0, #30
 8005428:	bf58      	it	pl
 800542a:	6963      	ldrpl	r3, [r4, #20]
 800542c:	60a3      	str	r3, [r4, #8]
 800542e:	e7f4      	b.n	800541a <__swsetup_r+0x92>
 8005430:	2000      	movs	r0, #0
 8005432:	e7f7      	b.n	8005424 <__swsetup_r+0x9c>
 8005434:	20000138 	.word	0x20000138

08005438 <memset>:
 8005438:	4603      	mov	r3, r0
 800543a:	4402      	add	r2, r0
 800543c:	4293      	cmp	r3, r2
 800543e:	d100      	bne.n	8005442 <memset+0xa>
 8005440:	4770      	bx	lr
 8005442:	f803 1b01 	strb.w	r1, [r3], #1
 8005446:	e7f9      	b.n	800543c <memset+0x4>

08005448 <strncmp>:
 8005448:	b510      	push	{r4, lr}
 800544a:	b16a      	cbz	r2, 8005468 <strncmp+0x20>
 800544c:	3901      	subs	r1, #1
 800544e:	1884      	adds	r4, r0, r2
 8005450:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005454:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005458:	429a      	cmp	r2, r3
 800545a:	d103      	bne.n	8005464 <strncmp+0x1c>
 800545c:	42a0      	cmp	r0, r4
 800545e:	d001      	beq.n	8005464 <strncmp+0x1c>
 8005460:	2a00      	cmp	r2, #0
 8005462:	d1f5      	bne.n	8005450 <strncmp+0x8>
 8005464:	1ad0      	subs	r0, r2, r3
 8005466:	bd10      	pop	{r4, pc}
 8005468:	4610      	mov	r0, r2
 800546a:	e7fc      	b.n	8005466 <strncmp+0x1e>

0800546c <_close_r>:
 800546c:	b538      	push	{r3, r4, r5, lr}
 800546e:	2300      	movs	r3, #0
 8005470:	4d05      	ldr	r5, [pc, #20]	; (8005488 <_close_r+0x1c>)
 8005472:	4604      	mov	r4, r0
 8005474:	4608      	mov	r0, r1
 8005476:	602b      	str	r3, [r5, #0]
 8005478:	f7fc fdcb 	bl	8002012 <_close>
 800547c:	1c43      	adds	r3, r0, #1
 800547e:	d102      	bne.n	8005486 <_close_r+0x1a>
 8005480:	682b      	ldr	r3, [r5, #0]
 8005482:	b103      	cbz	r3, 8005486 <_close_r+0x1a>
 8005484:	6023      	str	r3, [r4, #0]
 8005486:	bd38      	pop	{r3, r4, r5, pc}
 8005488:	20000ef8 	.word	0x20000ef8

0800548c <_lseek_r>:
 800548c:	b538      	push	{r3, r4, r5, lr}
 800548e:	4604      	mov	r4, r0
 8005490:	4608      	mov	r0, r1
 8005492:	4611      	mov	r1, r2
 8005494:	2200      	movs	r2, #0
 8005496:	4d05      	ldr	r5, [pc, #20]	; (80054ac <_lseek_r+0x20>)
 8005498:	602a      	str	r2, [r5, #0]
 800549a:	461a      	mov	r2, r3
 800549c:	f7fc fddd 	bl	800205a <_lseek>
 80054a0:	1c43      	adds	r3, r0, #1
 80054a2:	d102      	bne.n	80054aa <_lseek_r+0x1e>
 80054a4:	682b      	ldr	r3, [r5, #0]
 80054a6:	b103      	cbz	r3, 80054aa <_lseek_r+0x1e>
 80054a8:	6023      	str	r3, [r4, #0]
 80054aa:	bd38      	pop	{r3, r4, r5, pc}
 80054ac:	20000ef8 	.word	0x20000ef8

080054b0 <_read_r>:
 80054b0:	b538      	push	{r3, r4, r5, lr}
 80054b2:	4604      	mov	r4, r0
 80054b4:	4608      	mov	r0, r1
 80054b6:	4611      	mov	r1, r2
 80054b8:	2200      	movs	r2, #0
 80054ba:	4d05      	ldr	r5, [pc, #20]	; (80054d0 <_read_r+0x20>)
 80054bc:	602a      	str	r2, [r5, #0]
 80054be:	461a      	mov	r2, r3
 80054c0:	f7fc fd8a 	bl	8001fd8 <_read>
 80054c4:	1c43      	adds	r3, r0, #1
 80054c6:	d102      	bne.n	80054ce <_read_r+0x1e>
 80054c8:	682b      	ldr	r3, [r5, #0]
 80054ca:	b103      	cbz	r3, 80054ce <_read_r+0x1e>
 80054cc:	6023      	str	r3, [r4, #0]
 80054ce:	bd38      	pop	{r3, r4, r5, pc}
 80054d0:	20000ef8 	.word	0x20000ef8

080054d4 <_write_r>:
 80054d4:	b538      	push	{r3, r4, r5, lr}
 80054d6:	4604      	mov	r4, r0
 80054d8:	4608      	mov	r0, r1
 80054da:	4611      	mov	r1, r2
 80054dc:	2200      	movs	r2, #0
 80054de:	4d05      	ldr	r5, [pc, #20]	; (80054f4 <_write_r+0x20>)
 80054e0:	602a      	str	r2, [r5, #0]
 80054e2:	461a      	mov	r2, r3
 80054e4:	f7fa fe32 	bl	800014c <_write>
 80054e8:	1c43      	adds	r3, r0, #1
 80054ea:	d102      	bne.n	80054f2 <_write_r+0x1e>
 80054ec:	682b      	ldr	r3, [r5, #0]
 80054ee:	b103      	cbz	r3, 80054f2 <_write_r+0x1e>
 80054f0:	6023      	str	r3, [r4, #0]
 80054f2:	bd38      	pop	{r3, r4, r5, pc}
 80054f4:	20000ef8 	.word	0x20000ef8

080054f8 <__errno>:
 80054f8:	4b01      	ldr	r3, [pc, #4]	; (8005500 <__errno+0x8>)
 80054fa:	6818      	ldr	r0, [r3, #0]
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	20000138 	.word	0x20000138

08005504 <__libc_init_array>:
 8005504:	b570      	push	{r4, r5, r6, lr}
 8005506:	2600      	movs	r6, #0
 8005508:	4d0c      	ldr	r5, [pc, #48]	; (800553c <__libc_init_array+0x38>)
 800550a:	4c0d      	ldr	r4, [pc, #52]	; (8005540 <__libc_init_array+0x3c>)
 800550c:	1b64      	subs	r4, r4, r5
 800550e:	10a4      	asrs	r4, r4, #2
 8005510:	42a6      	cmp	r6, r4
 8005512:	d109      	bne.n	8005528 <__libc_init_array+0x24>
 8005514:	f000 fa50 	bl	80059b8 <_init>
 8005518:	2600      	movs	r6, #0
 800551a:	4d0a      	ldr	r5, [pc, #40]	; (8005544 <__libc_init_array+0x40>)
 800551c:	4c0a      	ldr	r4, [pc, #40]	; (8005548 <__libc_init_array+0x44>)
 800551e:	1b64      	subs	r4, r4, r5
 8005520:	10a4      	asrs	r4, r4, #2
 8005522:	42a6      	cmp	r6, r4
 8005524:	d105      	bne.n	8005532 <__libc_init_array+0x2e>
 8005526:	bd70      	pop	{r4, r5, r6, pc}
 8005528:	f855 3b04 	ldr.w	r3, [r5], #4
 800552c:	4798      	blx	r3
 800552e:	3601      	adds	r6, #1
 8005530:	e7ee      	b.n	8005510 <__libc_init_array+0xc>
 8005532:	f855 3b04 	ldr.w	r3, [r5], #4
 8005536:	4798      	blx	r3
 8005538:	3601      	adds	r6, #1
 800553a:	e7f2      	b.n	8005522 <__libc_init_array+0x1e>
 800553c:	08005b50 	.word	0x08005b50
 8005540:	08005b50 	.word	0x08005b50
 8005544:	08005b50 	.word	0x08005b50
 8005548:	08005b54 	.word	0x08005b54

0800554c <__retarget_lock_init_recursive>:
 800554c:	4770      	bx	lr

0800554e <__retarget_lock_acquire_recursive>:
 800554e:	4770      	bx	lr

08005550 <__retarget_lock_release_recursive>:
 8005550:	4770      	bx	lr
	...

08005554 <_free_r>:
 8005554:	b538      	push	{r3, r4, r5, lr}
 8005556:	4605      	mov	r5, r0
 8005558:	2900      	cmp	r1, #0
 800555a:	d040      	beq.n	80055de <_free_r+0x8a>
 800555c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005560:	1f0c      	subs	r4, r1, #4
 8005562:	2b00      	cmp	r3, #0
 8005564:	bfb8      	it	lt
 8005566:	18e4      	addlt	r4, r4, r3
 8005568:	f000 f8dc 	bl	8005724 <__malloc_lock>
 800556c:	4a1c      	ldr	r2, [pc, #112]	; (80055e0 <_free_r+0x8c>)
 800556e:	6813      	ldr	r3, [r2, #0]
 8005570:	b933      	cbnz	r3, 8005580 <_free_r+0x2c>
 8005572:	6063      	str	r3, [r4, #4]
 8005574:	6014      	str	r4, [r2, #0]
 8005576:	4628      	mov	r0, r5
 8005578:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800557c:	f000 b8d8 	b.w	8005730 <__malloc_unlock>
 8005580:	42a3      	cmp	r3, r4
 8005582:	d908      	bls.n	8005596 <_free_r+0x42>
 8005584:	6820      	ldr	r0, [r4, #0]
 8005586:	1821      	adds	r1, r4, r0
 8005588:	428b      	cmp	r3, r1
 800558a:	bf01      	itttt	eq
 800558c:	6819      	ldreq	r1, [r3, #0]
 800558e:	685b      	ldreq	r3, [r3, #4]
 8005590:	1809      	addeq	r1, r1, r0
 8005592:	6021      	streq	r1, [r4, #0]
 8005594:	e7ed      	b.n	8005572 <_free_r+0x1e>
 8005596:	461a      	mov	r2, r3
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	b10b      	cbz	r3, 80055a0 <_free_r+0x4c>
 800559c:	42a3      	cmp	r3, r4
 800559e:	d9fa      	bls.n	8005596 <_free_r+0x42>
 80055a0:	6811      	ldr	r1, [r2, #0]
 80055a2:	1850      	adds	r0, r2, r1
 80055a4:	42a0      	cmp	r0, r4
 80055a6:	d10b      	bne.n	80055c0 <_free_r+0x6c>
 80055a8:	6820      	ldr	r0, [r4, #0]
 80055aa:	4401      	add	r1, r0
 80055ac:	1850      	adds	r0, r2, r1
 80055ae:	4283      	cmp	r3, r0
 80055b0:	6011      	str	r1, [r2, #0]
 80055b2:	d1e0      	bne.n	8005576 <_free_r+0x22>
 80055b4:	6818      	ldr	r0, [r3, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	4408      	add	r0, r1
 80055ba:	6010      	str	r0, [r2, #0]
 80055bc:	6053      	str	r3, [r2, #4]
 80055be:	e7da      	b.n	8005576 <_free_r+0x22>
 80055c0:	d902      	bls.n	80055c8 <_free_r+0x74>
 80055c2:	230c      	movs	r3, #12
 80055c4:	602b      	str	r3, [r5, #0]
 80055c6:	e7d6      	b.n	8005576 <_free_r+0x22>
 80055c8:	6820      	ldr	r0, [r4, #0]
 80055ca:	1821      	adds	r1, r4, r0
 80055cc:	428b      	cmp	r3, r1
 80055ce:	bf01      	itttt	eq
 80055d0:	6819      	ldreq	r1, [r3, #0]
 80055d2:	685b      	ldreq	r3, [r3, #4]
 80055d4:	1809      	addeq	r1, r1, r0
 80055d6:	6021      	streq	r1, [r4, #0]
 80055d8:	6063      	str	r3, [r4, #4]
 80055da:	6054      	str	r4, [r2, #4]
 80055dc:	e7cb      	b.n	8005576 <_free_r+0x22>
 80055de:	bd38      	pop	{r3, r4, r5, pc}
 80055e0:	20000f00 	.word	0x20000f00

080055e4 <sbrk_aligned>:
 80055e4:	b570      	push	{r4, r5, r6, lr}
 80055e6:	4e0e      	ldr	r6, [pc, #56]	; (8005620 <sbrk_aligned+0x3c>)
 80055e8:	460c      	mov	r4, r1
 80055ea:	6831      	ldr	r1, [r6, #0]
 80055ec:	4605      	mov	r5, r0
 80055ee:	b911      	cbnz	r1, 80055f6 <sbrk_aligned+0x12>
 80055f0:	f000 f9d2 	bl	8005998 <_sbrk_r>
 80055f4:	6030      	str	r0, [r6, #0]
 80055f6:	4621      	mov	r1, r4
 80055f8:	4628      	mov	r0, r5
 80055fa:	f000 f9cd 	bl	8005998 <_sbrk_r>
 80055fe:	1c43      	adds	r3, r0, #1
 8005600:	d00a      	beq.n	8005618 <sbrk_aligned+0x34>
 8005602:	1cc4      	adds	r4, r0, #3
 8005604:	f024 0403 	bic.w	r4, r4, #3
 8005608:	42a0      	cmp	r0, r4
 800560a:	d007      	beq.n	800561c <sbrk_aligned+0x38>
 800560c:	1a21      	subs	r1, r4, r0
 800560e:	4628      	mov	r0, r5
 8005610:	f000 f9c2 	bl	8005998 <_sbrk_r>
 8005614:	3001      	adds	r0, #1
 8005616:	d101      	bne.n	800561c <sbrk_aligned+0x38>
 8005618:	f04f 34ff 	mov.w	r4, #4294967295
 800561c:	4620      	mov	r0, r4
 800561e:	bd70      	pop	{r4, r5, r6, pc}
 8005620:	20000f04 	.word	0x20000f04

08005624 <_malloc_r>:
 8005624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005628:	1ccd      	adds	r5, r1, #3
 800562a:	f025 0503 	bic.w	r5, r5, #3
 800562e:	3508      	adds	r5, #8
 8005630:	2d0c      	cmp	r5, #12
 8005632:	bf38      	it	cc
 8005634:	250c      	movcc	r5, #12
 8005636:	2d00      	cmp	r5, #0
 8005638:	4607      	mov	r7, r0
 800563a:	db01      	blt.n	8005640 <_malloc_r+0x1c>
 800563c:	42a9      	cmp	r1, r5
 800563e:	d905      	bls.n	800564c <_malloc_r+0x28>
 8005640:	230c      	movs	r3, #12
 8005642:	2600      	movs	r6, #0
 8005644:	603b      	str	r3, [r7, #0]
 8005646:	4630      	mov	r0, r6
 8005648:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800564c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005720 <_malloc_r+0xfc>
 8005650:	f000 f868 	bl	8005724 <__malloc_lock>
 8005654:	f8d8 3000 	ldr.w	r3, [r8]
 8005658:	461c      	mov	r4, r3
 800565a:	bb5c      	cbnz	r4, 80056b4 <_malloc_r+0x90>
 800565c:	4629      	mov	r1, r5
 800565e:	4638      	mov	r0, r7
 8005660:	f7ff ffc0 	bl	80055e4 <sbrk_aligned>
 8005664:	1c43      	adds	r3, r0, #1
 8005666:	4604      	mov	r4, r0
 8005668:	d155      	bne.n	8005716 <_malloc_r+0xf2>
 800566a:	f8d8 4000 	ldr.w	r4, [r8]
 800566e:	4626      	mov	r6, r4
 8005670:	2e00      	cmp	r6, #0
 8005672:	d145      	bne.n	8005700 <_malloc_r+0xdc>
 8005674:	2c00      	cmp	r4, #0
 8005676:	d048      	beq.n	800570a <_malloc_r+0xe6>
 8005678:	6823      	ldr	r3, [r4, #0]
 800567a:	4631      	mov	r1, r6
 800567c:	4638      	mov	r0, r7
 800567e:	eb04 0903 	add.w	r9, r4, r3
 8005682:	f000 f989 	bl	8005998 <_sbrk_r>
 8005686:	4581      	cmp	r9, r0
 8005688:	d13f      	bne.n	800570a <_malloc_r+0xe6>
 800568a:	6821      	ldr	r1, [r4, #0]
 800568c:	4638      	mov	r0, r7
 800568e:	1a6d      	subs	r5, r5, r1
 8005690:	4629      	mov	r1, r5
 8005692:	f7ff ffa7 	bl	80055e4 <sbrk_aligned>
 8005696:	3001      	adds	r0, #1
 8005698:	d037      	beq.n	800570a <_malloc_r+0xe6>
 800569a:	6823      	ldr	r3, [r4, #0]
 800569c:	442b      	add	r3, r5
 800569e:	6023      	str	r3, [r4, #0]
 80056a0:	f8d8 3000 	ldr.w	r3, [r8]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d038      	beq.n	800571a <_malloc_r+0xf6>
 80056a8:	685a      	ldr	r2, [r3, #4]
 80056aa:	42a2      	cmp	r2, r4
 80056ac:	d12b      	bne.n	8005706 <_malloc_r+0xe2>
 80056ae:	2200      	movs	r2, #0
 80056b0:	605a      	str	r2, [r3, #4]
 80056b2:	e00f      	b.n	80056d4 <_malloc_r+0xb0>
 80056b4:	6822      	ldr	r2, [r4, #0]
 80056b6:	1b52      	subs	r2, r2, r5
 80056b8:	d41f      	bmi.n	80056fa <_malloc_r+0xd6>
 80056ba:	2a0b      	cmp	r2, #11
 80056bc:	d917      	bls.n	80056ee <_malloc_r+0xca>
 80056be:	1961      	adds	r1, r4, r5
 80056c0:	42a3      	cmp	r3, r4
 80056c2:	6025      	str	r5, [r4, #0]
 80056c4:	bf18      	it	ne
 80056c6:	6059      	strne	r1, [r3, #4]
 80056c8:	6863      	ldr	r3, [r4, #4]
 80056ca:	bf08      	it	eq
 80056cc:	f8c8 1000 	streq.w	r1, [r8]
 80056d0:	5162      	str	r2, [r4, r5]
 80056d2:	604b      	str	r3, [r1, #4]
 80056d4:	4638      	mov	r0, r7
 80056d6:	f104 060b 	add.w	r6, r4, #11
 80056da:	f000 f829 	bl	8005730 <__malloc_unlock>
 80056de:	f026 0607 	bic.w	r6, r6, #7
 80056e2:	1d23      	adds	r3, r4, #4
 80056e4:	1af2      	subs	r2, r6, r3
 80056e6:	d0ae      	beq.n	8005646 <_malloc_r+0x22>
 80056e8:	1b9b      	subs	r3, r3, r6
 80056ea:	50a3      	str	r3, [r4, r2]
 80056ec:	e7ab      	b.n	8005646 <_malloc_r+0x22>
 80056ee:	42a3      	cmp	r3, r4
 80056f0:	6862      	ldr	r2, [r4, #4]
 80056f2:	d1dd      	bne.n	80056b0 <_malloc_r+0x8c>
 80056f4:	f8c8 2000 	str.w	r2, [r8]
 80056f8:	e7ec      	b.n	80056d4 <_malloc_r+0xb0>
 80056fa:	4623      	mov	r3, r4
 80056fc:	6864      	ldr	r4, [r4, #4]
 80056fe:	e7ac      	b.n	800565a <_malloc_r+0x36>
 8005700:	4634      	mov	r4, r6
 8005702:	6876      	ldr	r6, [r6, #4]
 8005704:	e7b4      	b.n	8005670 <_malloc_r+0x4c>
 8005706:	4613      	mov	r3, r2
 8005708:	e7cc      	b.n	80056a4 <_malloc_r+0x80>
 800570a:	230c      	movs	r3, #12
 800570c:	4638      	mov	r0, r7
 800570e:	603b      	str	r3, [r7, #0]
 8005710:	f000 f80e 	bl	8005730 <__malloc_unlock>
 8005714:	e797      	b.n	8005646 <_malloc_r+0x22>
 8005716:	6025      	str	r5, [r4, #0]
 8005718:	e7dc      	b.n	80056d4 <_malloc_r+0xb0>
 800571a:	605b      	str	r3, [r3, #4]
 800571c:	deff      	udf	#255	; 0xff
 800571e:	bf00      	nop
 8005720:	20000f00 	.word	0x20000f00

08005724 <__malloc_lock>:
 8005724:	4801      	ldr	r0, [pc, #4]	; (800572c <__malloc_lock+0x8>)
 8005726:	f7ff bf12 	b.w	800554e <__retarget_lock_acquire_recursive>
 800572a:	bf00      	nop
 800572c:	20000efc 	.word	0x20000efc

08005730 <__malloc_unlock>:
 8005730:	4801      	ldr	r0, [pc, #4]	; (8005738 <__malloc_unlock+0x8>)
 8005732:	f7ff bf0d 	b.w	8005550 <__retarget_lock_release_recursive>
 8005736:	bf00      	nop
 8005738:	20000efc 	.word	0x20000efc

0800573c <__sflush_r>:
 800573c:	898a      	ldrh	r2, [r1, #12]
 800573e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005740:	4605      	mov	r5, r0
 8005742:	0710      	lsls	r0, r2, #28
 8005744:	460c      	mov	r4, r1
 8005746:	d457      	bmi.n	80057f8 <__sflush_r+0xbc>
 8005748:	684b      	ldr	r3, [r1, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	dc04      	bgt.n	8005758 <__sflush_r+0x1c>
 800574e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005750:	2b00      	cmp	r3, #0
 8005752:	dc01      	bgt.n	8005758 <__sflush_r+0x1c>
 8005754:	2000      	movs	r0, #0
 8005756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005758:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800575a:	2e00      	cmp	r6, #0
 800575c:	d0fa      	beq.n	8005754 <__sflush_r+0x18>
 800575e:	2300      	movs	r3, #0
 8005760:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005764:	682f      	ldr	r7, [r5, #0]
 8005766:	6a21      	ldr	r1, [r4, #32]
 8005768:	602b      	str	r3, [r5, #0]
 800576a:	d032      	beq.n	80057d2 <__sflush_r+0x96>
 800576c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800576e:	89a3      	ldrh	r3, [r4, #12]
 8005770:	075a      	lsls	r2, r3, #29
 8005772:	d505      	bpl.n	8005780 <__sflush_r+0x44>
 8005774:	6863      	ldr	r3, [r4, #4]
 8005776:	1ac0      	subs	r0, r0, r3
 8005778:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800577a:	b10b      	cbz	r3, 8005780 <__sflush_r+0x44>
 800577c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800577e:	1ac0      	subs	r0, r0, r3
 8005780:	2300      	movs	r3, #0
 8005782:	4602      	mov	r2, r0
 8005784:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005786:	4628      	mov	r0, r5
 8005788:	6a21      	ldr	r1, [r4, #32]
 800578a:	47b0      	blx	r6
 800578c:	1c43      	adds	r3, r0, #1
 800578e:	89a3      	ldrh	r3, [r4, #12]
 8005790:	d106      	bne.n	80057a0 <__sflush_r+0x64>
 8005792:	6829      	ldr	r1, [r5, #0]
 8005794:	291d      	cmp	r1, #29
 8005796:	d82b      	bhi.n	80057f0 <__sflush_r+0xb4>
 8005798:	4a28      	ldr	r2, [pc, #160]	; (800583c <__sflush_r+0x100>)
 800579a:	410a      	asrs	r2, r1
 800579c:	07d6      	lsls	r6, r2, #31
 800579e:	d427      	bmi.n	80057f0 <__sflush_r+0xb4>
 80057a0:	2200      	movs	r2, #0
 80057a2:	6062      	str	r2, [r4, #4]
 80057a4:	6922      	ldr	r2, [r4, #16]
 80057a6:	04d9      	lsls	r1, r3, #19
 80057a8:	6022      	str	r2, [r4, #0]
 80057aa:	d504      	bpl.n	80057b6 <__sflush_r+0x7a>
 80057ac:	1c42      	adds	r2, r0, #1
 80057ae:	d101      	bne.n	80057b4 <__sflush_r+0x78>
 80057b0:	682b      	ldr	r3, [r5, #0]
 80057b2:	b903      	cbnz	r3, 80057b6 <__sflush_r+0x7a>
 80057b4:	6560      	str	r0, [r4, #84]	; 0x54
 80057b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057b8:	602f      	str	r7, [r5, #0]
 80057ba:	2900      	cmp	r1, #0
 80057bc:	d0ca      	beq.n	8005754 <__sflush_r+0x18>
 80057be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057c2:	4299      	cmp	r1, r3
 80057c4:	d002      	beq.n	80057cc <__sflush_r+0x90>
 80057c6:	4628      	mov	r0, r5
 80057c8:	f7ff fec4 	bl	8005554 <_free_r>
 80057cc:	2000      	movs	r0, #0
 80057ce:	6360      	str	r0, [r4, #52]	; 0x34
 80057d0:	e7c1      	b.n	8005756 <__sflush_r+0x1a>
 80057d2:	2301      	movs	r3, #1
 80057d4:	4628      	mov	r0, r5
 80057d6:	47b0      	blx	r6
 80057d8:	1c41      	adds	r1, r0, #1
 80057da:	d1c8      	bne.n	800576e <__sflush_r+0x32>
 80057dc:	682b      	ldr	r3, [r5, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d0c5      	beq.n	800576e <__sflush_r+0x32>
 80057e2:	2b1d      	cmp	r3, #29
 80057e4:	d001      	beq.n	80057ea <__sflush_r+0xae>
 80057e6:	2b16      	cmp	r3, #22
 80057e8:	d101      	bne.n	80057ee <__sflush_r+0xb2>
 80057ea:	602f      	str	r7, [r5, #0]
 80057ec:	e7b2      	b.n	8005754 <__sflush_r+0x18>
 80057ee:	89a3      	ldrh	r3, [r4, #12]
 80057f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057f4:	81a3      	strh	r3, [r4, #12]
 80057f6:	e7ae      	b.n	8005756 <__sflush_r+0x1a>
 80057f8:	690f      	ldr	r7, [r1, #16]
 80057fa:	2f00      	cmp	r7, #0
 80057fc:	d0aa      	beq.n	8005754 <__sflush_r+0x18>
 80057fe:	0793      	lsls	r3, r2, #30
 8005800:	bf18      	it	ne
 8005802:	2300      	movne	r3, #0
 8005804:	680e      	ldr	r6, [r1, #0]
 8005806:	bf08      	it	eq
 8005808:	694b      	ldreq	r3, [r1, #20]
 800580a:	1bf6      	subs	r6, r6, r7
 800580c:	600f      	str	r7, [r1, #0]
 800580e:	608b      	str	r3, [r1, #8]
 8005810:	2e00      	cmp	r6, #0
 8005812:	dd9f      	ble.n	8005754 <__sflush_r+0x18>
 8005814:	4633      	mov	r3, r6
 8005816:	463a      	mov	r2, r7
 8005818:	4628      	mov	r0, r5
 800581a:	6a21      	ldr	r1, [r4, #32]
 800581c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005820:	47e0      	blx	ip
 8005822:	2800      	cmp	r0, #0
 8005824:	dc06      	bgt.n	8005834 <__sflush_r+0xf8>
 8005826:	89a3      	ldrh	r3, [r4, #12]
 8005828:	f04f 30ff 	mov.w	r0, #4294967295
 800582c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005830:	81a3      	strh	r3, [r4, #12]
 8005832:	e790      	b.n	8005756 <__sflush_r+0x1a>
 8005834:	4407      	add	r7, r0
 8005836:	1a36      	subs	r6, r6, r0
 8005838:	e7ea      	b.n	8005810 <__sflush_r+0xd4>
 800583a:	bf00      	nop
 800583c:	dfbffffe 	.word	0xdfbffffe

08005840 <_fflush_r>:
 8005840:	b538      	push	{r3, r4, r5, lr}
 8005842:	690b      	ldr	r3, [r1, #16]
 8005844:	4605      	mov	r5, r0
 8005846:	460c      	mov	r4, r1
 8005848:	b913      	cbnz	r3, 8005850 <_fflush_r+0x10>
 800584a:	2500      	movs	r5, #0
 800584c:	4628      	mov	r0, r5
 800584e:	bd38      	pop	{r3, r4, r5, pc}
 8005850:	b118      	cbz	r0, 800585a <_fflush_r+0x1a>
 8005852:	6a03      	ldr	r3, [r0, #32]
 8005854:	b90b      	cbnz	r3, 800585a <_fflush_r+0x1a>
 8005856:	f7ff fc85 	bl	8005164 <__sinit>
 800585a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d0f3      	beq.n	800584a <_fflush_r+0xa>
 8005862:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005864:	07d0      	lsls	r0, r2, #31
 8005866:	d404      	bmi.n	8005872 <_fflush_r+0x32>
 8005868:	0599      	lsls	r1, r3, #22
 800586a:	d402      	bmi.n	8005872 <_fflush_r+0x32>
 800586c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800586e:	f7ff fe6e 	bl	800554e <__retarget_lock_acquire_recursive>
 8005872:	4628      	mov	r0, r5
 8005874:	4621      	mov	r1, r4
 8005876:	f7ff ff61 	bl	800573c <__sflush_r>
 800587a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800587c:	4605      	mov	r5, r0
 800587e:	07da      	lsls	r2, r3, #31
 8005880:	d4e4      	bmi.n	800584c <_fflush_r+0xc>
 8005882:	89a3      	ldrh	r3, [r4, #12]
 8005884:	059b      	lsls	r3, r3, #22
 8005886:	d4e1      	bmi.n	800584c <_fflush_r+0xc>
 8005888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800588a:	f7ff fe61 	bl	8005550 <__retarget_lock_release_recursive>
 800588e:	e7dd      	b.n	800584c <_fflush_r+0xc>

08005890 <__swhatbuf_r>:
 8005890:	b570      	push	{r4, r5, r6, lr}
 8005892:	460c      	mov	r4, r1
 8005894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005898:	4615      	mov	r5, r2
 800589a:	2900      	cmp	r1, #0
 800589c:	461e      	mov	r6, r3
 800589e:	b096      	sub	sp, #88	; 0x58
 80058a0:	da0c      	bge.n	80058bc <__swhatbuf_r+0x2c>
 80058a2:	89a3      	ldrh	r3, [r4, #12]
 80058a4:	2100      	movs	r1, #0
 80058a6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80058aa:	bf0c      	ite	eq
 80058ac:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80058b0:	2340      	movne	r3, #64	; 0x40
 80058b2:	2000      	movs	r0, #0
 80058b4:	6031      	str	r1, [r6, #0]
 80058b6:	602b      	str	r3, [r5, #0]
 80058b8:	b016      	add	sp, #88	; 0x58
 80058ba:	bd70      	pop	{r4, r5, r6, pc}
 80058bc:	466a      	mov	r2, sp
 80058be:	f000 f849 	bl	8005954 <_fstat_r>
 80058c2:	2800      	cmp	r0, #0
 80058c4:	dbed      	blt.n	80058a2 <__swhatbuf_r+0x12>
 80058c6:	9901      	ldr	r1, [sp, #4]
 80058c8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80058cc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80058d0:	4259      	negs	r1, r3
 80058d2:	4159      	adcs	r1, r3
 80058d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058d8:	e7eb      	b.n	80058b2 <__swhatbuf_r+0x22>

080058da <__smakebuf_r>:
 80058da:	898b      	ldrh	r3, [r1, #12]
 80058dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80058de:	079d      	lsls	r5, r3, #30
 80058e0:	4606      	mov	r6, r0
 80058e2:	460c      	mov	r4, r1
 80058e4:	d507      	bpl.n	80058f6 <__smakebuf_r+0x1c>
 80058e6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80058ea:	6023      	str	r3, [r4, #0]
 80058ec:	6123      	str	r3, [r4, #16]
 80058ee:	2301      	movs	r3, #1
 80058f0:	6163      	str	r3, [r4, #20]
 80058f2:	b002      	add	sp, #8
 80058f4:	bd70      	pop	{r4, r5, r6, pc}
 80058f6:	466a      	mov	r2, sp
 80058f8:	ab01      	add	r3, sp, #4
 80058fa:	f7ff ffc9 	bl	8005890 <__swhatbuf_r>
 80058fe:	9900      	ldr	r1, [sp, #0]
 8005900:	4605      	mov	r5, r0
 8005902:	4630      	mov	r0, r6
 8005904:	f7ff fe8e 	bl	8005624 <_malloc_r>
 8005908:	b948      	cbnz	r0, 800591e <__smakebuf_r+0x44>
 800590a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800590e:	059a      	lsls	r2, r3, #22
 8005910:	d4ef      	bmi.n	80058f2 <__smakebuf_r+0x18>
 8005912:	f023 0303 	bic.w	r3, r3, #3
 8005916:	f043 0302 	orr.w	r3, r3, #2
 800591a:	81a3      	strh	r3, [r4, #12]
 800591c:	e7e3      	b.n	80058e6 <__smakebuf_r+0xc>
 800591e:	89a3      	ldrh	r3, [r4, #12]
 8005920:	6020      	str	r0, [r4, #0]
 8005922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005926:	81a3      	strh	r3, [r4, #12]
 8005928:	9b00      	ldr	r3, [sp, #0]
 800592a:	6120      	str	r0, [r4, #16]
 800592c:	6163      	str	r3, [r4, #20]
 800592e:	9b01      	ldr	r3, [sp, #4]
 8005930:	b15b      	cbz	r3, 800594a <__smakebuf_r+0x70>
 8005932:	4630      	mov	r0, r6
 8005934:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005938:	f000 f81e 	bl	8005978 <_isatty_r>
 800593c:	b128      	cbz	r0, 800594a <__smakebuf_r+0x70>
 800593e:	89a3      	ldrh	r3, [r4, #12]
 8005940:	f023 0303 	bic.w	r3, r3, #3
 8005944:	f043 0301 	orr.w	r3, r3, #1
 8005948:	81a3      	strh	r3, [r4, #12]
 800594a:	89a3      	ldrh	r3, [r4, #12]
 800594c:	431d      	orrs	r5, r3
 800594e:	81a5      	strh	r5, [r4, #12]
 8005950:	e7cf      	b.n	80058f2 <__smakebuf_r+0x18>
	...

08005954 <_fstat_r>:
 8005954:	b538      	push	{r3, r4, r5, lr}
 8005956:	2300      	movs	r3, #0
 8005958:	4d06      	ldr	r5, [pc, #24]	; (8005974 <_fstat_r+0x20>)
 800595a:	4604      	mov	r4, r0
 800595c:	4608      	mov	r0, r1
 800595e:	4611      	mov	r1, r2
 8005960:	602b      	str	r3, [r5, #0]
 8005962:	f7fc fb61 	bl	8002028 <_fstat>
 8005966:	1c43      	adds	r3, r0, #1
 8005968:	d102      	bne.n	8005970 <_fstat_r+0x1c>
 800596a:	682b      	ldr	r3, [r5, #0]
 800596c:	b103      	cbz	r3, 8005970 <_fstat_r+0x1c>
 800596e:	6023      	str	r3, [r4, #0]
 8005970:	bd38      	pop	{r3, r4, r5, pc}
 8005972:	bf00      	nop
 8005974:	20000ef8 	.word	0x20000ef8

08005978 <_isatty_r>:
 8005978:	b538      	push	{r3, r4, r5, lr}
 800597a:	2300      	movs	r3, #0
 800597c:	4d05      	ldr	r5, [pc, #20]	; (8005994 <_isatty_r+0x1c>)
 800597e:	4604      	mov	r4, r0
 8005980:	4608      	mov	r0, r1
 8005982:	602b      	str	r3, [r5, #0]
 8005984:	f7fc fb5f 	bl	8002046 <_isatty>
 8005988:	1c43      	adds	r3, r0, #1
 800598a:	d102      	bne.n	8005992 <_isatty_r+0x1a>
 800598c:	682b      	ldr	r3, [r5, #0]
 800598e:	b103      	cbz	r3, 8005992 <_isatty_r+0x1a>
 8005990:	6023      	str	r3, [r4, #0]
 8005992:	bd38      	pop	{r3, r4, r5, pc}
 8005994:	20000ef8 	.word	0x20000ef8

08005998 <_sbrk_r>:
 8005998:	b538      	push	{r3, r4, r5, lr}
 800599a:	2300      	movs	r3, #0
 800599c:	4d05      	ldr	r5, [pc, #20]	; (80059b4 <_sbrk_r+0x1c>)
 800599e:	4604      	mov	r4, r0
 80059a0:	4608      	mov	r0, r1
 80059a2:	602b      	str	r3, [r5, #0]
 80059a4:	f7fc fb66 	bl	8002074 <_sbrk>
 80059a8:	1c43      	adds	r3, r0, #1
 80059aa:	d102      	bne.n	80059b2 <_sbrk_r+0x1a>
 80059ac:	682b      	ldr	r3, [r5, #0]
 80059ae:	b103      	cbz	r3, 80059b2 <_sbrk_r+0x1a>
 80059b0:	6023      	str	r3, [r4, #0]
 80059b2:	bd38      	pop	{r3, r4, r5, pc}
 80059b4:	20000ef8 	.word	0x20000ef8

080059b8 <_init>:
 80059b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ba:	bf00      	nop
 80059bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059be:	bc08      	pop	{r3}
 80059c0:	469e      	mov	lr, r3
 80059c2:	4770      	bx	lr

080059c4 <_fini>:
 80059c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059c6:	bf00      	nop
 80059c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ca:	bc08      	pop	{r3}
 80059cc:	469e      	mov	lr, r3
 80059ce:	4770      	bx	lr
